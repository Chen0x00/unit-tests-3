/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.utils.CookieUtil;
import java.io.StringWriter;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class CookieUtil_SSTest extends CookieUtil_SSTest_scaffolding {
// allCoveredLines:[13, 23, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 52, 53, 64, 65, 66, 68, 70, 71, 72, 73, 76, 77, 78, 79, 87, 88, 95, 96, 103, 104, 111, 112, 119, 120, 127, 128, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 195, 197, 198, 199, 202, 204, 205, 207, 209, 211, 215, 217, 218, 219, 221, 222, 224, 226, 230, 231, 232, 234]

  @Test(timeout = 9000)
  public void test_deleteCookie_00()  throws Throwable  {
      //caseID:78ba0c27425d2cfef879e6316ea691c5
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 221, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      
      stringWriter0.append((CharSequence) "com.nbcb.utils.CookieUtil");
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_01()  throws Throwable  {
      //caseID:dcd2c449f8c57e04abdcba94c73f4f6e
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 205, 207, 209, 211, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: upgradeHandler.upgrade.fail
      
      StringWriter stringWriter0 = new StringWriter();
      
      stringWriter0.write("http://:/g:::::d::");
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "upgradeHandler.upgrade.fail");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_02()  throws Throwable  {
      //caseID:5c020a5f032cd5a32ea8763c7620150a
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 211, 215, 217, 218, 219, 222, 226, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0\u0000|").when(charSequence0).toString();
      
      stringWriter0.append(charSequence0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "http://");
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1.0");
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_03()  throws Throwable  {
      //caseID:f53fbae94a5e93c03bc10b09772ed2d1
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Input_2_String: 10
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null, "10");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_04()  throws Throwable  {
      //caseID:f2793f441eaaee7df8e835d2a6afbdc6
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: .
      //Input_2_String: :
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, ".", ":");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_05()  throws Throwable  {
      //caseID:557724ecd4356fb912be214b164d99de
      //CoveredLines: [23, 34, 35, 36]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_06()  throws Throwable  {
      //caseID:3bc9a6ae96a55cf50babe66760436b66
      //CoveredLines: [23, 34, 35, 36]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: 1
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_07()  throws Throwable  {
      //caseID:285ae7dd7e1a1934b8898bf54d1b7244
      //CoveredLines: [64, 65, 68, 70, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: sourceDisconnector
      //Input_2_String: sourceDisconnector
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "sourceDisconnector", "sourceDisconnector");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_08()  throws Throwable  {
      //caseID:88762d32b8f0709af208c93b16117eb2
      //CoveredLines: [23, 34, 35, 38, 40, 41, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: -1880747735
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("The zipper returned a null value").when(cookie0).getName();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "-1880747735");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_09()  throws Throwable  {
      //caseID:5f0b68b20c33bd76cd13601fb5d06d63
      //CoveredLines: [64, 65, 68, 70, 71, 72, 76, 77, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 
      //Input_2_String: 
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[4];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(cookie0).getName();
      doReturn("").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_10()  throws Throwable  {
      //caseID:6a1d2d89be04c46381723a7f9c5d6c58
      //CoveredLines: [64, 65, 68, 70, 71, 72, 73, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: -1
      //Input_2_String: -1
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("-1", method_result);
      
      Cookie[] cookieArray0 = new Cookie[3];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1").when(cookie0).getName();
      doReturn("-1").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "-1", "-1");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("-1", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_11()  throws Throwable  {
      //caseID:c71bb3481f82a9553020860606729166
      //CoveredLines: [13, 34, 35, 38, 40, 41, 42, 43, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: UTF-8
      //Input_2_boolean: true
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("", method_result);
      
      CookieUtil cookieUtil0 = new CookieUtil();
      Cookie[] cookieArray0 = new Cookie[2];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("", "UTF-8").when(cookie0).getName();
      doReturn("").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      cookieArray0[1] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "UTF-8", true);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_12()  throws Throwable  {
      //caseID:64eb110873c0e83193fd96480513945d
      //CoveredLines: [13, 34, 35, 38, 40, 41, 42, 43, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: UTF-8
      //Input_2_boolean: true
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("UTF-8", method_result);
      
      CookieUtil cookieUtil0 = new CookieUtil();
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("UTF-8").when(cookie0).getName();
      doReturn("UTF-8").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "UTF-8", true);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_13()  throws Throwable  {
      //caseID:6d0c5d68740c261efa0194fb268f4e3b
      //CoveredLines: [13, 34, 35, 38, 40, 41, 42, 45, 47, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: UTF-8
      //Input_2_boolean: false
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("UTF-8", method_result);
      
      CookieUtil cookieUtil0 = new CookieUtil();
      Cookie[] cookieArray0 = new Cookie[7];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("UTF-8").when(cookie0).getName();
      doReturn("UTF-8").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "UTF-8", false);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_14()  throws Throwable  {
      //caseID:e906eaad059a9d939776699d98532214
      //CoveredLines: [23, 34, 35, 38, 40, 41, 42, 45, 47, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 1
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("1", method_result);
      
      Cookie[] cookieArray0 = new Cookie[10];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(cookie0).getName();
      doReturn("1").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 9000)
  public void test_setCookie_15()  throws Throwable  {
      //caseID:0db2343de7f80212f06c6eaa14dd0aa5
      //CoveredLines: [119, 120, 168, 169, 173, 186, 187, 189]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: :
      //Input_3_String: null
      //Input_4_int: -1
      //Input_5_String: :
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, ":", (String) null, (-1), ":");
  }

  @Test(timeout = 9000)
  public void test_setCookie_16()  throws Throwable  {
      //caseID:db2ba58bfce2fcc317671627c0225f5c
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 184, 185, 188, 189]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: UTF-8
      //Input_3_String: http://
      //Input_4_int: 2147483637
      //Input_5_String: UTF-8
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "UTF-8", "http://", 2147483637, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_17()  throws Throwable  {
      //caseID:9f8523dc6a2aee777754f20d2d927edf
      //CoveredLines: [103, 104, 111, 112, 138, 139, 143, 144, 146, 153, 154, 157, 158]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      //Input_3_String: null
      //Input_4_boolean: true
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "1.0", (String) null, true);
  }

  @Test(timeout = 9000)
  public void test_setCookie_18()  throws Throwable  {
      //caseID:e3458c360db0b7665178f8b1ea4ab2a5
      //CoveredLines: [103, 104, 111, 112, 138, 140, 141, 143, 144, 146, 153, 154, 157, 158]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      //Input_3_String: 1.0
      //Input_4_boolean: true
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "1.0", "1.0", true);
  }

  @Test(timeout = 9000)
  public void test_setCookie_19()  throws Throwable  {
      //caseID:57183b2aecc9b49ac9a6dcf335a84db9
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 186, 187, 189, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: utf-8
      //Input_3_String: 8
      //Input_4_int: 3
      //Input_5_String: utf-8
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "utf-8", "8", 3, "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_20()  throws Throwable  {
      //caseID:9a3d6c5cb75307895384efeabb90a6b0
      //CoveredLines: [103, 104, 111, 112, 138, 140, 141, 143, 144, 146, 147, 155, 156, 158, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      //Input_3_String: 1
      //Input_4_boolean: true
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "1.0", "1", true);
  }

  @Test(timeout = 9000)
  public void test_setCookie_21()  throws Throwable  {
      //caseID:6fa3002ffa057b13fcecdcf2a0791cdf
      //CoveredLines: [119, 120, 168, 171, 173, 174, 177, 178, 179, 180, 181, 184, 185, 188, 189, 195, 197, 198, 199, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: utf-8
      //Input_3_String: 2
      //Input_4_int: -13
      //Input_5_String: utf-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "utf-8", "2", (-13), "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_22()  throws Throwable  {
      //caseID:4fc8bbb2a190d5b9eab8efb07f7d0355
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 188, 189, 195, 197, 198, 199, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: UTF-8
      //Input_3_String: 8
      //Input_4_int: 3
      //Input_5_String: UTF-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "UTF-8", "8", 3, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_23()  throws Throwable  {
      //caseID:e018d2dcb700260fb773cbe257bfd26f
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 179, 180, 184, 185, 188, 189, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: localhost
      //Input_3_String: ]B^`
      //Input_4_int: 2147483645
      //Input_5_String: utf-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.append((CharSequence) "localhost");
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "localhost", "]B^`", 2147483645, "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_24()  throws Throwable  {
      //caseID:9f19d1a299ec297977a4ddfa0dbac18f
      //CoveredLines: [95, 96, 111, 112, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 224, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      //Input_3_String: -1
      //Input_4_int: 3
      
      StringWriter stringWriter0 = new StringWriter(7);
      
      StringWriter stringWriter1 = stringWriter0.append('.');
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter1.write("0");
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "1.0", "-1", 3);
  }

  @Test(timeout = 9000)
  public void test_setCookie_25()  throws Throwable  {
      //caseID:a9c03337628dda58e698eeb45cf6b566
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 147, 148, 149, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 6
      //Input_3_String: http://
      
      StringWriter stringWriter0 = new StringWriter();
      
      stringWriter0.write("localhost");
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "6", "http://");
  }
}
