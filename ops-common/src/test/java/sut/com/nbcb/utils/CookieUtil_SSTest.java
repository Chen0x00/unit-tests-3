/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.utils.CookieUtil;
import java.io.StringWriter;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class CookieUtil_SSTest extends CookieUtil_SSTest_scaffolding {
// allCoveredLines:[13, 23, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 52, 53, 64, 65, 66, 68, 70, 71, 72, 73, 76, 77, 78, 79, 87, 88, 95, 96, 103, 104, 111, 112, 119, 120, 127, 128, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 195, 197, 198, 199, 202, 204, 205, 207, 209, 211, 215, 217, 218, 219, 221, 222, 224, 226, 230, 231, 232, 234]

  @Test(timeout = 9000)
  public void test_deleteCookie_00()  throws Throwable  {
      //caseID:5215f2eb64c82820d50854af61f8b186
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 199, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_01()  throws Throwable  {
      //caseID:8a2c028ff53d4d1f10232066cc0d5a2d
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 205, 207, 209, 215, 217, 218, 219, 221, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://:1.01.0q").when(charSequence0).toString();
      
      stringWriter0.append(charSequence0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.write("1.0");
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_02()  throws Throwable  {
      //caseID:94fe5ad3f4c47081cd014d3a743551ad
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 205, 207, 209, 215, 217, 218, 219, 222, 224, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://:1.01.0q").when(charSequence0).toString();
      
      stringWriter0.append(charSequence0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_03()  throws Throwable  {
      //caseID:2125e2345f92bdf191013ddf46956436
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 205, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      
      stringWriter0.write("http://");
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_04()  throws Throwable  {
      //caseID:60320fb37bbfcec2948c10ad98430afb
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.write(":");
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "1");
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_05()  throws Throwable  {
      //caseID:d989466f217c07d551514c1358895456
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Input_2_String: com.nbcb.utils.CookieUtil
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null, "com.nbcb.utils.CookieUtil");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_06()  throws Throwable  {
      //caseID:9300a4b5923e7ba2c4fdf44c3a094e4b
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: UTF-8
      //Input_2_String: 1.0
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "UTF-8", "1.0");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_07()  throws Throwable  {
      //caseID:2a658fa3f16f04d07cac5483ad8ec9b7
      //CoveredLines: [23, 34, 35, 36]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_08()  throws Throwable  {
      //caseID:09ba49c60409a882a719b9eab5cfb619
      //CoveredLines: [13, 23, 34, 35, 36]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: rm&^XHrsh*.
      //Assert: assertNull(method_result);
      
      CookieUtil cookieUtil0 = new CookieUtil();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "rm&^XHrsh*.");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_09()  throws Throwable  {
      //caseID:2d020c371ec5f7ab8cd21d5491856782
      //CoveredLines: [64, 65, 68, 70, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: com.nbcb.utils.CookieUtil
      //Input_2_String: com.nbcb.utils.CookieUtil
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "com.nbcb.utils.CookieUtil", "com.nbcb.utils.CookieUtil");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_10()  throws Throwable  {
      //caseID:f169f9b65d794bc904524a56a641d446
      //CoveredLines: [23, 34, 35, 38, 40, 41, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: com.nbcb.utils.CookieUtil
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("reactor.util.function.Tuple2").when(cookie0).getName();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "com.nbcb.utils.CookieUtil");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_11()  throws Throwable  {
      //caseID:409ec0e756948697d1d425f1fd6225e3
      //CoveredLines: [34, 35, 38, 40, 41, 42, 43, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 1
      //Input_2_boolean: true
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("V^E'a^VQn6", method_result);
      
      Cookie[] cookieArray0 = new Cookie[3];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("V^E'a^VQn6", "1").when(cookie0).getName();
      doReturn("V^E'a^VQn6").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      cookieArray0[1] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1", true);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("V^E'a^VQn6", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_12()  throws Throwable  {
      //caseID:d3496771d426a95e527d4df502a04aac
      //CoveredLines: [64, 65, 68, 70, 71, 72, 76, 77, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: :
      //Input_2_String: 
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[8];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(":").when(cookie0).getName();
      doReturn(":").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, ":", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_13()  throws Throwable  {
      //caseID:a8557a9d3e94f9ea8e45bdc2ee840716
      //CoveredLines: [64, 65, 68, 70, 71, 72, 73, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: :
      //Input_2_String: :
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(":", method_result);
      
      Cookie[] cookieArray0 = new Cookie[6];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(":").when(cookie0).getName();
      doReturn(":").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, ":", ":");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals(":", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_14()  throws Throwable  {
      //caseID:46d69420fc960e857c391f23b10c0310
      //CoveredLines: [34, 35, 38, 40, 41, 42, 45, 47, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 1
      //Input_2_boolean: false
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("1", method_result);
      
      Cookie[] cookieArray0 = new Cookie[3];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("V^E'a^VQn6", "1").when(cookie0).getName();
      doReturn("1").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      cookieArray0[1] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1", false);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_15()  throws Throwable  {
      //caseID:311632cfea562ddb66e29f3e325c4954
      //CoveredLines: [23, 34, 35, 38, 40, 41, 42, 45, 47, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 3
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("3", method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("3").when(cookie0).getName();
      doReturn("3").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "3");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("3", string0);
  }

  @Test(timeout = 9000)
  public void test_setCookie_16()  throws Throwable  {
      //caseID:38aa6053d2ff3b56e31fb09f47b438af
      //CoveredLines: [103, 104, 111, 112, 138, 140, 141, 143, 155, 156, 158]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: Exceeded maximum number of repeats
      //Input_3_String: PD\"n^@epBYX{p
      //Input_4_boolean: true
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "Exceeded maximum number of repeats", "PD\"n^@epBYX{p", true);
  }

  @Test(timeout = 9000)
  public void test_setCookie_17()  throws Throwable  {
      //caseID:e4c4688a377c5d140257c6dbf4f94637
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 184, 185, 188, 189]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: keyExtractor
      //Input_3_String: 
      //Input_4_int: 25
      //Input_5_String: UTF-8
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "keyExtractor", "", 25, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_18()  throws Throwable  {
      //caseID:21063e51f21fa946a97606e0037b34d6
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 139, 143, 155, 156, 158]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: :
      //Input_3_String: null
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, ":", (String) null);
  }

  @Test(timeout = 9000)
  public void test_setCookie_19()  throws Throwable  {
      //caseID:0ceea2e2107ec910af45d8bb786266d6
      //CoveredLines: [95, 96, 111, 112, 138, 140, 143, 144, 146, 153, 154, 157, 158]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: .
      //Input_3_String: :
      //Input_4_int: -31
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, ".", ":", (-31));
  }

  @Test(timeout = 9000)
  public void test_setCookie_20()  throws Throwable  {
      //caseID:159cdc15781baa20831c9259cc5172fe
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 186, 187, 189, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1.0
      //Input_3_String: :
      //Input_4_int: 3
      //Input_5_String: UTF-8
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "1.0", ":", 3, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_21()  throws Throwable  {
      //caseID:52716fb8eb60c85c309fc52342be1993
      //CoveredLines: [95, 96, 111, 112, 138, 140, 143, 144, 145, 146, 147, 155, 156, 158, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: .
      //Input_3_String: :
      //Input_4_int: 3
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, ".", ":", 3);
  }

  @Test(timeout = 9000)
  public void test_setCookie_22()  throws Throwable  {
      //caseID:035f3af42417290589df4adcb832ac24
      //CoveredLines: [119, 120, 168, 169, 173, 174, 177, 178, 179, 180, 181, 184, 185, 188, 189, 195, 197, 198, 199, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 'Q
      //Input_3_String: null
      //Input_4_int: -2021514256
      //Input_5_String: utf-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "'Q", (String) null, (-2021514256), "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_23()  throws Throwable  {
      //caseID:e738cd98159fd63e87bd3eec14eaff7c
      //CoveredLines: [119, 120, 168, 171, 173, 174, 177, 178, 179, 180, 184, 185, 188, 189, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 9_j
      //Input_3_String: utf-8
      //Input_4_int: -2021514260
      //Input_5_String: utf-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.write("localhost");
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "9_j", "utf-8", (-2021514260), "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_24()  throws Throwable  {
      //caseID:bd95e7606438ca99c4f139ea16632eec
      //CoveredLines: [119, 120, 168, 171, 173, 174, 177, 178, 179, 180, 181, 184, 185, 188, 189, 195, 197, 198, 202, 204, 207, 209, 211, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: utf-8
      //Input_3_String: UTF-8
      //Input_4_int: -2021514256
      //Input_5_String: UTF-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringWriter stringWriter1 = stringWriter0.append('/');
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "utf-8", "UTF-8", (-2021514256), "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_25()  throws Throwable  {
      //caseID:2dc7e503b208f5ceec74bd6f8c633eba
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 147, 148, 149, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 0
      //Input_3_String: .
      
      StringWriter stringWriter0 = new StringWriter(2);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.append((CharSequence) "localhost");
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "0", ".");
  }

  @Test(timeout = 9000)
  public void test_setCookie_26()  throws Throwable  {
      //caseID:f1844329fe3efc99b72d4cb253b4c998
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 211, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 0
      //Input_3_String: reactor.util.function.Tuple2
      
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/Processors/").when(charSequence0).toString();
      
      StringWriter stringWriter1 = stringWriter0.append(charSequence0);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "0", "reactor.util.function.Tuple2");
  }

  @Test(timeout = 9000)
  public void test_setCookie_27()  throws Throwable  {
      //caseID:91e1e1b1c57dabdcfadc434677c00ade
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 0
      //Input_3_String: reactor.util.function.Tuple2
      
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(":").when(charSequence0).toString();
      
      StringWriter stringWriter1 = stringWriter0.append(charSequence0);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "0", "reactor.util.function.Tuple2");
  }
}
