/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.utils.CookieUtil;
import java.io.StringWriter;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class CookieUtil_SSTest extends CookieUtil_SSTest_scaffolding {
// allCoveredLines:[13, 23, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 52, 53, 64, 65, 66, 68, 70, 71, 72, 73, 76, 77, 78, 79, 87, 88, 95, 96, 103, 104, 111, 112, 119, 120, 127, 128, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 168, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 195, 197, 198, 199, 202, 204, 205, 207, 209, 211, 215, 217, 218, 219, 221, 222, 224, 226, 230, 231, 232, 234]

  @Test(timeout = 9000)
  public void test_deleteCookie_00()  throws Throwable  {
      //caseID:e3fb6750a6b74c85e27d0bc9e0a028a5
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 224, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 0
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      
      stringWriter0.write(".l1.0");
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "0");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_01()  throws Throwable  {
      //caseID:da45a090e47449e6276b2e1cbe447721
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 205, 207, 209, 215, 217, 218, 219, 221, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: -1952257859
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = "http://re{ct:r.adapter.jdkflowadaptet$flowpublisherasf\\uxre{ct:r.adapter.jdkflowadaptet$flowpublisherasf\\ux";
      
      stringWriter0.write(string0);
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, httpServletResponse0, "-1952257859");
  }

  @Test(timeout = 9000)
  public void test_deleteCookie_02()  throws Throwable  {
      //caseID:1215a2709ef32a4ed1ca476346584951
      //CoveredLines: [127, 128, 138, 140, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 195, 197, 198, 202, 204, 207, 209, 211, 215, 217, 218, 219, 222, 226, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: null
      //Input_2_String: 2
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      
      stringWriter0.write("java:comp/env/");
      
      //Call method: deleteCookie
      CookieUtil.deleteCookie(httpServletRequest0, (HttpServletResponse) null, "2");
  }

  @Test(timeout = 9000)
  public void test_doSetCookie_03()  throws Throwable  {
      //caseID:f073b178a25553f1f800c2b81f224e2a
      //CoveredLines: [13, 168, 171, 173, 174, 177, 178, 179, 180, 184, 185, 188, 189, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 231, 232, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: stream.header.duplicate
      //Input_3_String: UTFo-8
      //Input_4_int: 0
      //Input_5_String: UTF-8
      
      CookieUtil cookieUtil0 = new CookieUtil();
      StringWriter stringWriter0 = new StringWriter();
      //mock charSequence0
      CharSequence charSequence0 = mock(CharSequence.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("localhost").when(charSequence0).subSequence(anyInt() , anyInt());
      
      StringWriter stringWriter1 = stringWriter0.append(charSequence0, 3, 3);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter1.write(":");
      
      //Call method: doSetCookie
      PrivateAccess.callMethod((Class<CookieUtil>) CookieUtil.class, cookieUtil0, "doSetCookie", (Object) httpServletRequest0, (Class<?>) HttpServletRequest.class, (Object) httpServletResponse0, (Class<?>) HttpServletResponse.class, (Object) "stream.header.duplicate", (Class<?>) String.class, (Object) "UTFo-8", (Class<?>) String.class, (Object) 0, (Class<?>) int.class, (Object) "UTF-8", (Class<?>) String.class);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_04()  throws Throwable  {
      //caseID:009d0b2df77802c2b66f09548938fde6
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Input_2_String: null
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null, (String) null);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_05()  throws Throwable  {
      //caseID:615cd482c4b33ad2fcd7ab766a894ba0
      //CoveredLines: [64, 65, 66]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: 2
      //Input_2_String: -1
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "2", "-1");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_06()  throws Throwable  {
      //caseID:8a1c30e55707d9b46f9e92ad85f6987d
      //CoveredLines: [23, 34, 35, 36]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: null
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, (String) null);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_07()  throws Throwable  {
      //caseID:532dcd3c8503c21636c0596e1e56a480
      //CoveredLines: [23, 34, 35, 36]
      //Input_0_HttpServletRequest: {}
      //Input_1_String: org.springframework.data.domain.ExampleMatcher$NoOpPropertyValueTransformer
      //Assert: assertNull(method_result);
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "org.springframework.data.domain.ExampleMatcher$NoOpPropertyValueTransformer");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_08()  throws Throwable  {
      //caseID:28245ef35fa132784e1907c35d4eac03
      //CoveredLines: [64, 65, 68, 70, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 1.0
      //Input_2_String: 1
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[0];
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1.0", "1");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_09()  throws Throwable  {
      //caseID:9b2bfc80406305fcc0e8184b88af27a1
      //CoveredLines: [34, 35, 38, 40, 41, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: com.nbcb.utils.CookieUtil
      //Input_2_boolean: false
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://").when(cookie0).getName();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "com.nbcb.utils.CookieUtil", false);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_10()  throws Throwable  {
      //caseID:5e35473cc563096170ad38f281352f2e
      //CoveredLines: [23, 34, 35, 38, 40, 41, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: .
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1").when(cookie0).getName();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, ".");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_11()  throws Throwable  {
      //caseID:c8d53eb84426e9523f3e2d44ab94530a
      //CoveredLines: [64, 65, 68, 70, 71, 72, 76, 77, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 
      //Input_2_String: 
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[7];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(cookie0).getName();
      doReturn("").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "", "");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_12()  throws Throwable  {
      //caseID:94fadc8f97232d5eb9ccc8d81af65ac6
      //CoveredLines: [34, 35, 38, 40, 41, 42, 43, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: http://
      //Input_2_boolean: true
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("http://", method_result);
      
      Cookie[] cookieArray0 = new Cookie[7];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://").when(cookie0).getName();
      doReturn("http://").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "http://", true);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("http://", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_13()  throws Throwable  {
      //caseID:32150e07526d1e78bc90481548243050
      //CoveredLines: [64, 65, 68, 70, 71, 72, 73, 78, 79]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: -
      //Input_2_String: -
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("-", method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-").when(cookie0).getName();
      doReturn("-").when(cookie0).getValue();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "-", "-");
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("-", string0);
  }

  @Test(timeout = 9000)
  public void test_getCookieValue_14()  throws Throwable  {
      //caseID:037ec11a2627c6bf554d12ac5843868e
      //CoveredLines: [23, 34, 35, 38, 40, 41, 42, 45, 47, 52, 53]
      //Input_0_HttpServletRequest: {getCookies=cookieArray0}
      //Input_1_String: 1
      //Assert: assertNull(method_result);
      
      Cookie[] cookieArray0 = new Cookie[1];
      //mock cookie0
      Cookie cookie0 = mock(Cookie.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(cookie0).getName();
      cookieArray0[0] = cookie0;
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      
      //Call method: getCookieValue
      String string0 = CookieUtil.getCookieValue(httpServletRequest0, "1");
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_setCookie_15()  throws Throwable  {
      //caseID:b9ec86181e5c1c43566b37a549e55c57
      //CoveredLines: [119, 120, 168, 169, 173, 186, 187, 189]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: <pJ.PmutT{i
      //Input_3_String: null
      //Input_4_int: 230
      //Input_5_String: 97
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "<pJ.PmutT{i", (String) null, 230, "97");
  }

  @Test(timeout = 9000)
  public void test_setCookie_16()  throws Throwable  {
      //caseID:047286949ce53432b993ad151988e2cf
      //CoveredLines: [103, 104, 111, 112, 138, 140, 141, 143, 155, 156, 158]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: ;db9 A*T$8?qu55SK
      //Input_3_String: localhost
      //Input_4_boolean: true
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, ";db9 A*T$8?qu55SK", "localhost", true);
  }

  @Test(timeout = 9000)
  public void test_setCookie_17()  throws Throwable  {
      //caseID:41e4d4d5a4278a1a373ffb3694507d99
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 184, 185, 188, 189]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: utf-8
      //Input_3_String: reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber
      //Input_4_int: 2536
      //Input_5_String: UTF-8
      
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "utf-8", "reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber", 2536, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_18()  throws Throwable  {
      //caseID:587724ed7a53d471f351be8ab7bfa9c1
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 186, 187, 189, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: http2Parser.processFrameWindowUpdate.debug
      //Input_3_String: UTF-8
      //Input_4_int: 5
      //Input_5_String: UTF-8
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "http2Parser.processFrameWindowUpdate.debug", "UTF-8", 5, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_19()  throws Throwable  {
      //caseID:455518aa9cd79f04aa34e539df5e985a
      //CoveredLines: [13, 87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 153, 154, 157, 158]
      //Input_0_HttpServletRequest: null
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 0
      //Input_3_String: 1.0
      
      CookieUtil cookieUtil0 = new CookieUtil();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) null, httpServletResponse0, "0", "1.0");
  }

  @Test(timeout = 9000)
  public void test_setCookie_20()  throws Throwable  {
      //caseID:1f928628157c5bb6a55505fa34e1efdd
      //CoveredLines: [95, 96, 111, 112, 138, 140, 143, 144, 145, 146, 147, 155, 156, 158, 195, 197]
      //Input_0_HttpServletRequest: {}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: other
      //Input_3_String: /
      //Input_4_int: 1
      
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "other", "/", 1);
  }

  @Test(timeout = 9000)
  public void test_setCookie_21()  throws Throwable  {
      //caseID:eadb524f56e970a122970bb54425afb7
      //CoveredLines: [119, 120, 168, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 188, 189, 195, 197, 198, 199, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: http2Parser.processFrameWindowUpdate.debug
      //Input_3_String: UTF-8
      //Input_4_int: 5
      //Input_5_String: UTF-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "http2Parser.processFrameWindowUpdate.debug", "UTF-8", 5, "UTF-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_22()  throws Throwable  {
      //caseID:2662dcc1679c65e6d68b8c473ee61ed5
      //CoveredLines: [119, 120, 168, 171, 173, 174, 177, 178, 179, 180, 184, 185, 188, 189, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: localhost
      //Input_3_String: T&*#Qj\";*S3N6EUf
      //Input_4_int: -1
      //Input_5_String: utf-8
      
      StringWriter stringWriter0 = new StringWriter();
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      stringWriter0.append((CharSequence) "localhost");
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "localhost", "T&*#Qj\";*S3N6EUf", (-1), "utf-8");
  }

  @Test(timeout = 9000)
  public void test_setCookie_23()  throws Throwable  {
      //caseID:5e6cbf67d0884ce51b7cc0a2ef3a4b9f
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 140, 143, 144, 146, 147, 148, 149, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: {getRequestURL=stringBuffer0}
      //Input_1_HttpServletResponse: {}
      //Input_2_String: 1
      //Input_3_String: 1
      
      StringWriter stringWriter0 = new StringWriter();
      
      stringWriter0.write("localhost");
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie(httpServletRequest0, httpServletResponse0, "1", "1");
  }

  @Test(timeout = 9000)
  public void test_setCookie_24()  throws Throwable  {
      //caseID:b57507921c693cdc263ef4559e8fc0f1
      //CoveredLines: [87, 88, 95, 96, 111, 112, 138, 139, 143, 144, 146, 147, 148, 149, 150, 153, 154, 157, 158, 195, 197, 198, 202, 204, 207, 209, 215, 217, 218, 219, 222, 226, 230, 234]
      //Input_0_HttpServletRequest: httpServletRequest0
      //Input_1_HttpServletResponse: {}
      //Input_2_String: found
      //Input_3_String: null
      
      StringWriter stringWriter0 = new StringWriter(7);
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stringBuffer0).when(httpServletRequest0).getRequestURL();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCookie
      CookieUtil.setCookie((HttpServletRequest) httpServletRequestWrapper0, httpServletResponse0, "found", (String) null);
  }
}
