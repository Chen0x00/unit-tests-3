/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.utils.IDWorker;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class IDWorker_SSTest extends IDWorker_SSTest_scaffolding {
// allCoveredLines:[32, 33, 35, 36, 39, 42, 43, 44, 52, 53, 54, 57, 59, 61, 66, 69, 71, 78, 79, 82, 86, 90, 92, 93, 94, 97, 99]

  @Test(timeout = 9000)
  public void test_getNextMill_0()  throws Throwable  {
      //caseID:c88d31fcfcf8dde42bf79b92f386205a
      //CoveredLines: [32, 33, 35, 36, 39, 42, 43, 44, 78, 79, 82, 86]
      //Assert: assertEquals(1392409281320L, method_result);
      
      IDWorker iDWorker0 = new IDWorker(0L, 0L);
      
      //Call method: getNextMill
      long long0 = (long)PrivateAccess.callMethod((Class<IDWorker>) IDWorker.class, iDWorker0, "getNextMill");
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 9000)
  public void test_main_1()  throws Throwable  {
      //caseID:e796125e8a683629e5477f0de156895a
      //CoveredLines: [32, 33, 35, 36, 39, 42, 43, 44, 52, 53, 57, 59, 61, 66, 69, 71, 86, 90, 92, 93, 94, 97, 99]
      //Input_0_String[]: stringArray0
      
      IDWorker iDWorker0 = new IDWorker(0L, 0L);
      String[] stringArray0 = new String[1];
      
      //Call method: main
      IDWorker.main(stringArray0);
      
      //Test Result Assert
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 9000)
  public void test_nextId_2()  throws Throwable  {
      //caseID:31ced20aaeddf8df0f6609b85ce48c59
      //CoveredLines: [32, 33, 35, 36, 39, 42, 43, 44, 52, 53, 54, 86]
      
      IDWorker iDWorker0 = new IDWorker(21L, 21L);
      
      PrivateAccess.setVariable((Class<?>) IDWorker.class, iDWorker0, "lastStmp", (Object) 1392409281329L);
      
      //Call method: nextId
      // Undeclared exception!
      try { 
        iDWorker0.nextId();
      } catch(Throwable e) {
         verifyException("com.nbcb.utils.IDWorker", e);
         assertEquals("org.smartunit.runtime.mock.java.lang.MockRuntimeException", e.getClass().getName());
         assertEquals("Clock moved backwards.  Refusing to generate id", e.getMessage());
      }
  }
}
