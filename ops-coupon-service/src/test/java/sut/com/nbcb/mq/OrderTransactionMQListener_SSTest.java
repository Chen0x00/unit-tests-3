/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.mq;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopUserMapper;
import com.nbcb.mapper.ShopUserMoneyLogMapper;
import com.nbcb.mq.OrderTransactionMQListener;
import com.nbcb.pojo.ShopUser;
import com.nbcb.pojo.ShopUserMoneyLog;
import java.math.BigDecimal;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.common.message.MessageExt;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderTransactionMQListener_SSTest extends OrderTransactionMQListener_SSTest_scaffolding {
// allCoveredLines:[33, 54, 55, 56, 57, 58, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 152, 155, 156, 157, 158, 159, 160, 161, 171, 172, 176, 177, 178, 179]

  @Test(timeout = 9000)
  public void test_onMessage_0()  throws Throwable  {
      //caseID:8baede5ace5ebdd5a0a757d37b3a7a2d
      //CoveredLines: [33, 54, 55, 56, 57, 58]
      //Input_0_MessageExt: {getBody=byteArray0}
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      byte[] byteArray0 = new byte[0];
      //mock messageExt0
      MessageExt messageExt0 = mock(MessageExt.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(messageExt0).getBody();
      
      //Call method: onMessage
      // Undeclared exception!
      try { 
        orderTransactionMQListener0.onMessage(messageExt0);
      } catch(Throwable e) {
         verifyException("com.nbcb.mq.OrderTransactionMQListener", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_1()  throws Throwable  {
      //caseID:31092e17d8525b4f0549bd9d42b8ab8b
      //CoveredLines: [33, 176, 177, 178, 179]
      //Input_0_com.nbcb.entity.Result: {getCode=Level.ERROR_INTEGER}
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      Integer integer0 = Level.ERROR_INTEGER;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(result0).getCode();
      
      //Call method: sendMessage
      PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "sendMessage", (Object) result0, (Class<?>) Result.class);
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_2()  throws Throwable  {
      //caseID:082f4c90d27aa13190c09104a37c2ff6
      //CoveredLines: [33, 82, 84, 85, 89, 90, 91, 92, 93, 94]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_3()  throws Throwable  {
      //caseID:34fb1167c4a4e098a7c85d087528d3e8
      //CoveredLines: [33, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getOrderId=2797L, getUserId=2797L}
      //Assert: assertEquals("{\"orderId\":2797,\"message\":\"\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF\",\"status\":false}", method_result.getMessage());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      Long long0 = new Long(2797L);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"orderId\":2797,\"message\":\"\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF\",\"status\":false}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_4()  throws Throwable  {
      //caseID:b65724df64fb0cadbcbc3099ca0f9f8d
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.ZERO, getOrderId=1750L 1750L, getUserId=1750L}
      //Assert: assertEquals("{\"orderId\":1750,\"message\":\"\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF\",\"status\":false}", method_result.getMessage());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      Long long0 = new Long(1750L);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"orderId\":1750,\"message\":\"\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF\",\"status\":false}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_5()  throws Throwable  {
      //caseID:bfb30fdc6f262ec9827b8a4e810f4e7c
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=1 1, getOrderId=1 1 1, getUserId=1 1 1}
      //Assert: assertEquals(2, (int)method_result.getCode());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn(1).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      assertEquals(2, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_6()  throws Throwable  {
      //caseID:9de1da46d82abf0aa899d0cb61e10d60
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 104, 107, 122, 123, 124, 125, 126, 127, 128, 129]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=2 2, getOrderId=0L 0L 0L 0L, getUserId=0L 0L 0L 0L}
      //Assert: assertEquals("{\"orderId\":0,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":false}", method_result.getMessage());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn((-1)).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)(-1), 0L).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn((-1)).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"orderId\":0,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":false}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_7()  throws Throwable  {
      //caseID:c183ddb842614f620890d4a6abcd5366
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 104, 107, 108, 117, 118, 122, 152, 155, 156, 157, 158, 159, 160, 161, 171, 172]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.ONE BigDecimal.ONE BigDecimal.ONE, getMoneyLogType=1, getOrderId=1 1, getUserId=1 1 1}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(1);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal1, bigDecimal1, bigDecimal1).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_8()  throws Throwable  {
      //caseID:681da5e67e75641bc3cda6eecad3596a
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 104, 107, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=2 2, getOrderId=30010 30010 30010 30010, getUserId=30010 30010 30010 30010}
      //Assert: assertEquals(30004, (int)method_result.getCode());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn(30010).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)30010, (long)30010).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn(30010).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(30010);
      Integer integer0 = new Integer(2);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      assertEquals(30004, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_9()  throws Throwable  {
      //caseID:ae04bc9baeb763f6f1e4df11201be77f
      //CoveredLines: [33, 82, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 104, 107, 122, 123, 132, 133, 134, 135, 136, 137, 138, 147, 148, 152, 155, 156, 157, 158, 159, 160, 161, 171, 172]
      //Input_0_com.nbcb.pojo.ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=2 2, getOrderId=0L 0L 0L 0L, getUserId=0L 0L 0L 0L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderTransactionMQListener orderTransactionMQListener0 = new OrderTransactionMQListener();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn(30010).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)30010, 0L).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn(30010).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListener.class, orderTransactionMQListener0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(2);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderTransactionMQListener>) OrderTransactionMQListener.class, orderTransactionMQListener0, "updateMoneyPaid", (Object) shopUserMoneyLog0, (Class<?>) ShopUserMoneyLog.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }
}
