/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopGoodsMapper;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrderGoodsLog;
import com.nbcb.service.impl.GoodsServiceImpl;
import java.util.List;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class GoodsServiceImpl_SSTest extends GoodsServiceImpl_SSTest_scaffolding {
// allCoveredLines:[31, 46, 47, 49, 54, 60, 61, 62, 63, 64, 65, 69, 71, 72, 74, 75, 78, 79, 80, 82]

  @Test(timeout = 9000)
  public void test_findAll_0()  throws Throwable  {
      //caseID:9a8b6c454e87f53ec368a0f6b1d1cf98
      //CoveredLines: [31, 54]
      //Assert: assertNull(method_result);
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      //mock shopGoodsMapper0
      ShopGoodsMapper shopGoodsMapper0 = mock(ShopGoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) GoodsServiceImpl.class, goodsServiceImpl0, "shopGoodsMapper", (Object) shopGoodsMapper0);
      
      //Call method: findAll
      List<ShopGoods> list0 = goodsServiceImpl0.findAll();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 9000)
  public void test_findOne_1()  throws Throwable  {
      //caseID:509187aea1a6d576ff8623d70d1affe8
      //CoveredLines: [31, 46, 49]
      //Input_0_Long: 1L
      //Assert: assertNull(method_result);
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      //mock shopGoodsMapper0
      ShopGoodsMapper shopGoodsMapper0 = mock(ShopGoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) GoodsServiceImpl.class, goodsServiceImpl0, "shopGoodsMapper", (Object) shopGoodsMapper0);
      Long long0 = new Long(1L);
      
      //Call method: findOne
      ShopGoods shopGoods0 = goodsServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopGoods0);
  }

  @Test(timeout = 9000)
  public void test_findOne_2()  throws Throwable  {
      //caseID:cc75ef8574bf2084acfc7d700dec64ec
      //CoveredLines: [31, 46, 47, 60, 61, 62, 63, 64, 65]
      //Input_0_Long: null
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      Long long0 = new Long((-24L));
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopOrderGoodsLog0).getGoodsNumber();
      doReturn(long0).when(shopOrderGoodsLog0).getGoodsId();
      doReturn(long0).when(shopOrderGoodsLog0).getOrderId();
      
      goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      
      //Call method: findOne
      // Undeclared exception!
      try { 
        goodsServiceImpl0.findOne((Long) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_3()  throws Throwable  {
      //caseID:680090ed1a047cba8c84aa46c31888a5
      //CoveredLines: [31, 60, 61, 62, 63, 64, 69, 71, 74, 75, 78, 79, 80, 82]
      //Input_0_ShopOrderGoodsLog: {getGoodsNumber=JLayeredPane.MODAL_LAYER JLayeredPane.MODAL_LAYER JLayeredPane.MODAL_LAYER JLayeredPane.MODAL_LAYER, getOrderId=0L, getGoodsId=0L 0L 0L}
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(shopGoods0).getGoodsNumber();
      //mock shopGoodsMapper0
      ShopGoodsMapper shopGoodsMapper0 = mock(ShopGoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(shopGoodsMapper0).selectByPrimaryKey(anyLong());
      RedisTemplate<Object, Object> redisTemplate0 = new RedisTemplate<Object, Object>();
      
      PrivateAccess.setVariable((Class<?>) GoodsServiceImpl.class, goodsServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) GoodsServiceImpl.class, goodsServiceImpl0, "shopGoodsMapper", (Object) shopGoodsMapper0);
      Long long0 = new Long(0L);
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0, integer0).when(shopOrderGoodsLog0).getGoodsNumber();
      doReturn(long0, long0, long0).when(shopOrderGoodsLog0).getGoodsId();
      doReturn(long0).when(shopOrderGoodsLog0).getOrderId();
      
      //Call method: reduceGoodsNum
      // Undeclared exception!
      try { 
        goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      } catch(Throwable e) {
         verifyException("org.springframework.data.redis.core.AbstractOperations", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_4()  throws Throwable  {
      //caseID:df144636662db4fe7bcf8391813c9c1b
      //CoveredLines: [31, 60, 65]
      //Input_0_ShopOrderGoodsLog: null
      //Assert: assertFalse(method_result.getSuccess());
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      
      //Call method: reduceGoodsNum
      Result result0 = goodsServiceImpl0.reduceGoodsNum((ShopOrderGoodsLog) null);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_5()  throws Throwable  {
      //caseID:105c8f34eb0793848f6e77e9bee9d22f
      //CoveredLines: [31, 60, 61, 65]
      //Input_0_ShopOrderGoodsLog: {}
      //Assert: assertEquals("\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF", method_result.getMessage());
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNum
      Result result0 = goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertEquals("\u8BF7\u6C42\u53C2\u6570\u6709\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_6()  throws Throwable  {
      //caseID:f4fef34e1f3c66a78de0c4c6de7995cc
      //CoveredLines: [31, 60, 61, 62, 65]
      //Input_0_ShopOrderGoodsLog: {getOrderId=1296L}
      //Assert: assertEquals((-1), (int)method_result.getCode());
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      Long long0 = new Long(1296L);
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrderGoodsLog0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result0 = goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertEquals((-1), (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_7()  throws Throwable  {
      //caseID:343f22d6a6ccc29c48185ffd477370f1
      //CoveredLines: [31, 60, 61, 62, 63, 65]
      //Input_0_ShopOrderGoodsLog: {getGoodsNumber=(Integer) null, getOrderId=0L, getGoodsId=0L}
      //Assert: assertEquals((-1), (int)method_result.getCode());
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      Long long0 = new Long(0L);
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Integer) null).when(shopOrderGoodsLog0).getGoodsNumber();
      doReturn(long0).when(shopOrderGoodsLog0).getGoodsId();
      doReturn(long0).when(shopOrderGoodsLog0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result0 = goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertEquals((-1), (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_8()  throws Throwable  {
      //caseID:e5dfb7f18301278f868863278fde4888
      //CoveredLines: [31, 60, 61, 62, 63, 64, 69, 71, 72]
      //Input_0_ShopOrderGoodsLog: {getGoodsNumber=JLayeredPane.POPUP_LAYER JLayeredPane.POPUP_LAYER JLayeredPane.POPUP_LAYER JLayeredPane.DEFAULT_LAYER, getOrderId=752L, getGoodsId=752L 752L 752L}
      //Assert: assertEquals(20003, (int)method_result.getCode());
      
      GoodsServiceImpl goodsServiceImpl0 = new GoodsServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0, integer0).when(shopGoods0).getGoodsNumber();
      //mock shopGoodsMapper0
      ShopGoodsMapper shopGoodsMapper0 = mock(ShopGoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(shopGoodsMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) GoodsServiceImpl.class, goodsServiceImpl0, "shopGoodsMapper", (Object) shopGoodsMapper0);
      Long long0 = new Long(752L);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      //mock shopOrderGoodsLog0
      ShopOrderGoodsLog shopOrderGoodsLog0 = mock(ShopOrderGoodsLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer1, integer1, integer1, integer0).when(shopOrderGoodsLog0).getGoodsNumber();
      doReturn(long0, long0, long0).when(shopOrderGoodsLog0).getGoodsId();
      doReturn(long0).when(shopOrderGoodsLog0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result0 = goodsServiceImpl0.reduceGoodsNum(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertEquals(20003, (int)result0.getCode());
  }
}
