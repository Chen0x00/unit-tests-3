/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.listener;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.listener.OrderTransactionMQListenerImpl;
import com.nbcb.mapper.ShopOrderMapper;
import org.apache.rocketmq.client.producer.LocalTransactionState;
import org.apache.rocketmq.common.message.Message;
import org.apache.rocketmq.common.message.MessageExt;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderTransactionMQListenerImpl_SSTest extends OrderTransactionMQListenerImpl_SSTest_scaffolding {
// allCoveredLines:[21, 33, 34, 35, 37, 38, 39, 40, 47, 48, 49, 52, 59, 60]

  @Test(timeout = 9000)
  public void test_checkLocalTransaction_0()  throws Throwable  {
      //caseID:8a62d24d7137f2938eec8b0b89b832bf
      //CoveredLines: [21, 59, 60]
      //Input_0_MessageExt: {}
      //Assert: assertEquals(LocalTransactionState.COMMIT_MESSAGE, method_result);
      
      OrderTransactionMQListenerImpl orderTransactionMQListenerImpl0 = new OrderTransactionMQListenerImpl();
      //mock messageExt0
      MessageExt messageExt0 = mock(MessageExt.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: checkLocalTransaction
      LocalTransactionState localTransactionState0 = orderTransactionMQListenerImpl0.checkLocalTransaction(messageExt0);
      
      //Test Result Assert
      assertEquals(LocalTransactionState.COMMIT_MESSAGE, localTransactionState0);
  }

  @Test(timeout = 9000)
  public void test_executeLocalTransaction_1()  throws Throwable  {
      //caseID:aa42623a8015242e80b6f295dbac1bc4
      //CoveredLines: [21, 33, 34, 52]
      //Input_0_Message: {}
      //Input_1_Object: reactor.core.publisher.FluxUsing$UsingFuseableSubscriber
      //Assert: assertEquals(LocalTransactionState.UNKNOW, method_result);
      
      OrderTransactionMQListenerImpl orderTransactionMQListenerImpl0 = new OrderTransactionMQListenerImpl();
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListenerImpl.class, orderTransactionMQListenerImpl0, "orderConfirmTag", (Object) "reactor.core.publisher.FluxUsing$UsingFuseableSubscriber");
      //mock message0
      Message message0 = mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: executeLocalTransaction
      LocalTransactionState localTransactionState0 = orderTransactionMQListenerImpl0.executeLocalTransaction(message0, "reactor.core.publisher.FluxUsing$UsingFuseableSubscriber");
      
      //Test Result Assert
      assertEquals(LocalTransactionState.UNKNOW, localTransactionState0);
  }

  @Test(timeout = 9000)
  public void test_executeLocalTransaction_2()  throws Throwable  {
      //caseID:c3c1b6bdeabf7cc15879b5b2796b73de
      //CoveredLines: [21, 33, 34, 35, 37, 38, 39, 40, 47, 48, 49]
      //Input_0_Message: {getBody=byteArray0, getTags=\"resourceSupplier\"}
      //Input_1_Object: {getBody=byteArray0, getTags=\"resourceSupplier\"}
      //Assert: assertEquals(LocalTransactionState.ROLLBACK_MESSAGE, method_result);
      
      OrderTransactionMQListenerImpl orderTransactionMQListenerImpl0 = new OrderTransactionMQListenerImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListenerImpl.class, orderTransactionMQListenerImpl0, "orderConfirmTag", (Object) "resourceSupplier");
      
      PrivateAccess.setVariable((Class<?>) OrderTransactionMQListenerImpl.class, orderTransactionMQListenerImpl0, "orderMapper", (Object) shopOrderMapper0);
      byte[] byteArray0 = new byte[0];
      //mock message0
      Message message0 = mock(Message.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(message0).getBody();
      doReturn("resourceSupplier").when(message0).getTags();
      
      //Call method: executeLocalTransaction
      LocalTransactionState localTransactionState0 = orderTransactionMQListenerImpl0.executeLocalTransaction(message0, message0);
      
      //Test Result Assert
      assertEquals(LocalTransactionState.ROLLBACK_MESSAGE, localTransactionState0);
  }
}
