/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.api.ICouponService;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IUserService;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopMsgProviderMapper;
import com.nbcb.mapper.ShopOrderMapper;
import com.nbcb.pojo.ShopCoupon;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import com.nbcb.pojo.ShopUser;
import com.nbcb.service.impl.OrderServiceImpl;
import com.nbcb.utils.IDWorker;
import java.math.BigDecimal;
import javax.swing.JLayeredPane;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.client.producer.SendStatus;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderServiceImpl_SSTest extends OrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[50, 76, 95, 104, 106, 182, 184, 185, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 229, 230, 231, 239, 240, 241, 242, 243, 244, 246, 247, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 276, 287, 289, 290, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 311, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 408, 409, 415, 416, 419, 420, 421, 424, 425, 426, 429, 430, 433, 434, 436, 437, 447, 449, 450, 452, 453, 454, 457, 458, 459, 460, 463, 464, 466, 468, 472, 473, 475, 477, 521, 522, 524, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545, 564, 569, 570, 572, 579, 580]

  @Test(timeout = 9000)
  public void test_cancelOrder_00()  throws Throwable  {
      //caseID:f4aa39e7078316be5fc0df726e4d48c1
      //CoveredLines: [50, 76, 182, 184, 188]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_01()  throws Throwable  {
      //caseID:36ba555840b52092d6cafdc44536d010
      //CoveredLines: [50, 76, 182, 184, 185, 188]
      //Input_0_ShopOrder: {getOrderId=1265L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(1265L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_02()  throws Throwable  {
      //caseID:757accdbab67b030b6ef955e38aadf92
      //CoveredLines: [50, 76, 182, 184, 185, 186, 188]
      //Input_0_ShopOrder: {getOrderId=0L, getUserId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_03()  throws Throwable  {
      //caseID:68634a3c85f93d232d67a365f57a850e
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 188]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.FRAME_CONTENT_LAYER, getOrderId=2580L, getUserId=2580L, getGoodsId=2580L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(2580L);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_04()  throws Throwable  {
      //caseID:43c80bfdf1fc614c094d3d7384d85678
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.ERROR_INTEGER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = Level.ERROR_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer1).when(shopOrder0).getShippingStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:4acabbaa1cb8700e20a0ae6a9c4d2dbb
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.WARN_INTEGER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer0).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:c64016cc3c58909e92fdbb06254fce57
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.PALETTE_LAYER, getOrderId=0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertNull(method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder0);
      
      //Test Result Assert
      assertNull(result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_07()  throws Throwable  {
      //caseID:28562b701bd6ff3bf5e37d6abbf81d32
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 210, 211, 212, 214, 217]
      //Input_0_ShopOrder: {getGoodsNumber=70004, getOrderId=4059L 4059L, getUserId=4059L, getGoodsId=4059L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = new Integer((-1522));
      Long long0 = new Long(4059L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer1 = new Integer(70004);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer1).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0, (Long) null).when(shopOrder0).getOrderId();
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      doReturn((Long) null).when(shopOrder0).getUserId();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_08()  throws Throwable  {
      //caseID:e501a76b0a1127285a900076ca499d01
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 213, 214, 217, 229, 230, 231]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.PALETTE_LAYER, getOrderId=(-15L) (-15L), getUserId=(-15L), getGoodsId=(-15L)}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Long long0 = new Long((-15L));
      BigDecimal bigDecimal0 = new BigDecimal((-15L));
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0, long0, long0).when(shopOrder0).getOrderId();
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(bigDecimal0).when(shopOrder0).getPayAmount();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      doReturn(long0).when(shopOrder0).getUserId();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_checkPath_09()  throws Throwable  {
      //caseID:2ff3186ef6b17f57e42cebfacf25505a
      //CoveredLines: [50, 76, 569, 572]
      //Input_0_long: 2790
      //Input_1_long: 0
      //Input_2_String: 1.0
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      RedisTemplate<String, Object> redisTemplate0 = new RedisTemplate<String, Object>();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: checkPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.checkPath(2790L, 0L, "1.0");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_checkPath_10()  throws Throwable  {
      //caseID:ba15c3de5ed2d3bb9cb425e4680dd8d1
      //CoveredLines: [50, 76, 569, 570]
      //Input_0_long: 870
      //Input_1_long: 283
      //Input_2_String: 
      //Assert: assertFalse(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: checkPath
      boolean boolean0 = orderServiceImpl0.checkPath(870L, 283L, "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_11()  throws Throwable  {
      //caseID:374da00cb297384f74d37669eb8e8b98
      //CoveredLines: [50, 76, 104, 415, 416]
      //Input_0_ShopOrder: null
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder((ShopOrder) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_12()  throws Throwable  {
      //caseID:3faacb4384cc8531045b593a568396e5
      //CoveredLines: [50, 76, 104, 415, 419, 420, 421]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_13()  throws Throwable  {
      //caseID:4dfef984ddd62f6533371c2b84635bf8
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 430]
      //Input_0_ShopOrder: {getGoodsPrice=BigDecimal.TEN, getUserId=1L, getGoodsId=1L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = new BigDecimal(20004);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(1L);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(bigDecimal1).when(shopOrder0).getGoodsPrice();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_14()  throws Throwable  {
      //caseID:4497d45b6f69571f27cbbaf6ccaab673
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 433, 434]
      //Input_0_ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getGoodsPrice=BigDecimal.TEN, getUserId=0L, getGoodsId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPath_15()  throws Throwable  {
      //caseID:e9ff67a1acbb8ad36da79bf1eb7306f9
      //CoveredLines: [50, 76, 579, 580]
      //Input_0_long: -1
      //Input_1_long: -1
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: createPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.createPath((-1L), (-1L));
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.OrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_16()  throws Throwable  {
      //caseID:e40c120ee634d3d5be69fced5252c588
      //CoveredLines: [50, 76, 95]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      
      //Call method: findOne
      ShopOrder shopOrder0 = orderServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopOrder0);
  }

  @Test(timeout = 9000)
  public void test_getResult_17()  throws Throwable  {
      //caseID:a20448ea5dc30e9ae32bcd55c4b9530a
      //CoveredLines: [50, 76, 564]
      //Input_0_long: 1487
      //Input_1_long: 0
      //Assert: assertEquals(1L, method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: getResult
      long long0 = orderServiceImpl0.getResult(1487L, 0L);
      
      //Test Result Assert
      assertEquals(1L, long0);
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_18()  throws Throwable  {
      //caseID:f156e5562c0f85ef786804a8ce6b1a2b
      //CoveredLines: [50, 76, 287, 311]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceCouponStatus
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_19()  throws Throwable  {
      //caseID:7897073027b86d5b1ab648882c7f7239
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=1595L 1595L, getOrderId=1595L 1595L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      doReturn("order:").when(result0).toString();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(1595L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_20()  throws Throwable  {
      //caseID:f75308e7cae730a7c8cd170e8169281c
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 306, 307, 308]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=462L 462L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(462L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      
      //Call method: reduceCouponStatus
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_21()  throws Throwable  {
      //caseID:5ecb6797a6c3c7477c5c8b0673b408c1
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 301, 302, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=462L 462L, getOrderId=462L}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(462L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_22()  throws Throwable  {
      //caseID:9150a5626bf90f6f856ed2d81ff9c54d
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 333, 334]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=JLayeredPane.FRAME_CONTENT_LAYER, getOrderId=3733L, getGoodsId=3733L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(3733L);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_23()  throws Throwable  {
      //caseID:e8acbd4a5e35cd72d53766b9b5a67ed7
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 329, 330, 331]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=JLayeredPane.DRAG_LAYER, getOrderId=0L, getGoodsId=0L}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_24()  throws Throwable  {
      //caseID:109589077aac950292f422cef02bf0ff
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 335, 336, 337]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNum
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_25()  throws Throwable  {
      //caseID:bf0f754e1742f33841056e57599ebda4
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 376, 392, 393, 394]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_26()  throws Throwable  {
      //caseID:ce9e1e3d45aff4c56e81e8e6fc5d4c81
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 387, 389, 391, 408, 409]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=JLayeredPane.DRAG_LAYER, getOrderId=1396 1396 1396 1396, getGoodsId=1396}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1396).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1396).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.FLUSH_SLAVE_TIMEOUT;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("\u8BA2\u5355\u670D\u52A1,\u6D88\u606F\u53D1\u9001\u6210\u529F").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Long long0 = new Long(1396);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0, long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_27()  throws Throwable  {
      //caseID:4769ee95c3cab4a9aaf690995707c8bd
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 391, 408, 409]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=JLayeredPane.DRAG_LAYER, getOrderId=1396 1396 1396 1396, getGoodsId=1396}
      //Assert: assertEquals("\u6B63\u786E", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1396).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1396).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.SEND_OK;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("\u8BA2\u5355\u670D\u52A1,\u6D88\u53D1\u9001\u6210\u529F").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Long long0 = new Long(1396);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0, long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u6B63\u786E", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_28()  throws Throwable  {
      //caseID:f54116b46040cc403fd4f5d95fd86485
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {getMoneyPaid=BigDecimal.ZERO BigDecimal.ZERO}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_29()  throws Throwable  {
      //caseID:c1fc1f66e01faa69c0bd376dffd059fa
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_30()  throws Throwable  {
      //caseID:e017e2ad55d241c3630c42882d0e6d6d
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266]
      //Input_0_com.nbcb.pojo.ShopOrder: {getOrderId=2018L 2018L, getUserId=2018L, getMoneyPaid=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      doReturn("29994").when(result0).toString();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2018L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: reduceMoneyPaid
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_31()  throws Throwable  {
      //caseID:965cc85bcbf8d64e63ce0de4d02c4b37
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 268, 269]
      //Input_0_com.nbcb.pojo.ShopOrder: {getOrderId=2018L 2018L, getUserId=2018L, getMoneyPaid=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      doReturn("29994").when(result0).toString();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2018L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: reduceMoneyPaid
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_32()  throws Throwable  {
      //caseID:13acdc3c6961e5ce40502e556e4954a8
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272]
      //Input_0_com.nbcb.pojo.ShopOrder: {getMoneyPaid=BigDecimal.TEN}
      //Assert: assertEquals(0, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(0, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_33()  throws Throwable  {
      //caseID:e94c876b5ebd910ea9f5ab90986034c2
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 460, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=Level.ALL_INTEGER, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(149L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = Level.ALL_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_34()  throws Throwable  {
      //caseID:09ec45c1e42527c0a1bea69516f78ac1
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 426, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545]
      //Input_0_long: 0
      //Input_1_long: 296
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long((-1221L));
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(anyLong());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(0L, 296L);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_35()  throws Throwable  {
      //caseID:77a40ed4a30d897ed848e4a5b6ed77d3
      //CoveredLines: [50, 76, 104, 106, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 454, 521, 524, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545]
      //Input_0_long: -12
      //Input_1_long: 2608
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long((-10L));
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopGoods1
      ShopGoods shopGoods1 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods1).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods1).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0, shopGoods1).when(iGoodsService0).findOne(anyLong());
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(anyLong());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-10L)).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill((-12L), 2608L);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_36()  throws Throwable  {
      //caseID:f3d08b0150edbed4345d76c9f405a760
      //CoveredLines: [50, 76, 104, 106, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 477, 521, 522, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545]
      //Input_0_long: 0
      //Input_1_long: 0
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(3437);
      Long long0 = new Long((-1L));
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal1, bigDecimal0, bigDecimal1).when(shopGoods0).getGoodsPrice();
      Integer integer0 = Level.TRACE_INTEGER;
      //mock shopGoods1
      ShopGoods shopGoods1 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods1).getGoodsNumber();
      doReturn(bigDecimal1).when(shopGoods1).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0, shopGoods1).when(iGoodsService0).findOne(anyLong());
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUser1
      ShopUser shopUser1 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser1).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0, shopUser1).when(iUserService0).findOne(anyLong());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1936L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(0L, 0L);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_updateOrderStatus_37()  throws Throwable  {
      //caseID:cdb6b0f6025a4e2ff17c634310c51a8b
      //CoveredLines: [50, 76, 239, 240, 241, 242, 243, 244]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateOrderStatus
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "updateOrderStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_updateOrderStatus_38()  throws Throwable  {
      //caseID:16a4935edcad64c5f7de29c69bfdfa56
      //CoveredLines: [50, 76, 239, 240, 241, 242, 243, 246, 247]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(659).when(shopOrderMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopOrder.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateOrderStatus
      PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "updateOrderStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
  }
}
