/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.api.ICouponService;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IUserService;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopMsgProviderMapper;
import com.nbcb.mapper.ShopOrderMapper;
import com.nbcb.pojo.ShopCoupon;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import com.nbcb.pojo.ShopUser;
import com.nbcb.service.impl.OrderServiceImpl;
import com.nbcb.utils.IDWorker;
import java.math.BigDecimal;
import javax.swing.JLayeredPane;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.client.producer.SendStatus;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderServiceImpl_SSTest extends OrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[50, 76, 95, 104, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 129, 130, 131, 132, 133, 134, 141, 144, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 169, 170, 173, 175, 176, 182, 184, 185, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 229, 230, 231, 239, 240, 241, 242, 243, 244, 246, 247, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 276, 287, 289, 290, 291, 292, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 311, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 408, 409, 415, 419, 420, 421, 424, 425, 426, 429, 430, 433, 434, 436, 437, 447, 449, 450, 452, 453, 454, 457, 458, 459, 460, 463, 464, 466, 468, 472, 473, 475, 477, 480, 482, 485, 486, 487, 489, 490, 500, 503, 504, 506, 508, 509, 511, 521, 522, 524, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545, 547, 564, 569, 570, 572, 579, 580]

  @Test(timeout = 9000)
  public void test_cancelOrder_00()  throws Throwable  {
      //caseID:3d3862911d4a281e8725dad9468225e8
      //CoveredLines: [50, 76, 182, 184, 188]
      //Input_0_ShopOrder: null
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder((ShopOrder) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_01()  throws Throwable  {
      //caseID:c1bbc2227d82ab6051fc914547e97e0c
      //CoveredLines: [50, 76, 182, 184, 188]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_02()  throws Throwable  {
      //caseID:a6511fa009b637a12b786fa1cd75670d
      //CoveredLines: [50, 76, 182, 184, 185, 188]
      //Input_0_ShopOrder: {getOrderId=(-1L)}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long((-1L));
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_03()  throws Throwable  {
      //caseID:4acc067909eb8792acfe21f9675901ec
      //CoveredLines: [50, 76, 182, 184, 185, 186, 188]
      //Input_0_ShopOrder: {getOrderId=590L, getUserId=590L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(590L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_04()  throws Throwable  {
      //caseID:3137b28e6300cd1bae3b6b905a0eced4
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 188]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.DEFAULT_LAYER, getOrderId=590L, getUserId=590L, getGoodsId=590L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(590L);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:2e9f12d25c888b080a5495ca1328df3d
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.POPUP_LAYER, getOrderId=1522L 1522L, getUserId=1522L, getGoodsId=1522L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer1).when(shopOrder0).getShippingStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(1522L);
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer2).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:4ac5e51b08641f0362bdfa62e159b95a
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.DEBUG_INTEGER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.DEBUG_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer0).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_07()  throws Throwable  {
      //caseID:d91198e5b65c7dcd6dab72b10414a6c8
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.DEBUG_INTEGER, getOrderId=590L 590L, getUserId=590L, getGoodsId=590L}
      //Assert: assertNull(method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((ShopOrder) null).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(590L);
      Integer integer0 = Level.DEBUG_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder0);
      
      //Test Result Assert
      assertNull(result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_08()  throws Throwable  {
      //caseID:09137b7d9de6aaa87ad27a0e28c0edc3
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 210, 211, 212, 214, 217]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.POPUP_LAYER, getOrderId=1522L 1522L, getUserId=1522L, getGoodsId=1522L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(1522L);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_09()  throws Throwable  {
      //caseID:29fa591a5cc5b9fd0b58345377a99a1c
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 213, 214, 217, 229, 230, 231]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.POPUP_LAYER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn((Long) null).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn((Long) null, long0, (Long) null).when(shopOrder0).getOrderId();
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(bigDecimal0).when(shopOrder0).getPayAmount();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      doReturn((Long) null).when(shopOrder0).getUserId();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_checkPath_10()  throws Throwable  {
      //caseID:60e8e47e083a1850375e63caeb1941d9
      //CoveredLines: [50, 76, 569, 572]
      //Input_0_long: 0
      //Input_1_long: 0
      //Input_2_String: 1
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      RedisTemplate<String, String> redisTemplate0 = new RedisTemplate<String, String>();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: checkPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.checkPath(0L, 0L, "1");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_checkPath_11()  throws Throwable  {
      //caseID:0c38eb3d17ddb3ec2cfe8fba7c5cf39e
      //CoveredLines: [50, 76, 569, 570]
      //Input_0_long: 0
      //Input_1_long: 371
      //Input_2_String: 
      //Assert: assertFalse(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: checkPath
      boolean boolean0 = orderServiceImpl0.checkPath(0L, 371L, "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_12()  throws Throwable  {
      //caseID:77ec6efe40ab3528fd0a4c19179a8475
      //CoveredLines: [50, 76, 104, 415, 419, 420, 421]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_13()  throws Throwable  {
      //caseID:ac827cf7b292e525c006b35105552f8f
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 430]
      //Input_0_ShopOrder: {getGoodsPrice=BigDecimal.ONE, getUserId=0L, getGoodsId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(bigDecimal1).when(shopOrder0).getGoodsPrice();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_14()  throws Throwable  {
      //caseID:821fb19acdcc61acdae9c24bf7a805d8
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 433, 434]
      //Input_0_ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getGoodsPrice=BigDecimal.ZERO, getUserId=1403L, getGoodsId=1403L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(1403L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_15()  throws Throwable  {
      //caseID:955392d58c603911a9895ce5186105c2
      //CoveredLines: [50, 76, 104, 106, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 454, 521, 524]
      //Input_0_ShopOrder: {getShippingFee=BigDecimal.ZERO, getGoodsNumber=Level.DEBUG_INTEGER, getOrderAmount=BigDecimal.ZERO, getGoodsPrice=BigDecimal.ZERO, getUserId=1L, getGoodsId=1L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(1L);
      Integer integer1 = Level.DEBUG_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer1).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPath_16()  throws Throwable  {
      //caseID:abc9a214a2d3698881e84873f912958e
      //CoveredLines: [50, 76, 579, 580]
      //Input_0_long: 4876
      //Input_1_long: 4876
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: createPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.createPath(4876L, 4876L);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.OrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_17()  throws Throwable  {
      //caseID:098eb41966d480a1dacaeb8234539dd4
      //CoveredLines: [50, 76, 95]
      //Input_0_Long: 0L
      //Assert: assertNull(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      
      //Call method: findOne
      ShopOrder shopOrder0 = orderServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopOrder0);
  }

  @Test(timeout = 9000)
  public void test_getResult_18()  throws Throwable  {
      //caseID:0ac135c149071346a04eb5bc1456f137
      //CoveredLines: [50, 76, 564]
      //Input_0_long: -1
      //Input_1_long: 0
      //Assert: assertEquals(1L, method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: getResult
      long long0 = orderServiceImpl0.getResult((-1L), 0L);
      
      //Test Result Assert
      assertEquals(1L, long0);
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_19()  throws Throwable  {
      //caseID:3b5fd7ef65bfdc9e08512a6ab53728a0
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 306, 307, 308]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=0L 0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.OFF_INTEGER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      
      //Call method: reduceCouponStatus
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_20()  throws Throwable  {
      //caseID:3562e3c2d2908a5481c3332bd4a0bd56
      //CoveredLines: [50, 76, 287, 289, 290, 291, 292, 294, 295, 296, 299, 300, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=17L 17L, getOrderId=17L 17L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = new Integer(1);
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      doReturn("An{\"e]5").when(result0).toString();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      Long long0 = new Long(17L);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_21()  throws Throwable  {
      //caseID:f536aeeae60fe3588761a2cc68c3adee
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 301, 302, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=0L 0L, getOrderId=0L}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.OFF_INTEGER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_22()  throws Throwable  {
      //caseID:b5274aa124ef546e30aa6df2d15198d0
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 333, 334]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getOrderId=2115L, getGoodsId=2115L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(2115L);
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_23()  throws Throwable  {
      //caseID:d9554ac1877d80673c17cebfee7896d3
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 329, 330, 331]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.TRACE_INTEGER, getOrderId=2984L, getGoodsId=2984L}
      //Assert: assertNull(method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(2984L);
      Integer integer0 = Level.TRACE_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertNull(result1.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_24()  throws Throwable  {
      //caseID:d04b4a58b45532e011769fe8bc811262
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 335, 336, 337]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNum
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_25()  throws Throwable  {
      //caseID:3956ba02c3ae6d2f147af10429638f8d
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 376, 392, 393, 394]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_26()  throws Throwable  {
      //caseID:872d8c23d44f45371308f7fbd049307c
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 391, 408, 409]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.DEBUG_INTEGER, getOrderId=108 108 108 108 108, getGoodsId=108}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(108).when(shopMsgProviderMapper0).deleteByPrimaryKey(any(com.nbcb.pojo.ShopMsgProviderKey.class));
      doReturn(108).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)108).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.SEND_OK;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("5000").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Long long0 = new Long(108);
      Integer integer0 = Level.DEBUG_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0, long0, long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_27()  throws Throwable  {
      //caseID:c272faacf8290ba72a9721fbcd866b98
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {getMoneyPaid=BigDecimal.ZERO BigDecimal.ZERO}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_28()  throws Throwable  {
      //caseID:d5632b81ffa98cd68c5607169b707692
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_29()  throws Throwable  {
      //caseID:f136a27231ab8f4599dd8076d635ba1d
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 460, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=Level.WARN_INTEGER, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(146L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_30()  throws Throwable  {
      //caseID:72bac55975828dd48bfddd7bf7c6f77b
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 477, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getUserId=(Long) null, getMoneyPaid=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(621L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal1).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal1).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal1, bigDecimal1).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal1).when(shopOrder0).getShippingFee();
      doReturn((Long) null).when(shopOrder0).getUserId();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_31()  throws Throwable  {
      //caseID:d381695cf68c3c4599300aa85bd172db
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 482, 485, 486, 487, 489, 490, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=1, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getMoneyPaid=(BigDecimal) null}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((ShopCoupon) null).when(iCouponService0).findOne(anyLong());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(621L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn((BigDecimal) null).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_32()  throws Throwable  {
      //caseID:7b2213038c940fed44edcacaab71ab50
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 480, 485, 486, 487, 489, 490, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=940L, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getUserId=(Long) null, getMoneyPaid=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((ShopCoupon) null).when(iCouponService0).findOne(anyLong());
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(621L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Integer integer0 = new Integer(1);
      Long long0 = new Long(940L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn((Long) null).when(shopOrder0).getUserId();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_33()  throws Throwable  {
      //caseID:ac8ad9ee0cf800216c1f7d1590c033dc
      //CoveredLines: [50, 76, 104, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 129, 130, 131, 132, 133, 134, 163, 164, 169, 170, 173, 175, 176, 229, 230, 231, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 287, 311, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 480, 485, 486, 500, 503, 504, 506, 508, 509, 511, 521, 522, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545, 547]
      //Input_0_long: 0
      //Input_1_long: 1380
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = new BigDecimal(317L);
      Long long0 = new Long(317L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      Integer integer0 = new Integer(106);
      //mock shopGoods1
      ShopGoods shopGoods1 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods1).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods1).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0, shopGoods1).when(iGoodsService0).findOne(anyLong());
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUser1
      ShopUser shopUser1 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser1).getUserMoney();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(result0).getCode();
      doReturn("' does not correspond to an object in a mutable scope").when(result0).getMessage();
      doReturn(boolean0).when(result0).getSuccess();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0, shopUser1).when(iUserService0).findOne(anyLong());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(shopOrderMapper0).insert(any(com.nbcb.pojo.ShopOrder.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)106).when(iDWorker0).nextId();
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(0L, 1380L);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.OrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_34()  throws Throwable  {
      //caseID:4f9c07931a095a3ead35eee2b6f98a78
      //CoveredLines: [50, 76, 104, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 129, 130, 141, 144, 154, 155, 156, 157, 158, 159, 161, 162, 239, 240, 241, 242, 243, 246, 247, 256, 257, 258, 259, 260, 261, 263, 264, 268, 269, 287, 311, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 387, 389, 391, 408, 409, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 480, 485, 486, 500, 503, 504, 506, 508, 509, 511, 521, 522, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545, 547]
      //Input_0_long: 0
      //Input_1_long: 1380
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = new BigDecimal(1399L);
      Long long0 = new Long(1399L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopGoods1
      ShopGoods shopGoods1 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods1).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods1).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0, shopGoods1).when(iGoodsService0).findOne(anyLong());
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUser1
      ShopUser shopUser1 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser1).getUserMoney();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0, boolean0).when(result0).getSuccess();
      doReturn("1.0").when(result0).toString();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0, shopUser1).when(iUserService0).findOne(anyLong());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(shopOrderMapper0).insert(any(com.nbcb.pojo.ShopOrder.class));
      doReturn(1).when(shopOrderMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopOrder.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1, (long)1).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.FLUSH_DISK_TIMEOUT;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("99").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(0L, 1380L);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.OrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_secKill_35()  throws Throwable  {
      //caseID:290a72a9b4fee0e1644efa83037be5e0
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 426, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545]
      //Input_0_long: 3094
      //Input_1_long: 791
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2006L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(anyLong());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(3094L, 791L);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_updateOrderStatus_36()  throws Throwable  {
      //caseID:0aedf0fdfec3cd271c24514a110b1a78
      //CoveredLines: [50, 76, 239, 240, 241, 242, 243, 244]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateOrderStatus
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "updateOrderStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }
}
