/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.api.ICouponService;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IUserService;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopMsgProviderMapper;
import com.nbcb.mapper.ShopOrderMapper;
import com.nbcb.pojo.ShopCoupon;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import com.nbcb.pojo.ShopUser;
import com.nbcb.service.impl.OrderServiceImpl;
import com.nbcb.utils.IDWorker;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.swing.JLayeredPane;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.client.producer.SendStatus;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderServiceImpl_SSTest extends OrderServiceImpl_SSTest_scaffolding {
// allCoveredLines:[50, 76, 95, 104, 106, 182, 184, 185, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 229, 230, 231, 239, 240, 241, 242, 243, 244, 246, 247, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 276, 287, 289, 290, 291, 292, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 311, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 408, 409, 415, 419, 420, 421, 424, 425, 426, 429, 430, 433, 434, 436, 437, 447, 449, 450, 452, 453, 454, 457, 458, 459, 460, 463, 464, 466, 468, 469, 472, 473, 475, 477, 480, 482, 485, 486, 487, 489, 490, 493, 497, 498, 500, 503, 504, 506, 508, 509, 511, 521, 522, 524, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545, 564, 569, 570, 572, 579, 580]

  @Test(timeout = 9000)
  public void test_cancelOrder_00()  throws Throwable  {
      //caseID:583f0bd116390b89578d909453800cca
      //CoveredLines: [50, 76, 182, 184, 188]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_01()  throws Throwable  {
      //caseID:1c73d8b3729c6a49ac2e948eb4abdc1e
      //CoveredLines: [50, 76, 182, 184, 185, 188]
      //Input_0_ShopOrder: {getOrderId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_02()  throws Throwable  {
      //caseID:dc738f0d6da2286bbb54e1dde06848a2
      //CoveredLines: [50, 76, 182, 184, 185, 186, 188]
      //Input_0_ShopOrder: {getOrderId=0L, getUserId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_03()  throws Throwable  {
      //caseID:5d34189f03727f918bb3a44a59811a7d
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 188]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.FRAME_CONTENT_LAYER, getOrderId=0L, getUserId=0L, getGoodsId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Long long0 = new Long(0L);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.cancelOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_04()  throws Throwable  {
      //caseID:c315cea97c0e241b4e4096e13c843011
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = Level.ERROR_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer1).when(shopOrder0).getShippingStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      Integer integer2 = Level.INFO_INTEGER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer2).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_05()  throws Throwable  {
      //caseID:7fc79288c1e450cce6b3c2d4a6f633a9
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.TRACE_INTEGER, getOrderId=504L 504L, getUserId=504L, getGoodsId=504L}
      //Assert: assertNull(method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = Level.TRACE_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(504L);
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer0).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertNull(result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_06()  throws Throwable  {
      //caseID:4b3011ee3947b0dee33c2e545b2e21dd
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 215, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.OFF_INTEGER, getOrderId=819L 819L, getUserId=819L, getGoodsId=819L}
      //Assert: assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((ShopOrder) null).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(819L);
      Integer integer0 = Level.OFF_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder0);
      
      //Test Result Assert
      assertEquals("\u8BA2\u5355\u53D6\u6D88\u5931\u8D25", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_07()  throws Throwable  {
      //caseID:910d4dba159139883a7166d58f208ba7
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 210, 211, 212, 214, 217]
      //Input_0_ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getOrderId=0L 0L, getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long(0L);
      Integer integer1 = Level.INFO_INTEGER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_cancelOrder_08()  throws Throwable  {
      //caseID:f996e7bcc033e89d15509e62fd5c29ff
      //CoveredLines: [50, 76, 182, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 213, 214, 217, 229, 230, 231]
      //Input_0_ShopOrder: {getGoodsNumber=JLayeredPane.MODAL_LAYER, getOrderId=2315L 2315L, getUserId=2315L, getGoodsId=2315L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Long long0 = new Long(2315L);
      BigDecimal bigDecimal0 = new BigDecimal(70004);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn((Long) null, long0, (Long) null).when(shopOrder0).getOrderId();
      doReturn(integer0).when(shopOrder0).getOrderStatus();
      doReturn(bigDecimal0).when(shopOrder0).getPayAmount();
      doReturn(integer0).when(shopOrder0).getShippingStatus();
      doReturn((Long) null).when(shopOrder0).getUserId();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopOrder0).when(shopOrderMapper0).selectByPrimaryKey(anyLong());
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      //mock shopOrder1
      ShopOrder shopOrder1 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder1).getGoodsId();
      doReturn(integer1).when(shopOrder1).getGoodsNumber();
      doReturn(long0, long0).when(shopOrder1).getOrderId();
      doReturn(long0).when(shopOrder1).getUserId();
      
      //Call method: cancelOrder
      Result result0 = orderServiceImpl0.cancelOrder(shopOrder1);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_checkPath_09()  throws Throwable  {
      //caseID:3593f0b8f0ca6e4452ab6aa9f20f9cee
      //CoveredLines: [50, 76, 569, 572]
      //Input_0_long: 0
      //Input_1_long: 0
      //Input_2_String: 1
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      RedisTemplate<String, String> redisTemplate0 = new RedisTemplate<String, String>();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      
      //Call method: checkPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.checkPath(0L, 0L, "1");
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_checkPath_10()  throws Throwable  {
      //caseID:4a0be5e9dd7fdd3820915b71713fcf89
      //CoveredLines: [50, 76, 569, 570]
      //Input_0_long: 269
      //Input_1_long: 1168
      //Input_2_String: 
      //Assert: assertFalse(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: checkPath
      boolean boolean0 = orderServiceImpl0.checkPath(269L, 1168L, "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_11()  throws Throwable  {
      //caseID:bf49ff6292b90c2276e2d2a65ca4f727
      //CoveredLines: [50, 76, 104, 415, 419, 420, 421]
      //Input_0_ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_12()  throws Throwable  {
      //caseID:fb1adb8e6eab8b3cf6d7ed191b5bcaab
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 430]
      //Input_0_ShopOrder: {getGoodsPrice=595L, getUserId=180L, getGoodsId=180L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(180L);
      BigDecimal bigDecimal1 = new BigDecimal(595L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(bigDecimal1).when(shopOrder0).getGoodsPrice();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_13()  throws Throwable  {
      //caseID:74f148dacbca1a0d8cf7962388d5c790
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 429, 433, 434]
      //Input_0_ShopOrder: {getShippingFee=BigDecimal.ONE, getGoodsNumber=Level.ERROR_INTEGER, getOrderAmount=BigDecimal.ONE, getGoodsPrice=BigDecimal.ONE, getUserId=0L, getGoodsId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Integer integer0 = Level.ERROR_INTEGER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_confirmOrder_14()  throws Throwable  {
      //caseID:2c3a23370d08e794ee414f0cc9330c0a
      //CoveredLines: [50, 76, 104, 106, 415, 419, 420, 424, 425, 429, 433, 436, 437, 447, 449, 450, 452, 453, 454, 521, 524]
      //Input_0_ShopOrder: {getShippingFee=0, getGoodsNumber=JLayeredPane.FRAME_CONTENT_LAYER, getOrderAmount=0, getGoodsPrice=0, getUserId=0L, getGoodsId=0L}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Integer integer0 = Level.ERROR_INTEGER;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(887L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer1).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      // Undeclared exception!
      try { 
        orderServiceImpl0.confirmOrder(shopOrder0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPath_15()  throws Throwable  {
      //caseID:91f15155ab431771a956cde6647a48de
      //CoveredLines: [50, 76, 579, 580]
      //Input_0_long: 0
      //Input_1_long: 1
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: createPath
      // Undeclared exception!
      try { 
        orderServiceImpl0.createPath(0L, 1L);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.OrderServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_16()  throws Throwable  {
      //caseID:e8fbf5e5af4578126c67f41e26f75573
      //CoveredLines: [50, 76, 95]
      //Input_0_Long: (-1L)
      //Assert: assertNull(method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      Long long0 = new Long((-1L));
      
      //Call method: findOne
      ShopOrder shopOrder0 = orderServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopOrder0);
  }

  @Test(timeout = 9000)
  public void test_getResult_17()  throws Throwable  {
      //caseID:0d9d0e123e6f07715a6979d82c2b5491
      //CoveredLines: [50, 76, 564]
      //Input_0_long: 0
      //Input_1_long: 2967
      //Assert: assertEquals(1L, method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      
      //Call method: getResult
      long long0 = orderServiceImpl0.getResult(0L, 2967L);
      
      //Test Result Assert
      assertEquals(1L, long0);
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_18()  throws Throwable  {
      //caseID:2fb23b64697fe60dbce76bfa922355da
      //CoveredLines: [50, 76, 287, 311]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceCouponStatus
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_19()  throws Throwable  {
      //caseID:5e1550130be5c91526c42918efaf7b81
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 306, 307, 308]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=2028L 2028L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(2028L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      
      //Call method: reduceCouponStatus
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_20()  throws Throwable  {
      //caseID:ee2e7380e44e2fa2b1f4866e363ff073
      //CoveredLines: [50, 76, 287, 289, 290, 291, 292, 294, 295, 296, 299, 300, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=3596L 3596L, getOrderId=3596L 3596L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = new Integer(1);
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      doReturn("10").when(result0).toString();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(3596L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceCouponStatus_21()  throws Throwable  {
      //caseID:05dc3b89b3c81420e59341a44d6a2289
      //CoveredLines: [50, 76, 287, 289, 290, 294, 295, 296, 299, 300, 301, 302, 304, 305]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=2028L 2028L, getOrderId=2028L}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      doReturn(result0).when(iCouponService0).updateCouponStatus(any(com.nbcb.pojo.ShopCoupon.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      Long long0 = new Long(2028L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopOrder0).getCouponId();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceCouponStatus
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceCouponStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_22()  throws Throwable  {
      //caseID:93d65df362ef07ad4f3665f9f8f53e63
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 333, 334]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.ERROR_INTEGER, getOrderId=0L, getGoodsId=0L}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(0L);
      Integer integer0 = Level.ERROR_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_23()  throws Throwable  {
      //caseID:cb54a50aa281e55a3e40f2110fc625ff
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 329, 330, 331]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=1, getOrderId=837L, getGoodsId=837L}
      //Assert: assertNull(method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iGoodsService0).reduceGoodsNum(any(com.nbcb.pojo.ShopOrderGoodsLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      Long long0 = new Long(837L);
      Integer integer0 = new Integer(1);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNum
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertNull(result1.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNum_24()  throws Throwable  {
      //caseID:e4ece8e9f8a308852d7c0ee3746c9dd9
      //CoveredLines: [50, 76, 322, 323, 324, 325, 327, 328, 335, 336, 337]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals(0, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNum
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNum", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(0, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_25()  throws Throwable  {
      //caseID:41306b48d8a676150c61ee9c4112d8e5
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 373, 374, 376, 392, 393, 394]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals(0, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(0, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_26()  throws Throwable  {
      //caseID:7df79f20651f98bfe69e1743177c6a04
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 387, 389, 391, 408, 409]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getOrderId=2657 2657 2657 2657, getGoodsId=2657}
      //Assert: assertEquals("\u6B63\u786E", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2657).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)2657).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.FLUSH_DISK_TIMEOUT;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("SHOW COLLATION").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Long long0 = new Long(2657);
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0, long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u6B63\u786E", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceGoodsNumByMQ_27()  throws Throwable  {
      //caseID:19cdbfc83acbd25c9052b9a7ffc355c2
      //CoveredLines: [50, 76, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 369, 372, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 391, 408, 409]
      //Input_0_com.nbcb.pojo.ShopOrder: {getGoodsNumber=Level.INFO_INTEGER, getOrderId=2404L 2404L 2404L 2404L, getGoodsId=2404L}
      //Assert: assertEquals(1, (int)method_result.getCode());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(iDWorker0).nextId();
      SendStatus sendStatus0 = SendStatus.SEND_OK;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("SHOW COLLATION").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      Long long0 = new Long(2404L);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "producer", (Object) defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(long0, long0, long0, long0).when(shopOrder0).getOrderId();
      
      //Call method: reduceGoodsNumByMQ
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceGoodsNumByMQ", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(1, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_28()  throws Throwable  {
      //caseID:8893f40243886c3d6e07b24dc66ee7e9
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {getMoneyPaid=BigDecimal.ZERO}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_29()  throws Throwable  {
      //caseID:d9c20a1249553519e9d528276dda72ef
      //CoveredLines: [50, 76, 256, 276]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      //Assert: assertEquals("\u6B63\u786E", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u6B63\u786E", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_30()  throws Throwable  {
      //caseID:04dd5c01832401de0b30fe0100131759
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266]
      //Input_0_com.nbcb.pojo.ShopOrder: {getOrderId=1061L, getUserId=1061L, getMoneyPaid=BigDecimal.ONE BigDecimal.ONE BigDecimal.ONE}
      //Assert: assertFalse(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.FALSE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(1061L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: reduceMoneyPaid
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_31()  throws Throwable  {
      //caseID:355b674decbeb5644175be18dec71ba4
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 268, 269]
      //Input_0_com.nbcb.pojo.ShopOrder: {getOrderId=1L, getUserId=1L, getMoneyPaid=BigDecimal.ONE BigDecimal.ONE BigDecimal.ONE}
      //Assert: assertTrue(method_result.getSuccess());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Boolean boolean0 = Boolean.TRUE;
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(result0).getSuccess();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iUserService0).updateMoneyPaid(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(1L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(long0).when(shopOrder0).getOrderId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: reduceMoneyPaid
      Result result1 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertTrue(result1.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_reduceMoneyPaid_32()  throws Throwable  {
      //caseID:5f198c9d7dc90df23be08f05446af17c
      //CoveredLines: [50, 76, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272]
      //Input_0_com.nbcb.pojo.ShopOrder: {getMoneyPaid=BigDecimal.TEN}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      
      //Call method: reduceMoneyPaid
      Result result0 = (Result)PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "reduceMoneyPaid", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_33()  throws Throwable  {
      //caseID:0de2b7dcd15bb28008790d5503dc5a1f
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 454, 521, 522]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=8361, getOrderAmount=8361}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      BigDecimal bigDecimal0 = new BigDecimal(8361);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_34()  throws Throwable  {
      //caseID:691bfeb26160c6085f10d3ddc1dc5409
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 460, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=JLayeredPane.FRAME_CONTENT_LAYER, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_35()  throws Throwable  {
      //caseID:f320f04e016b2dfbd70803348c730b40
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 469, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getMoneyPaid=(-453.0)}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      BigDecimal bigDecimal1 = new BigDecimal((-453.0));
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal1).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_36()  throws Throwable  {
      //caseID:18be44bd8ab4ba9a9b7954ac64d993e7
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 477, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getUserId=(Long) null, getMoneyPaid=BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(979L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal1).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal1).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal1, bigDecimal1).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal1).when(shopOrder0).getShippingFee();
      doReturn((Long) null).when(shopOrder0).getUserId();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_37()  throws Throwable  {
      //caseID:96955805fe2a687bad4a3bd553527bb0
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 482, 485, 486, 487, 489, 490, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=0L, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getMoneyPaid=(BigDecimal) null BigDecimal.TEN}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(979L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn((BigDecimal) null, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_38()  throws Throwable  {
      //caseID:d90acc61b10b8e588e8aa646051245a9
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 480, 485, 486, 500, 503, 504, 506, 508, 509, 511, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=(Long) null, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getCouponPaid=BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getMoneyPaid=BigDecimal.ZERO BigDecimal.TEN}
      //Assert: assertEquals(0L, method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(10).when(shopOrderMapper0).insert(any(com.nbcb.pojo.ShopOrder.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(shopOrder0).getCouponId();
      doReturn(bigDecimal0).when(shopOrder0).getCouponPaid();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal1, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      
      //Call method: savePreOrder
      Object object0 = PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(0L, object0);
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_39()  throws Throwable  {
      //caseID:93a3e0308bb1ebba9a5fac7050300be6
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 480, 485, 486, 500, 503, 504, 506, 508, 509, 511, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=(Long) null, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getCouponPaid=BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getUserId=(Long) null, getMoneyPaid=BigDecimal.TEN BigDecimal.TEN}
      //Assert: assertEquals(979L, method_result);
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(20).when(shopOrderMapper0).insert(any(com.nbcb.pojo.ShopOrder.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(979L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      Integer integer0 = new Integer(1);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(shopOrder0).getCouponId();
      doReturn(bigDecimal0).when(shopOrder0).getCouponPaid();
      doReturn(integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn((Long) null).when(shopOrder0).getUserId();
      
      //Call method: savePreOrder
      Object object0 = PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertEquals(979L, object0);
  }

  @Test(timeout = 9000)
  public void test_savePreOrder_40()  throws Throwable  {
      //caseID:3f6d4379cadfad36e2ad582e2c4aa27b
      //CoveredLines: [50, 76, 447, 449, 450, 452, 453, 457, 458, 459, 463, 464, 466, 468, 472, 473, 475, 480, 485, 486, 487, 489, 493, 497, 498, 503, 504, 506, 508, 509, 511, 521, 524]
      //Input_0_com.nbcb.pojo.ShopOrder: {getCouponId=474L, getShippingFee=BigDecimal.TEN, getGoodsNumber=1, getOrderAmount=BigDecimal.TEN BigDecimal.TEN bigInteger1, getCouponPaid=BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN, getUserId=474L, getMoneyPaid=BigDecimal.TEN bigInteger1}
      //Assert: assertFalse(method_result.equals((Object)long0));
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      byte[] byteArray0 = new byte[4];
      //mock bigInteger0
      BigInteger bigInteger0 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(bigInteger0).toByteArray();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      //mock shopCoupon0
      ShopCoupon shopCoupon0 = mock(ShopCoupon.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopCoupon0).getCouponPrice();
      doReturn(integer0).when(shopCoupon0).getIsUsed();
      //mock iCouponService0
      ICouponService iCouponService0 = mock(ICouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopCoupon0).when(iCouponService0).findOne(anyLong());
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)118;
      //mock bigInteger1
      BigInteger bigInteger1 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray1).when(bigInteger1).toByteArray();
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal1).when(shopUser0).getUserMoney();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOne(nullable(java.lang.Long.class));
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(shopOrderMapper0).insert(any(com.nbcb.pojo.ShopOrder.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(iDWorker0).nextId();
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "couponService", (Object) iCouponService0);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      Integer integer1 = new Integer(1);
      Long long0 = new Long(474L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(bigDecimal2).when(shopOrder0).getCouponPaid();
      doReturn(integer1).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal2).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal2, bigDecimal1).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal2, bigDecimal2, bigDecimal1).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal2).when(shopOrder0).getShippingFee();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: savePreOrder
      Object object0 = PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "savePreOrder", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      
      //Test Result Assert
      assertFalse(object0.equals((Object)long0));
  }

  @Test(timeout = 9000)
  public void test_secKill_41()  throws Throwable  {
      //caseID:468db2508c55bbd4bb7b354dba323f06
      //CoveredLines: [50, 76, 104, 415, 419, 420, 424, 425, 426, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 545]
      //Input_0_long: 2143
      //Input_1_long: 1
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(0L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(bigDecimal0, bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(anyLong());
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "userService", (Object) iUserService0);
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "goodsService", (Object) iGoodsService0);
      
      //Call method: secKill
      // Undeclared exception!
      try { 
        orderServiceImpl0.secKill(2143L, 1L);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_updateOrderStatus_42()  throws Throwable  {
      //caseID:f0d539cc0bc2f52db74a6a4cbd26a367
      //CoveredLines: [50, 76, 239, 240, 241, 242, 243, 244]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateOrderStatus
      try { 
        PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "updateOrderStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_updateOrderStatus_43()  throws Throwable  {
      //caseID:12fddf5d692a3b52f37d8c19482af151
      //CoveredLines: [50, 76, 239, 240, 241, 242, 243, 246, 247]
      //Input_0_com.nbcb.pojo.ShopOrder: {}
      
      OrderServiceImpl orderServiceImpl0 = new OrderServiceImpl();
      //mock shopOrderMapper0
      ShopOrderMapper shopOrderMapper0 = mock(ShopOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(502).when(shopOrderMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopOrder.class));
      
      PrivateAccess.setVariable((Class<?>) OrderServiceImpl.class, orderServiceImpl0, "orderMapper", (Object) shopOrderMapper0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateOrderStatus
      PrivateAccess.callMethod((Class<OrderServiceImpl>) OrderServiceImpl.class, orderServiceImpl0, "updateOrderStatus", (Object) shopOrder0, (Class<?>) ShopOrder.class);
  }
}
