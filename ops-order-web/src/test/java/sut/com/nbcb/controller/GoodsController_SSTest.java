/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.api.IGoodsService;
import com.nbcb.controller.GoodsController;
import com.nbcb.entity.GoodsDetailResponse;
import com.nbcb.entity.GoodsResponse;
import com.nbcb.pojo.ShopGoods;
import java.math.BigDecimal;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class GoodsController_SSTest extends GoodsController_SSTest_scaffolding {
// allCoveredLines:[17, 28, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 45, 50, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66]

  @Test(timeout = 9000)
  public void test_getGoods_0()  throws Throwable  {
      //caseID:7f57a62381c7b0204494f7e7a8e50551
      //CoveredLines: [17, 28, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 45]
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      //Assert: assertEquals("1", method_result.getCode());
      
      GoodsController goodsController0 = new GoodsController();
      LinkedList<ShopGoods> linkedList0 = new LinkedList<ShopGoods>();
      Long long0 = new Long(3370L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      
      linkedList0.add(shopGoods0);
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(iGoodsService0).findAll();
      
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: getGoods
      GoodsResponse goodsResponse0 = goodsController0.getGoods();
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", goodsResponse0.getMsg());
      
      //Test Result Assert
      assertEquals("1", goodsResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_getOneGoods_1()  throws Throwable  {
      //caseID:18f6594fb6eaea746dc4631d2e532c81
      //CoveredLines: [17, 50, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66]
      //Input_0_Long: 0L
      //Assert: assertEquals("1", method_result.getCode());
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      
      GoodsController goodsController0 = new GoodsController();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(1);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopGoods0).getGoodsId();
      doReturn("com.nbcb.controller.GoodsController").when(shopGoods0).getGoodsName();
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(anyLong());
      
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: getOneGoods
      GoodsDetailResponse goodsDetailResponse0 = goodsController0.getOneGoods(long0);
      
      //Test Result Assert
      assertEquals("1", goodsDetailResponse0.getCode());
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", goodsDetailResponse0.getMsg());
  }
}
