/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IOrderService;
import com.nbcb.controller.OrderController;
import com.nbcb.entity.OrderPreResponse;
import com.nbcb.entity.OrderQueryResponse;
import com.nbcb.entity.OrderResponse;
import com.nbcb.entity.Result;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderController_SSTest extends OrderController_SSTest_scaffolding {
// allCoveredLines:[19, 33, 34, 35, 37, 38, 39, 40, 41, 42, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 97, 99, 101, 103, 104, 105, 107]

  @Test(timeout = 9000)
  public void test_confirmOrder_0()  throws Throwable  {
      //caseID:9ebefe79768e83cbe8c62687a4451231
      //CoveredLines: [19, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89]
      //Input_0_ShopOrder: {getCouponId=0, getShippingFee=BigDecimal.TEN BigDecimal.TEN, getGoodsAmount=BigDecimal.TEN BigDecimal.TEN, getGoodsNumber=0 0, getAddress=\"{\\\"sourceCode\\\":\\\"0\\\",\\\"payAmount\\\":-1.0,\\\"orderId\\\":1,\\\"message\\\":\\\"0\\\",\\\"status\\\":true}\", getOrderAmount=BigDecimal.TEN, getGoodsPrice=BigDecimal.TEN BigDecimal.TEN, getUserId=0, getGoodsId=0 0, getMoneyPaid=BigDecimal.TEN}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      //Assert: assertEquals("1", method_result.getCode());
      
      OrderController orderController0 = new OrderController();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopGoods0).getGoodsPrice();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopGoods0).when(iGoodsService0).findOne(nullable(java.lang.Long.class));
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{\"sourceCode\":\"0\",\"payAmount\":-1.0,\"orderId\":1,\"message\":\"0\",\"status\":true}").when(result0).getMessage();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iOrderService0).confirmOrder(any(com.nbcb.pojo.ShopOrder.class));
      
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "orderService", (Object) iOrderService0);
      
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "goodService", (Object) iGoodsService0);
      Long long0 = new Long(0);
      Integer integer0 = new Integer(0);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{\"sourceCode\":\"0\",\"payAmount\":-1.0,\"orderId\":1,\"message\":\"0\",\"status\":true}").when(shopOrder0).getAddress();
      doReturn(long0).when(shopOrder0).getCouponId();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getGoodsAmount();
      doReturn(long0, long0).when(shopOrder0).getGoodsId();
      doReturn(integer0, integer0).when(shopOrder0).getGoodsNumber();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getGoodsPrice();
      doReturn(bigDecimal0).when(shopOrder0).getMoneyPaid();
      doReturn(bigDecimal0).when(shopOrder0).getOrderAmount();
      doReturn(bigDecimal0, bigDecimal0).when(shopOrder0).getShippingFee();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: confirmOrder
      OrderResponse orderResponse0 = orderController0.confirmOrder(shopOrder0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", orderResponse0.getMsg());
      
      //Test Result Assert
      assertEquals("1", orderResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_confirmOrderPre_1()  throws Throwable  {
      //caseID:e0b8b54cbff10d0053b0092be0006fd6
      //CoveredLines: [19, 33, 34, 35, 37, 38, 39, 40, 41, 42]
      //Input_0_Long: 840L
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      //Assert: assertEquals("1", method_result.getCode());
      
      OrderController orderController0 = new OrderController();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "goodService", (Object) iGoodsService0);
      Long long0 = new Long(840L);
      
      //Call method: confirmOrderPre
      OrderPreResponse orderPreResponse0 = orderController0.confirmOrderPre(long0);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", orderPreResponse0.getMsg());
      
      //Test Result Assert
      assertEquals("1", orderPreResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_getOrder_2()  throws Throwable  {
      //caseID:33c22ddd130a1f6ec985e4b11e5f7fd6
      //CoveredLines: [19, 97, 99, 101, 103, 104, 105, 107]
      //Input_0_Long: 0L
      //Assert: assertEquals("1", method_result.getCode());
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      
      OrderController orderController0 = new OrderController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long(0L);
      
      //Call method: getOrder
      OrderQueryResponse orderQueryResponse0 = orderController0.getOrder(long0);
      
      //Test Result Assert
      assertEquals("1", orderQueryResponse0.getCode());
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", orderQueryResponse0.getMsg());
  }
}
