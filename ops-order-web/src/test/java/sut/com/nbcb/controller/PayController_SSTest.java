/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.api.IPayService;
import com.nbcb.controller.PayController;
import com.nbcb.entity.PayResponse;
import com.nbcb.entity.Result;
import com.nbcb.pojo.ShopPay;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayController_SSTest extends PayController_SSTest_scaffolding {
// allCoveredLines:[13, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 69, 76]

  @Test(timeout = 9000)
  public void test_callbackPay_0()  throws Throwable  {
      //caseID:4da82d49ca4786e2a2258d884e87f665
      //CoveredLines: [13, 76]
      //Input_0_com.nbcb.pojo.ShopPay: {}
      //Assert: assertNull(method_result);
      
      PayController payController0 = new PayController();
      //mock iPayService0
      IPayService iPayService0 = mock(IPayService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayController.class, payController0, "payService", (Object) iPayService0);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: callbackPay
      Object object0 = PrivateAccess.callMethod((Class<PayController>) PayController.class, payController0, "callbackPay", (Object) shopPay0, (Class<?>) ShopPay.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_1()  throws Throwable  {
      //caseID:6b145f5b814a2efc2e1f8e8835abec14
      //CoveredLines: [13, 69]
      //Input_0_com.nbcb.pojo.ShopPay: {}
      //Assert: assertNull(method_result);
      
      PayController payController0 = new PayController();
      //mock iPayService0
      IPayService iPayService0 = mock(IPayService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayController.class, payController0, "payService", (Object) iPayService0);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: callbackPayment
      Object object0 = PrivateAccess.callMethod((Class<PayController>) PayController.class, payController0, "callbackPayment", (Object) shopPay0, (Class<?>) ShopPay.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 9000)
  public void test_createPay_2()  throws Throwable  {
      //caseID:d6505c7aa6ea6833ed5b459660fd6d22
      //CoveredLines: [13, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
      //Input_0_com.nbcb.pojo.ShopPay: {getPayId=0L, getOrderId=0L, getPayAmount=BigDecimal.TEN}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      //Assert: assertEquals("1", method_result.getCode());
      
      PayController payController0 = new PayController();
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("{\"orderId\":0,\"payId\":1,\"message\":\"1\",\"status\":false}").when(result0).getMessage();
      //mock iPayService0
      IPayService iPayService0 = mock(IPayService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iPayService0).createPayment(any(com.nbcb.pojo.ShopPay.class));
      
      PrivateAccess.setVariable((Class<?>) PayController.class, payController0, "payService", (Object) iPayService0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay0).getOrderId();
      doReturn(bigDecimal0).when(shopPay0).getPayAmount();
      doReturn(long0).when(shopPay0).getPayId();
      
      //Call method: createPay
      PayResponse payResponse0 = (PayResponse)PrivateAccess.callMethod((Class<PayController>) PayController.class, payController0, "createPay", (Object) shopPay0, (Class<?>) ShopPay.class);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", payResponse0.getMsg());
      
      //Test Result Assert
      assertEquals("1", payResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_finishPay_3()  throws Throwable  {
      //caseID:f61a23b454e1ab85a53668e254131e84
      //CoveredLines: [13, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61]
      //Input_0_com.nbcb.pojo.ShopPay: {getPayId=674L}
      //Assert: assertEquals("\u64CD\u4F5C\u6210\u529F", method_result.getMsg());
      //Assert: assertEquals("1", method_result.getCode());
      
      PayController payController0 = new PayController();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long0 = new Long(674L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay0).getOrderId();
      doReturn(bigDecimal0).when(shopPay0).getPayAmount();
      doReturn(long0).when(shopPay0).getPayId();
      //mock result0
      Result result0 = mock(Result.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iPayService0
      IPayService iPayService0 = mock(IPayService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(result0).when(iPayService0).callbackPayment(any(com.nbcb.pojo.ShopPay.class));
      doReturn(shopPay0).when(iPayService0).findOne(anyLong());
      
      PrivateAccess.setVariable((Class<?>) PayController.class, payController0, "payService", (Object) iPayService0);
      //mock shopPay1
      ShopPay shopPay1 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay1).getPayId();
      
      //Call method: finishPay
      PayResponse payResponse0 = (PayResponse)PrivateAccess.callMethod((Class<PayController>) PayController.class, payController0, "finishPay", (Object) shopPay1, (Class<?>) ShopPay.class);
      
      //Test Result Assert
      assertEquals("\u64CD\u4F5C\u6210\u529F", payResponse0.getMsg());
      
      //Test Result Assert
      assertEquals("1", payResponse0.getCode());
  }
}
