/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IOrderService;
import com.nbcb.controller.SeckillController;
import com.nbcb.entity.Result;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import java.util.LinkedList;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class SeckillController_SSTest extends SeckillController_SSTest_scaffolding {
// allCoveredLines:[35, 62, 69, 71, 72, 75, 76, 90, 91, 102, 103, 104, 106, 109, 110, 111, 115, 116, 154, 155, 157, 158, 160, 161, 162]

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_0()  throws Throwable  {
      //caseID:538339adf6aaf35dc61a6810d3d4e5e5
      //CoveredLines: [35, 62, 69, 71, 75, 76]
      
      SeckillController seckillController0 = new SeckillController();
      LinkedList<ShopGoods> linkedList0 = new LinkedList<ShopGoods>();
      Integer integer0 = Level.OFF_INTEGER;
      Long long0 = new Long(2964L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      
      linkedList0.add(shopGoods0);
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(iGoodsService0).findAll();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      try { 
        seckillController0.afterPropertiesSet();
      } catch(Throwable e) {
         verifyException("com.nbcb.controller.SeckillController", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_1()  throws Throwable  {
      //caseID:b53ce5a4c492caeaf127e1edc152b5e5
      //CoveredLines: [35, 62, 69, 71, 72]
      
      SeckillController seckillController0 = new SeckillController();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      seckillController0.afterPropertiesSet();
  }

  @Test(timeout = 9000)
  public void test_doSeckill_2()  throws Throwable  {
      //caseID:7e146fdfb3000fe84193088be65787f5
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 111]
      //Input_0_String: ctCf8PMm;+)~*RF`E
      //Input_1_ShopOrder: {getUserId=3169L, getGoodsId=3169L}
      //Assert: assertFalse(method_result.getSuccess());
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Integer, String> redisTemplate0 = new RedisTemplate<Integer, String>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long(3169L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      Result result0 = seckillController0.doSeckill("ctCf8PMm;+)~*RF`E", shopOrder0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_doSeckill_3()  throws Throwable  {
      //caseID:47f65909ae4a5d81b295c423ed0c133c
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 115, 116]
      //Input_0_String: ctCf8PMm;+)~*RF`E
      //Input_1_ShopOrder: {getUserId=3169L, getGoodsId=3169L}
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Integer, String> redisTemplate0 = new RedisTemplate<Integer, String>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long(3169L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      // Undeclared exception!
      try { 
        seckillController0.doSeckill("ctCf8PMm;+)~*RF`E", shopOrder0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_getPath_4()  throws Throwable  {
      //caseID:64e8df40cc3ac29a307a846af41e74d5
      //CoveredLines: [35, 62, 90, 91]
      //Input_0_long: 213
      //Input_1_long: 0
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      
      //Call method: getPath
      String string0 = seckillController0.getPath(213L, 0L);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_5()  throws Throwable  {
      //caseID:81ecce42013f52d62ca6ca01e45be426
      //CoveredLines: [35, 62, 154, 155]
      //Input_0_String: 
      //Input_1_String:  Y=cwm A>
      //Input_2_String: Jl*+
      //Input_3_String: UnsZ;1MbD4][L`uK(
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) " Y=cwm A>", (Class<?>) String.class, (Object) "Jl*+", (Class<?>) String.class, (Object) "UnsZ;1MbD4][L`uK(", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_6()  throws Throwable  {
      //caseID:8e2e86d428b238f902a5119deb3d7945
      //CoveredLines: [35, 62, 154, 157, 158]
      //Input_0_String: T1GHb2N_~,)<V_
      //Input_1_String: }.,43GW^
      //Input_2_String: Payment Required
      //Input_3_String: 
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "T1GHb2N_~,)<V_", (Class<?>) String.class, (Object) "}.,43GW^", (Class<?>) String.class, (Object) "Payment Required", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_7()  throws Throwable  {
      //caseID:49137ae06132c7083ab8ceffc22cb5ed
      //CoveredLines: [35, 62, 154, 157, 160, 161, 162]
      //Input_0_String: -4CnZ;zYPm
      //Input_1_String: reactor.core.publisher.MonoCount$CountSubscriber
      //Input_2_String: 
      //Input_3_String: 3>
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      //Call method: sendMessage
      Object object0 = PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "-4CnZ;zYPm", (Class<?>) String.class, (Object) "reactor.core.publisher.MonoCount$CountSubscriber", (Class<?>) String.class, (Object) "", (Class<?>) String.class, (Object) "3>", (Class<?>) String.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
