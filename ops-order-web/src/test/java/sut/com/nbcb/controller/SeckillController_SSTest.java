/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IOrderService;
import com.nbcb.controller.SeckillController;
import com.nbcb.entity.Result;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import java.util.LinkedList;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class SeckillController_SSTest extends SeckillController_SSTest_scaffolding {
// allCoveredLines:[35, 62, 69, 71, 72, 75, 76, 90, 91, 102, 103, 104, 106, 109, 110, 111, 115, 116, 154, 155, 157, 158, 160, 161, 162]

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_0()  throws Throwable  {
      //caseID:99324fe77ba67c5ded52010b064ab6a7
      //CoveredLines: [35, 62, 69, 71, 75, 76]
      
      SeckillController seckillController0 = new SeckillController();
      LinkedList<ShopGoods> linkedList0 = new LinkedList<ShopGoods>();
      Integer integer0 = Level.DEBUG_INTEGER;
      Long long0 = new Long(0L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      
      linkedList0.add(shopGoods0);
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(iGoodsService0).findAll();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      try { 
        seckillController0.afterPropertiesSet();
      } catch(Throwable e) {
         verifyException("com.nbcb.controller.SeckillController", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_1()  throws Throwable  {
      //caseID:4a12148add2ce30a500584d4a1b10c1a
      //CoveredLines: [35, 62, 69, 71, 72]
      
      SeckillController seckillController0 = new SeckillController();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      seckillController0.afterPropertiesSet();
  }

  @Test(timeout = 9000)
  public void test_doSeckill_2()  throws Throwable  {
      //caseID:17e7001893d4057efce55ab47767d3e8
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 111]
      //Input_0_String: 
      //Input_1_ShopOrder: {getUserId=0L, getGoodsId=0L}
      //Assert: assertEquals(70007, (int)method_result.getCode());
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Long, Long> redisTemplate0 = new RedisTemplate<Long, Long>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      Result result0 = seckillController0.doSeckill("", shopOrder0);
      
      //Test Result Assert
      assertEquals(70007, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_doSeckill_3()  throws Throwable  {
      //caseID:873c439de43624dfe57639c58ec5d118
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 115, 116]
      //Input_0_String: 
      //Input_1_ShopOrder: {getUserId=0L, getGoodsId=0L}
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Long, Long> redisTemplate0 = new RedisTemplate<Long, Long>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long(0L);
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      // Undeclared exception!
      try { 
        seckillController0.doSeckill("", shopOrder0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_getPath_4()  throws Throwable  {
      //caseID:746a1b5ca74adbd177e763a778db250a
      //CoveredLines: [35, 62, 90, 91]
      //Input_0_long: 20
      //Input_1_long: 0
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      
      //Call method: getPath
      String string0 = seckillController0.getPath(20L, 0L);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_5()  throws Throwable  {
      //caseID:c9e883f1ea759fc2b429d3a0f787d462
      //CoveredLines: [35, 62, 154, 155]
      //Input_0_String: 
      //Input_1_String: F
      //Input_2_String: Ls'>>
      //Input_3_String: 1.0
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) "F", (Class<?>) String.class, (Object) "Ls'>>", (Class<?>) String.class, (Object) "1.0", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_6()  throws Throwable  {
      //caseID:003cb1b12c0994b31dd4b1d890982575
      //CoveredLines: [35, 62, 154, 157, 158]
      //Input_0_String: secret
      //Input_1_String: order:
      //Input_2_String: \u79D2\u6740\u8BA2\u5355,\u6D88\u606F\u53D1\u9001\u6210\u529F
      //Input_3_String: 
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "secret", (Class<?>) String.class, (Object) "order:", (Class<?>) String.class, (Object) "\u79D2\u6740\u8BA2\u5355,\u6D88\u606F\u53D1\u9001\u6210\u529F", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_7()  throws Throwable  {
      //caseID:c9ebc1207650d37f252eae928754a2fe
      //CoveredLines: [35, 62, 154, 157, 160, 161, 162]
      //Input_0_String: Topic\u4E0D\u80FD\u4E3A\u7A7A
      //Input_1_String: 1
      //Input_2_String: (8}
      //Input_3_String: com.nbcb.controller.SeckillController
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      //Call method: sendMessage
      Object object0 = PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "Topic\u4E0D\u80FD\u4E3A\u7A7A", (Class<?>) String.class, (Object) "1", (Class<?>) String.class, (Object) "(8}", (Class<?>) String.class, (Object) "com.nbcb.controller.SeckillController", (Class<?>) String.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
