/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.api.IGoodsService;
import com.nbcb.api.IOrderService;
import com.nbcb.controller.SeckillController;
import com.nbcb.entity.Result;
import com.nbcb.pojo.ShopGoods;
import com.nbcb.pojo.ShopOrder;
import java.util.ArrayList;
import javax.swing.JLayeredPane;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class SeckillController_SSTest extends SeckillController_SSTest_scaffolding {
// allCoveredLines:[35, 62, 69, 71, 72, 75, 76, 90, 91, 102, 103, 104, 106, 109, 110, 111, 115, 116, 154, 155, 157, 158, 160, 161, 162]

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_0()  throws Throwable  {
      //caseID:8ac4cb069bf7d53edc7bc2b0761fafb3
      //CoveredLines: [35, 62, 69, 71, 75, 76]
      
      SeckillController seckillController0 = new SeckillController();
      ArrayList<ShopGoods> arrayList0 = new ArrayList<ShopGoods>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Long long0 = new Long(961L);
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopGoods0).getGoodsId();
      doReturn(integer0).when(shopGoods0).getGoodsNumber();
      
      arrayList0.add(shopGoods0);
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(iGoodsService0).findAll();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      try { 
        seckillController0.afterPropertiesSet();
      } catch(Throwable e) {
         verifyException("com.nbcb.controller.SeckillController", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_afterPropertiesSet_1()  throws Throwable  {
      //caseID:747288f2e398cfb841dcc04a11213fe6
      //CoveredLines: [35, 62, 69, 71, 72]
      
      SeckillController seckillController0 = new SeckillController();
      //mock iGoodsService0
      IGoodsService iGoodsService0 = mock(IGoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) iGoodsService0);
      
      //Call method: afterPropertiesSet
      seckillController0.afterPropertiesSet();
  }

  @Test(timeout = 9000)
  public void test_doSeckill_2()  throws Throwable  {
      //caseID:1a20fd3ca4b59c851a40f7905685f21f
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 111]
      //Input_0_String: :
      //Input_1_ShopOrder: {getUserId=(-22L), getGoodsId=(-22L)}
      //Assert: assertFalse(method_result.getSuccess());
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Integer, Boolean> redisTemplate0 = new RedisTemplate<Integer, Boolean>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long((-22L));
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      Result result0 = seckillController0.doSeckill(":", shopOrder0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_doSeckill_3()  throws Throwable  {
      //caseID:1e50012a54fa414abaf0536027104cf8
      //CoveredLines: [35, 62, 102, 103, 104, 106, 109, 110, 115, 116]
      //Input_0_String: 1
      //Input_1_ShopOrder: {getUserId=(-22L), getGoodsId=(-22L)}
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(iOrderService0).checkPath(anyLong() , anyLong() , anyString());
      RedisTemplate<Integer, Boolean> redisTemplate0 = new RedisTemplate<Integer, Boolean>();
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisTemplate", (Object) redisTemplate0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      Long long0 = new Long((-22L));
      //mock shopOrder0
      ShopOrder shopOrder0 = mock(ShopOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopOrder0).getGoodsId();
      doReturn(long0).when(shopOrder0).getUserId();
      
      //Call method: doSeckill
      // Undeclared exception!
      try { 
        seckillController0.doSeckill("1", shopOrder0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_getPath_4()  throws Throwable  {
      //caseID:50aec9ca7529d59d6dc24b95413c412c
      //CoveredLines: [35, 62, 90, 91]
      //Input_0_long: 0
      //Input_1_long: 2179
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      //mock iOrderService0
      IOrderService iOrderService0 = mock(IOrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) iOrderService0);
      
      //Call method: getPath
      String string0 = seckillController0.getPath(0L, 2179L);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_5()  throws Throwable  {
      //caseID:9780a5fd3477ff50fff05e9c54025fcd
      //CoveredLines: [35, 62, 154, 155]
      //Input_0_String: 
      //Input_1_String: seckillGoods:
      //Input_2_String: order:
      //Input_3_String: seckillGoods:
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) "seckillGoods:", (Class<?>) String.class, (Object) "order:", (Class<?>) String.class, (Object) "seckillGoods:", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_6()  throws Throwable  {
      //caseID:f8d25de1218ae71ac8392ab225dd4918
      //CoveredLines: [35, 62, 154, 157, 158]
      //Input_0_String: io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2FlowableAdapter
      //Input_1_String: 'session' scope
      //Input_2_String: +>0F\"Fr/mDE@oH
      //Input_3_String: 
      
      SeckillController seckillController0 = new SeckillController();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "io.lettuce.core.dynamic.ReactiveTypeAdapters$PublisherToRxJava2FlowableAdapter", (Class<?>) String.class, (Object) "'session' scope", (Class<?>) String.class, (Object) "+>0F\"Fr/mDE@oH", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_7()  throws Throwable  {
      //caseID:93567ced37704cb9e229a2a2e6445f7a
      //CoveredLines: [35, 62, 154, 157, 160, 161, 162]
      //Input_0_String: reactor.core.publisher.FluxPublishMulticast
      //Input_1_String: seckillGoods:
      //Input_2_String: order:
      //Input_3_String: seckillGoods:
      //Assert: assertNull(method_result);
      
      SeckillController seckillController0 = new SeckillController();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      //Call method: sendMessage
      Object object0 = PrivateAccess.callMethod((Class<SeckillController>) SeckillController.class, seckillController0, "sendMessage", (Object) "reactor.core.publisher.FluxPublishMulticast", (Class<?>) String.class, (Object) "seckillGoods:", (Class<?>) String.class, (Object) "order:", (Class<?>) String.class, (Object) "seckillGoods:", (Class<?>) String.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
