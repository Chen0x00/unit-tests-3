/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.api.IUserService;
import com.nbcb.controller.UserController;
import com.nbcb.pojo.ShopUser;
import com.nbcb.pojo.UserLogin;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserController_SSTest extends UserController_SSTest_scaffolding {
// allCoveredLines:[26, 40, 43, 44, 45, 54, 57]

  @Test(timeout = 9000)
  public void test_doLogin_0()  throws Throwable  {
      //caseID:8fe7b863c427be5cbb6ccce5887451c8
      //CoveredLines: [26, 40, 43, 44, 45, 54, 57]
      //Input_0_UserLogin: {getPassword=\"Mime Mapping\", getAccount=\"Mime Mapping\"}
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      
      UserController userController0 = new UserController();
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Mime Mapping").when(shopUser0).getUserPassword();
      //mock iUserService0
      IUserService iUserService0 = mock(IUserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(iUserService0).findOneByName(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UserController.class, userController0, "userService", (Object) iUserService0);
      //mock userLogin0
      UserLogin userLogin0 = mock(UserLogin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Mime Mapping").when(userLogin0).getAccount();
      doReturn("Mime Mapping").when(userLogin0).getPassword();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doLogin
      // Undeclared exception!
      try { 
        userController0.doLogin(userLogin0, httpServletRequest0, httpServletResponse0);
      } catch(Throwable e) {
         verifyException("com.nbcb.controller.UserController", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
}
