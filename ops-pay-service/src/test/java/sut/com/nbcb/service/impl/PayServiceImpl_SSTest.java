/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopPayMapper;
import com.nbcb.pojo.ShopPay;
import com.nbcb.service.impl.PayServiceImpl;
import com.nbcb.utils.IDWorker;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayServiceImpl_SSTest extends PayServiceImpl_SSTest_scaffolding {
// allCoveredLines:[35, 63, 68, 69, 72, 73, 74, 75, 76, 77, 78, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 111, 169, 173, 174, 175, 176, 189, 190, 192, 193, 195, 196, 197]

  @Test(timeout = 9000)
  public void test_callbackPayment_0()  throws Throwable  {
      //caseID:9c63a82f581ddc27b19bf9b1e6362a01
      //CoveredLines: [35, 108, 111, 169, 173, 174, 175, 176]
      //Input_0_ShopPay: {getIsPaid=Level.WARN_INTEGER}
      //Assert: assertFalse(method_result.getSuccess());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      Integer integer0 = Level.WARN_INTEGER;
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay0).getIsPaid();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_createPayment_1()  throws Throwable  {
      //caseID:a77e002334b1d6ee7654a4df74643aba
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: null
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment((ShopPay) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_2()  throws Throwable  {
      //caseID:ffa26469824e5ecd2947d5ace2931f59
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: {}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_3()  throws Throwable  {
      //caseID:3018215ab7eb76c2e0daa314d7f0aba1
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 78]
      //Input_0_ShopPay: {getOrderId=255L 255L}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1374L).when(shopPayMapper0).countByExample(any(com.nbcb.pojo.ShopPayExample.class));
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(255L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_4()  throws Throwable  {
      //caseID:de96dcf0c593c320da2a246b2c9abf0f
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94]
      //Input_0_ShopPay: {getOrderId=255L}
      //Assert: assertEquals("{\"orderId\":255,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":true}", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(255L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      Result result0 = payServiceImpl0.createPayment(shopPay0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"orderId\":255,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":true}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_findOne_5()  throws Throwable  {
      //caseID:86f8df5a7f5bb9fe1cddd122457f3961
      //CoveredLines: [35, 63]
      //Input_0_Long: 1L
      //Assert: assertNull(method_result);
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(1L);
      
      //Call method: findOne
      ShopPay shopPay0 = payServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopPay0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_6()  throws Throwable  {
      //caseID:bd3386b889d705c8ea75d3a424503ff9
      //CoveredLines: [35, 189, 190]
      //Input_0_String: 
      //Input_1_String: 1
      //Input_2_String: reactor.core.publisher.FluxExpand
      //Input_3_String: , createTime=
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) "1", (Class<?>) String.class, (Object) "reactor.core.publisher.FluxExpand", (Class<?>) String.class, (Object) ", createTime=", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_7()  throws Throwable  {
      //caseID:be2958f38cc1f9edb1fc21466666aee9
      //CoveredLines: [35, 189, 192, 193]
      //Input_0_String: \u652F\u4ED8\u670D\u52A1,\u6570\u636E\u5E93\u4E2D\u6301\u4E45\u5316\u6D88\u606F\u5DF2\u5220\u9664
      //Input_1_String: 2
      //Input_2_String: g<RXf-D:v8
      //Input_3_String: 
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "\u652F\u4ED8\u670D\u52A1,\u6570\u636E\u5E93\u4E2D\u6301\u4E45\u5316\u6D88\u606F\u5DF2\u5220\u9664", (Class<?>) String.class, (Object) "2", (Class<?>) String.class, (Object) "g<RXf-D:v8", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_8()  throws Throwable  {
      //caseID:215091553ab483732beed9ebeec411ac
      //CoveredLines: [35, 189, 192, 195, 196, 197]
      //Input_0_String: \u652F\u4ED8\u670D\u52A1,\u6570\u636E\u5E93\u4E2D\u6301\u4E45\u5316\u6D88\u606F\u5DF2\u5220\u9664
      //Input_1_String: SHOP_MQ_TOPIC_IS_EMPTY
      //Input_2_String: messageSource
      //Input_3_String: Incorrect type specified for header '
      //Assert: assertNull(method_result);
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      //Call method: sendMessage
      Object object0 = PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "\u652F\u4ED8\u670D\u52A1,\u6570\u636E\u5E93\u4E2D\u6301\u4E45\u5316\u6D88\u606F\u5DF2\u5220\u9664", (Class<?>) String.class, (Object) "SHOP_MQ_TOPIC_IS_EMPTY", (Class<?>) String.class, (Object) "messageSource", (Class<?>) String.class, (Object) "Incorrect type specified for header '", (Class<?>) String.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
