/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import ch.qos.logback.classic.Level;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopMsgProviderMapper;
import com.nbcb.mapper.ShopPayMapper;
import com.nbcb.pojo.ShopPay;
import com.nbcb.service.impl.PayServiceImpl;
import com.nbcb.utils.IDWorker;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.client.producer.SendStatus;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayServiceImpl_SSTest extends PayServiceImpl_SSTest_scaffolding {
// allCoveredLines:[35, 63, 68, 69, 72, 73, 74, 75, 76, 77, 78, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 111, 113, 114, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 169, 173, 174, 175, 176, 189, 190, 192, 193, 195, 196, 197]

  @Test(timeout = 9000)
  public void test_callbackPayment_00()  throws Throwable  {
      //caseID:2e47bdc7b678a4a7218f90c9601aed08
      //CoveredLines: [35, 108, 111, 169, 173, 174, 175, 176]
      //Input_0_ShopPay: {getIsPaid=Level.INFO_INTEGER}
      //Assert: assertNull(method_result.getCode());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      Integer integer0 = Level.INFO_INTEGER;
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay0).getIsPaid();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay0);
      
      //Test Result Assert
      assertNull(result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_01()  throws Throwable  {
      //caseID:752004a4f8f47a71d5bee2c4f778b16e
      //CoveredLines: [35, 108, 111, 113, 114, 116, 117, 173, 174, 175, 176]
      //Input_0_ShopPay: {getIsPaid=2}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Integer integer0 = new Integer(2);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay0).getIsPaid();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_02()  throws Throwable  {
      //caseID:fc918f5d5c3c359fc3ee293b1063f057
      //CoveredLines: [35, 108, 111, 113, 114, 116, 119, 121, 122, 123, 160, 161, 162, 163, 164, 166, 167]
      //Input_0_ShopPay: {getIsPaid=2, getPayId=(-2317L)}
      //Assert: assertTrue(method_result.getSuccess());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopPay0).when(shopPayMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Integer integer0 = new Integer(2);
      Long long0 = new Long((-2317L));
      //mock shopPay1
      ShopPay shopPay1 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay1).getIsPaid();
      doReturn(long0).when(shopPay1).getPayId();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay1);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_03()  throws Throwable  {
      //caseID:24b8e30cec70b8e0d5ca2205cebeda40
      //CoveredLines: [35, 108, 111, 113, 114, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 141, 143, 144, 145, 147, 173, 174, 175, 176, 189, 192, 195, 196]
      //Input_0_ShopPay: {getIsPaid=2, getPayId=0L, getOrderId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(224).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(shopPay0).getPayId();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopPay0).when(shopPayMapper0).selectByPrimaryKey(anyLong());
      doReturn(1).when(shopPayMapper0).updateByPrimaryKeySelective(any(com.nbcb.pojo.ShopPay.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(iDWorker0).nextId();
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "topic", (Object) "70003");
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Integer integer0 = new Integer(2);
      //mock shopPay1
      ShopPay shopPay1 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay1).getIsPaid();
      doReturn(long0).when(shopPay1).getOrderId();
      doReturn(long0).when(shopPay1).getPayId();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay1);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_04()  throws Throwable  {
      //caseID:afd42429fc25340d7366bab73afcb8cc
      //CoveredLines: [35, 108, 111, 113, 114, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 141, 143, 146, 147, 157, 160, 161, 162, 163, 164, 166, 167, 189, 192, 195, 196, 197]
      //Input_0_ShopPay: {getIsPaid=2, getPayId=0L, getOrderId=0L}
      //Assert: assertTrue(method_result.getSuccess());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(224).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(shopPay0).getPayId();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopPay0).when(shopPayMapper0).selectByPrimaryKey(anyLong());
      doReturn(1).when(shopPayMapper0).updateByPrimaryKeySelective(any(com.nbcb.pojo.ShopPay.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(iDWorker0).nextId();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      SendStatus sendStatus0 = SendStatus.SLAVE_NOT_AVAILABLE;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("-1").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "topic", (Object) "70003");
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Integer integer0 = new Integer(2);
      //mock shopPay1
      ShopPay shopPay1 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay1).getIsPaid();
      doReturn(long0).when(shopPay1).getOrderId();
      doReturn(long0).when(shopPay1).getPayId();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay1);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_callbackPayment_05()  throws Throwable  {
      //caseID:34ef10058994b25918adee4c18162fa8
      //CoveredLines: [35, 108, 111, 113, 114, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 141, 143, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 189, 192, 195, 196, 197]
      //Input_0_ShopPay: {getIsPaid=2, getPayId=0L}
      //Assert: assertEquals("{\"payId\":0,\"message\":\"\u8BA2\u5355\u5DF2\u4ED8\u6B3E\",\"status\":true}", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopMsgProviderMapper0
      ShopMsgProviderMapper shopMsgProviderMapper0 = mock(ShopMsgProviderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(224).when(shopMsgProviderMapper0).insert(any(com.nbcb.pojo.ShopMsgProvider.class));
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopPay0).getPayId();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopPay0).when(shopPayMapper0).selectByPrimaryKey(anyLong());
      doReturn(1).when(shopPayMapper0).updateByPrimaryKeySelective(any(com.nbcb.pojo.ShopPay.class));
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(iDWorker0).nextId();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock threadPoolTaskExecutor0
      ThreadPoolTaskExecutor threadPoolTaskExecutor0 = mock(ThreadPoolTaskExecutor.class, new ExecutorServiceAnswer());
      SendStatus sendStatus0 = SendStatus.SEND_OK;
      //mock sendResult0
      SendResult sendResult0 = mock(SendResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendStatus0).when(sendResult0).getSendStatus();
      doReturn("lifecycleMBeanBase.unregisterNoServer").when(sendResult0).toString();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(sendResult0).when(defaultMQProducer0).send(any(org.apache.rocketmq.common.message.Message.class));
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "threadPoolTaskExecutor", (Object) threadPoolTaskExecutor0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "topic", (Object) "70003");
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "msgProviderMapper", (Object) shopMsgProviderMapper0);
      Integer integer0 = new Integer(2);
      //mock shopPay1
      ShopPay shopPay1 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay1).getIsPaid();
      doReturn(long0).when(shopPay1).getPayId();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay1);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"payId\":0,\"message\":\"\u8BA2\u5355\u5DF2\u4ED8\u6B3E\",\"status\":true}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_createPayment_06()  throws Throwable  {
      //caseID:cd96c116011a458631ec0a2acf741109
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: null
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment((ShopPay) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_07()  throws Throwable  {
      //caseID:dab84303838086c01e65b3042e7b4e05
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: {}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_08()  throws Throwable  {
      //caseID:0f35210d268c93d0f3a59e48feb6bbd3
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 78]
      //Input_0_ShopPay: {getOrderId=(-14L) (-14L)}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)2117657486).when(shopPayMapper0).countByExample(any(com.nbcb.pojo.ShopPayExample.class));
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long((-14L));
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_09()  throws Throwable  {
      //caseID:d01db0bc6c122cf810a6e1759a6af706
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94]
      //Input_0_ShopPay: {getOrderId=0L}
      //Assert: assertEquals("{\"orderId\":0,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":true}", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      Result result0 = payServiceImpl0.createPayment(shopPay0);
      
      //Test Result Assert
      //  // Unstable assertion: assertEquals("{\"orderId\":0,\"message\":\"\u8BA2\u5355\u672A\u4ED8\u6B3E\",\"status\":true}", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_findOne_10()  throws Throwable  {
      //caseID:34ce2a063b50902b3cbf211dee3d56ed
      //CoveredLines: [35, 63]
      //Input_0_Long: 313L
      //Assert: assertNull(method_result);
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(313L);
      
      //Call method: findOne
      ShopPay shopPay0 = payServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopPay0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_11()  throws Throwable  {
      //caseID:0c890df4a652c9f7be0683d940ede6ef
      //CoveredLines: [35, 189, 190]
      //Input_0_String: 
      //Input_1_String: org.springframework.beans.CachedIntrospectionResults
      //Input_2_String: \u652F\u4ED8\u670D\u52A1,\u652F\u4ED8\u8BA2\u5355\u521B\u5EFA\u6210\u529F
      //Input_3_String: 
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) "org.springframework.beans.CachedIntrospectionResults", (Class<?>) String.class, (Object) "\u652F\u4ED8\u670D\u52A1,\u652F\u4ED8\u8BA2\u5355\u521B\u5EFA\u6210\u529F", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_12()  throws Throwable  {
      //caseID:814d2a4029fc79a5010b376c7559d008
      //CoveredLines: [35, 189, 192, 193]
      //Input_0_String: 2141905768
      //Input_1_String: ; Max-Age=
      //Input_2_String: 
      //Input_3_String: 
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "2141905768", (Class<?>) String.class, (Object) "; Max-Age=", (Class<?>) String.class, (Object) "", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }
}
