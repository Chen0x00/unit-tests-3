/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopPayMapper;
import com.nbcb.pojo.ShopPay;
import com.nbcb.service.impl.PayServiceImpl;
import com.nbcb.utils.IDWorker;
import javax.swing.JLayeredPane;
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.spring.core.RocketMQTemplate;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayServiceImpl_SSTest extends PayServiceImpl_SSTest_scaffolding {
// allCoveredLines:[35, 63, 68, 69, 72, 73, 74, 75, 76, 77, 78, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 111, 169, 173, 174, 175, 176, 189, 190, 192, 193, 195, 196, 197]

  @Test(timeout = 9000)
  public void test_callbackPayment_0()  throws Throwable  {
      //caseID:d7bdc682d26da639c28b65271b07110f
      //CoveredLines: [35, 108, 111, 169, 173, 174, 175, 176]
      //Input_0_ShopPay: {getIsPaid=JLayeredPane.DEFAULT_LAYER}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopPay0).getIsPaid();
      
      //Call method: callbackPayment
      Result result0 = payServiceImpl0.callbackPayment(shopPay0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_createPayment_1()  throws Throwable  {
      //caseID:4182f91c3752dc647e5a830409a214a9
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: null
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment((ShopPay) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_2()  throws Throwable  {
      //caseID:77e00c456be620c260180044c020374b
      //CoveredLines: [35, 68, 69]
      //Input_0_ShopPay: {}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_3()  throws Throwable  {
      //caseID:302c46cf12ed42f251005d7da186e91c
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 78]
      //Input_0_ShopPay: {getOrderId=1371L 1371L}
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1371L).when(shopPayMapper0).countByExample(any(com.nbcb.pojo.ShopPayExample.class));
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(1371L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      // Undeclared exception!
      try { 
        payServiceImpl0.createPayment(shopPay0);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_createPayment_4()  throws Throwable  {
      //caseID:388995b7a625da56dcdea38fd3b12610
      //CoveredLines: [35, 68, 72, 73, 74, 75, 76, 77, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94]
      //Input_0_ShopPay: {getOrderId=0L}
      //Assert: assertNull(method_result.getCode());
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock iDWorker0
      IDWorker iDWorker0 = mock(IDWorker.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "idWorker", (Object) iDWorker0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long(0L);
      //mock shopPay0
      ShopPay shopPay0 = mock(ShopPay.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopPay0).getOrderId();
      
      //Call method: createPayment
      Result result0 = payServiceImpl0.createPayment(shopPay0);
      
      //Test Result Assert
      assertNull(result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_findOne_5()  throws Throwable  {
      //caseID:cb74ff82d4178bc44a06de4c7d610fca
      //CoveredLines: [35, 63]
      //Input_0_Long: (-1L)
      //Assert: assertNull(method_result);
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      //mock shopPayMapper0
      ShopPayMapper shopPayMapper0 = mock(ShopPayMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "payMapper", (Object) shopPayMapper0);
      Long long0 = new Long((-1L));
      
      //Call method: findOne
      ShopPay shopPay0 = payServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopPay0);
  }

  @Test(timeout = 9000)
  public void test_sendMessage_6()  throws Throwable  {
      //caseID:1f9eba4bd9741845b4d18903ecd26713
      //CoveredLines: [35, 189, 190]
      //Input_0_String: 
      //Input_1_String: 
      //Input_2_String: \u652F\u4ED8\u670D\u52A1,\u652F\u4ED8\u8BA2\u5355\u521B\u5EFA\u6210\u529F
      //Input_3_String: 1
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "", (Class<?>) String.class, (Object) "", (Class<?>) String.class, (Object) "\u652F\u4ED8\u670D\u52A1,\u652F\u4ED8\u8BA2\u5355\u521B\u5EFA\u6210\u529F", (Class<?>) String.class, (Object) "1", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_7()  throws Throwable  {
      //caseID:447673c685d88a7fc0675e9b3c39f531
      //CoveredLines: [35, 189, 192, 193]
      //Input_0_String:  elements left
      //Input_1_String: 
      //Input_2_String: com.nbcb.service.impl.PayServiceImpl$1
      //Input_3_String: 
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      
      //Call method: sendMessage
      try { 
        PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) " elements left", (Class<?>) String.class, (Object) "", (Class<?>) String.class, (Object) "com.nbcb.service.impl.PayServiceImpl$1", (Class<?>) String.class, (Object) "", (Class<?>) String.class);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_sendMessage_8()  throws Throwable  {
      //caseID:cd5fccf44101fdf2ebb467f7d080e4ce
      //CoveredLines: [35, 189, 192, 195, 196, 197]
      //Input_0_String: u`i3i#F)GYSu%|bB
      //Input_1_String: 2147483647
      //Input_2_String: Topic\u4E0D\u80FD\u4E3A\u7A7A
      //Input_3_String: &2@y;Q_
      //Assert: assertNull(method_result);
      
      PayServiceImpl payServiceImpl0 = new PayServiceImpl();
      RocketMQTemplate rocketMQTemplate0 = new RocketMQTemplate();
      //mock defaultMQProducer0
      DefaultMQProducer defaultMQProducer0 = mock(DefaultMQProducer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      rocketMQTemplate0.setProducer(defaultMQProducer0);
      
      PrivateAccess.setVariable((Class<?>) PayServiceImpl.class, payServiceImpl0, "rocketMQTemplate", (Object) rocketMQTemplate0);
      
      //Call method: sendMessage
      Object object0 = PrivateAccess.callMethod((Class<PayServiceImpl>) PayServiceImpl.class, payServiceImpl0, "sendMessage", (Object) "u`i3i#F)GYSu%|bB", (Class<?>) String.class, (Object) "2147483647", (Class<?>) String.class, (Object) "Topic\u4E0D\u80FD\u4E3A\u7A7A", (Class<?>) String.class, (Object) "&2@y;Q_", (Class<?>) String.class);
      
      //Test Result Assert
      assertNull(object0);
  }
}
