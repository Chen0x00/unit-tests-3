/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.Good;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Good_SSTest extends Good_SSTest_scaffolding {
// allCoveredLines:[3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:e5581d40071dd98fbbf5bde37e2fd6ee
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:7da05a90b4066afd7cd636eeff4cd8d4
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: 1
      //Assert: assertFalse(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals("1");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:6bc5b0e3109710470aa920312df7fafc
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good1.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:081273e95e04ab7ee6e1bafb02e923f7
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good1
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:7979ac041ac8ca998680e53e52c27c57
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      
      Good good0 = new Good();
      
      //Call method: hashCode
      good0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAttrsText_05()  throws Throwable  {
      //caseID:e29db6deb5c10110878f58fbca0058a1
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , count=
      
      Good good0 = new Good();
      
      //Call method: setAttrsText
      good0.setAttrsText(", count=");
      
      //Test Result Assert
      assertNull(good0.getName());
  }

  @Test(timeout = 9000)
  public void test_setCount_06()  throws Throwable  {
      //caseID:7d2442f5c899f7b710b840e773ba1e09
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_long: 0
      
      Good good0 = new Good();
      
      //Call method: setCount
      good0.setCount(0L);
      
      //Test Result Assert
      assertNull(good0.getPayPrice());
  }

  @Test(timeout = 9000)
  public void test_setId_07()  throws Throwable  {
      //caseID:ed9a6a2c5750854943355fb0794f03e6
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      Good good0 = new Good();
      
      //Call method: setId
      good0.setId("");
      
      //Test Result Assert
      assertNull(good0.getTotalPayPrice());
  }

  @Test(timeout = 9000)
  public void test_setName_08()  throws Throwable  {
      //caseID:32cd7d5a57f4d51140c612f1c71c920a
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      Good good0 = new Good();
      
      //Call method: setName
      good0.setName("");
      
      //Test Result Assert
      assertNull(good0.getTotalPrice());
  }

  @Test(timeout = 9000)
  public void test_setPayPrice_09()  throws Throwable  {
      //caseID:a40b2d2a874c5e616bf8ac4fb082ccfa
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , totalPayPrice=
      
      Good good0 = new Good();
      
      //Call method: setPayPrice
      good0.setPayPrice(", totalPayPrice=");
      
      //Test Result Assert
      assertNull(good0.getId());
  }

  @Test(timeout = 9000)
  public void test_setPicture_10()  throws Throwable  {
      //caseID:10cc0ae1f9e492a33f8e25f97485ff78
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setPicture
      good0.setPicture("1");
      
      //Test Result Assert
      assertNull(good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setPrice_11()  throws Throwable  {
      //caseID:3e3cfbb590bbcbaabef58836bb3c61e5
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setPrice
      good0.setPrice("1");
      
      //Test Result Assert
      assertNull(good0.getPayPrice());
  }

  @Test(timeout = 9000)
  public void test_setSkuId_12()  throws Throwable  {
      //caseID:359602f667e3d396b4a052f1f59bd6dc
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: dnP0:2H5I
      
      Good good0 = new Good();
      
      //Call method: setSkuId
      good0.setSkuId("dnP0:2H5I");
      
      //Test Result Assert
      assertNull(good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setTotalPayPrice_13()  throws Throwable  {
      //caseID:c4c73c65b5fb53f5ce75aac72e32fcfe
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 59
      
      Good good0 = new Good();
      
      //Call method: setTotalPayPrice
      good0.setTotalPayPrice("59");
      
      //Test Result Assert
      assertNull(good0.getPayPrice());
  }

  @Test(timeout = 9000)
  public void test_setTotalPrice_14()  throws Throwable  {
      //caseID:f5b9c4078b73437af99ed3e68df22915
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , skuId=
      
      Good good0 = new Good();
      
      //Call method: setTotalPrice
      good0.setTotalPrice(", skuId=");
      
      //Test Result Assert
      assertNull(good0.getName());
  }

  @Test(timeout = 9000)
  public void test_toString_15()  throws Throwable  {
      //caseID:1e0e5bd2c98d875b316c31bf770a955f
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Assert: assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", method_result);
      
      Good good0 = new Good();
      
      //Call method: toString
      String string0 = good0.toString();
      
      //Test Result Assert
      assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", string0);
  }
}
