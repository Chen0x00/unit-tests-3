/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.Good;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Good_SSTest extends Good_SSTest_scaffolding {
// allCoveredLines:[3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:0cf472d96f0e7b2ee25d540c91d656fe
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:00efca4916bdc2c055b352ae54934adc
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: , payPrice=
      //Assert: assertFalse(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(", payPrice=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:298fbb348b6c3493c1c690eed01ab009
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good1.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:39eebf4ddd1f5d5359bb7c12c7fc9570
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good1
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:fc28fbccdc26a4f6f77dc7dff8cdab58
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      
      Good good0 = new Good();
      
      //Call method: hashCode
      good0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAttrsText_05()  throws Throwable  {
      //caseID:27e6d95cfbbc04f2befb1d548a28c317
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setAttrsText
      good0.setAttrsText("1");
      
      //Test Result Assert
      assertNull(good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setCount_06()  throws Throwable  {
      //caseID:43511cde2ba3149b6ba6b60c7e6e80e0
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_long: 5565
      
      Good good0 = new Good();
      
      //Call method: setCount
      good0.setCount(5565L);
      
      //Test Result Assert
      assertNull(good0.getTotalPayPrice());
  }

  @Test(timeout = 9000)
  public void test_setId_07()  throws Throwable  {
      //caseID:0e676181ae766e855d3e27c16bbacac8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setId
      good0.setId("1");
      
      //Test Result Assert
      assertNull(good0.getTotalPrice());
  }

  @Test(timeout = 9000)
  public void test_setName_08()  throws Throwable  {
      //caseID:59a05282f0965c815a0f6858ca37cdcd
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 59
      
      Good good0 = new Good();
      
      //Call method: setName
      good0.setName("59");
      
      //Test Result Assert
      assertEquals("59", good0.getName());
  }

  @Test(timeout = 9000)
  public void test_setPayPrice_09()  throws Throwable  {
      //caseID:2bd3aee3312d1b18cca576cd5990fffa
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setPayPrice
      good0.setPayPrice("1");
      
      //Test Result Assert
      assertNull(good0.getTotalPrice());
  }

  @Test(timeout = 9000)
  public void test_setPicture_10()  throws Throwable  {
      //caseID:aedf3302f2ed01fb28c5d08f46aaede2
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setPicture
      good0.setPicture("1");
      
      //Test Result Assert
      assertNull(good0.getSkuId());
  }

  @Test(timeout = 9000)
  public void test_setPrice_11()  throws Throwable  {
      //caseID:56d54ce80dfbd66869785c97970bd198
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: lk
      
      Good good0 = new Good();
      
      //Call method: setPrice
      good0.setPrice("lk");
      
      //Test Result Assert
      assertEquals("lk", good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setSkuId_12()  throws Throwable  {
      //caseID:ec4739e9b4a61ad38141d2cb85caf390
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setSkuId
      good0.setSkuId("1");
      
      //Test Result Assert
      assertEquals(0L, good0.getCount());
  }

  @Test(timeout = 9000)
  public void test_setTotalPayPrice_13()  throws Throwable  {
      //caseID:324a8dec1362c775bab870c491107581
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      Good good0 = new Good();
      
      //Call method: setTotalPayPrice
      good0.setTotalPayPrice("");
      
      //Test Result Assert
      assertNull(good0.getName());
  }

  @Test(timeout = 9000)
  public void test_setTotalPrice_14()  throws Throwable  {
      //caseID:eeccb42722ff2901443fafcfc02c528a
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , picture=
      
      Good good0 = new Good();
      
      //Call method: setTotalPrice
      good0.setTotalPrice(", picture=");
      
      //Test Result Assert
      assertNull(good0.getPayPrice());
  }

  @Test(timeout = 9000)
  public void test_toString_15()  throws Throwable  {
      //caseID:eed935f75a52c6f83df59c7c41d9a0a8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Assert: assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", method_result);
      
      Good good0 = new Good();
      
      //Call method: toString
      String string0 = good0.toString();
      
      //Test Result Assert
      assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", string0);
  }
}
