/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.Good;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Good_SSTest extends Good_SSTest_scaffolding {
// allCoveredLines:[3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:63756e4c5d955f32547bc167ff14afbb
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:9bf85470a6bb53fe2dbbef2afd5ebf59
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: u)sn
      //Assert: assertFalse(method_result);
      
      Good good0 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals("u)sn");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:4979c0d41e9e3ed8ddd31e6842edc37f
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good0
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good1.equals(good0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:4a7abbdcf89ddfaf0bb614a8912fd302
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Input_0_Object: good1
      //Assert: assertTrue(method_result);
      
      Good good0 = new Good();
      Good good1 = new Good();
      
      //Call method: equals
      boolean boolean0 = good0.equals(good1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:a4bce2a350e5ba6756f67536fe5dcc61
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      
      Good good0 = new Good();
      
      //Call method: hashCode
      good0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAttrsText_05()  throws Throwable  {
      //caseID:4eced1d54412802c167766e7e38ddce1
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1.0
      
      Good good0 = new Good();
      
      //Call method: setAttrsText
      good0.setAttrsText("1.0");
      
      //Test Result Assert
      assertNull(good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setCount_06()  throws Throwable  {
      //caseID:2ddceccce2b8b4a1d869ed5aa5e8e09d
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_long: 0
      
      Good good0 = new Good();
      
      //Call method: setCount
      good0.setCount(0L);
      
      //Test Result Assert
      assertNull(good0.getPicture());
  }

  @Test(timeout = 9000)
  public void test_setId_07()  throws Throwable  {
      //caseID:babf69c6a642c3f0f68e3dbe02d39ab8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: E}ne)p:OvT&I
      
      Good good0 = new Good();
      
      //Call method: setId
      good0.setId("E}ne)p:OvT&I");
      
      //Test Result Assert
      assertNull(good0.getTotalPrice());
  }

  @Test(timeout = 9000)
  public void test_setName_08()  throws Throwable  {
      //caseID:94110a1c1bfcf7123cdf6c230e3c036c
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , id=
      
      Good good0 = new Good();
      
      //Call method: setName
      good0.setName(", id=");
      
      //Test Result Assert
      assertNull(good0.getId());
  }

  @Test(timeout = 9000)
  public void test_setPayPrice_09()  throws Throwable  {
      //caseID:b3f32b85700ddb9e86f0131d2613a3f0
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: ?;>C9kM4k
      
      Good good0 = new Good();
      
      //Call method: setPayPrice
      good0.setPayPrice("?;>C9kM4k");
      
      //Test Result Assert
      assertNull(good0.getAttrsText());
  }

  @Test(timeout = 9000)
  public void test_setPicture_10()  throws Throwable  {
      //caseID:bf6982e022c34ea437764a0304bcb001
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setPicture
      good0.setPicture("1");
      
      //Test Result Assert
      assertNull(good0.getTotalPrice());
  }

  @Test(timeout = 9000)
  public void test_setPrice_11()  throws Throwable  {
      //caseID:9c26a7f7e85b5d471edf0145a85fdc05
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , price=
      
      Good good0 = new Good();
      
      //Call method: setPrice
      good0.setPrice(", price=");
      
      //Test Result Assert
      assertNull(good0.getSkuId());
  }

  @Test(timeout = 9000)
  public void test_setSkuId_12()  throws Throwable  {
      //caseID:294a586b5201cc44ae661c9a02cc8f00
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 0
      
      Good good0 = new Good();
      
      //Call method: setSkuId
      good0.setSkuId("0");
      
      //Test Result Assert
      assertNull(good0.getName());
  }

  @Test(timeout = 9000)
  public void test_setTotalPayPrice_13()  throws Throwable  {
      //caseID:72e26df7c7d745798b949fa22a437353
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: com.nbcb.entity.Good
      
      Good good0 = new Good();
      
      //Call method: setTotalPayPrice
      good0.setTotalPayPrice("com.nbcb.entity.Good");
      
      //Test Result Assert
      assertNull(good0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setTotalPrice_14()  throws Throwable  {
      //caseID:392f5a68ed879e3da855709bb68104b8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      Good good0 = new Good();
      
      //Call method: setTotalPrice
      good0.setTotalPrice("1");
      
      //Test Result Assert
      assertNull(good0.getSkuId());
  }

  @Test(timeout = 9000)
  public void test_toString_15()  throws Throwable  {
      //caseID:39debbbc89f245170bfb949cdb835d36
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
      //Assert: assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", method_result);
      
      Good good0 = new Good();
      
      //Call method: toString
      String string0 = good0.toString();
      
      //Test Result Assert
      assertEquals("Good(attrsText=null, count=0, id=null, name=null, payPrice=null, picture=null, price=null, skuId=null, totalPayPrice=null, totalPrice=null)", string0);
  }
}
