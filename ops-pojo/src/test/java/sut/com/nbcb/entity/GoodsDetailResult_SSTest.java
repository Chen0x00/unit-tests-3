/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.Brand;
import com.nbcb.entity.Category;
import com.nbcb.entity.Details;
import com.nbcb.entity.EvaluationInfo;
import com.nbcb.entity.GoodsDetailResult;
import com.nbcb.entity.HotByDay;
import com.nbcb.entity.ResultSpec;
import com.nbcb.entity.SimilarProduct;
import com.nbcb.entity.Skus;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class GoodsDetailResult_SSTest extends GoodsDetailResult_SSTest_scaffolding {
// allCoveredLines:[7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:1a61d155a41889a34b8c9bd1ea0ce8bf
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: , price=
      //Assert: assertFalse(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult0.equals(", price=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:82e4883733e28b20e6238abf3ea7ffe1
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: goodsDetailResult0
      //Assert: assertTrue(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult0.equals(goodsDetailResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:f10719f2faa8224480240de4d90104b8
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      //Input_0_Object: goodsDetailResult0
      //Assert: assertTrue(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      GoodsDetailResult goodsDetailResult1 = new GoodsDetailResult();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult1.equals(goodsDetailResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:949d73422ade47b889dbf7a3f5ca3259
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      //Input_0_Object: goodsDetailResult1
      //Assert: assertTrue(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      GoodsDetailResult goodsDetailResult1 = new GoodsDetailResult();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult0.equals(goodsDetailResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:7c939477dd0763f41fe8b73bba037c4f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: hashCode
      goodsDetailResult0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setBrand_05()  throws Throwable  {
      //caseID:dd6b84ebb5d460a764762241a78c11e8
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Brand: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock brand0
      Brand brand0 = mock(Brand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setBrand
      goodsDetailResult0.setBrand(brand0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setCategories_06()  throws Throwable  {
      //caseID:7a4ab80ab18860c228bccfc00fb7e1a1
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<Category>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<Category> linkedList0 = new LinkedList<Category>();
      
      //Call method: setCategories
      goodsDetailResult0.setCategories(linkedList0);
      
      //Test Result Assert
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 9000)
  public void test_setCollectCount_07()  throws Throwable  {
      //caseID:82709d8a934c85db38027f3e4135ac88
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 2679
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setCollectCount
      goodsDetailResult0.setCollectCount(2679L);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setCommentCount_08()  throws Throwable  {
      //caseID:682be9a63ef16e56ca9ec896d0463ce0
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setCommentCount
      goodsDetailResult0.setCommentCount(0L);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCollectCount());
  }

  @Test(timeout = 9000)
  public void test_setDesc_09()  throws Throwable  {
      //caseID:1df5752f7772141359435e53d4f12409
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: , id=
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setDesc
      goodsDetailResult0.setDesc(", id=");
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setDetails_10()  throws Throwable  {
      //caseID:4aa8cadea9ac562920042d8044cf3acb
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Details: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock details0
      Details details0 = mock(Details.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setDetails
      goodsDetailResult0.setDetails(details0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCommentCount());
  }

  @Test(timeout = 9000)
  public void test_setDiscount_11()  throws Throwable  {
      //caseID:5ed107968ce3618f11dc83ddd85327d4
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 1
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setDiscount
      goodsDetailResult0.setDiscount(1L);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCollectCount());
  }

  @Test(timeout = 9000)
  public void test_setEvaluationInfo_12()  throws Throwable  {
      //caseID:a1238c5ea47081e54fc26f17259bf74e
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_EvaluationInfo: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock evaluationInfo0
      EvaluationInfo evaluationInfo0 = mock(EvaluationInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setEvaluationInfo
      goodsDetailResult0.setEvaluationInfo(evaluationInfo0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCommentCount());
  }

  @Test(timeout = 9000)
  public void test_setHotByDay_13()  throws Throwable  {
      //caseID:31aa57d1c42cfe05bc07f02052f54ae0
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<HotByDay>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<HotByDay> linkedList0 = new LinkedList<HotByDay>();
      
      //Call method: setHotByDay
      goodsDetailResult0.setHotByDay(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getDiscount());
  }

  @Test(timeout = 9000)
  public void test_setId_14()  throws Throwable  {
      //caseID:396707270812667a0084a0033bfeb870
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 1.0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setId
      goodsDetailResult0.setId("1.0");
      
      //Test Result Assert
      assertEquals("1.0", goodsDetailResult0.getId());
  }

  @Test(timeout = 9000)
  public void test_setInventory_15()  throws Throwable  {
      //caseID:eddde2fad964f2bf8e8be4d7071154f0
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 365
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setInventory
      goodsDetailResult0.setInventory(365L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getDesc());
  }

  @Test(timeout = 9000)
  public void test_setIsCollect_16()  throws Throwable  {
      //caseID:9e4b01451539c3ed137b58e32cbf4681
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<Skus> linkedList0 = new LinkedList<Skus>();
      
      //Call method: setIsCollect
      goodsDetailResult0.setIsCollect(linkedList0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setMainPictures_17()  throws Throwable  {
      //caseID:df68ff400f9bdfabf34f7bf9d2a71866
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<String>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      
      //Call method: setMainPictures
      goodsDetailResult0.setMainPictures(linkedList0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setMainVideos_18()  throws Throwable  {
      //caseID:d1a9195a7b5bd0197e6c115ef42cf5fc
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<String>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      
      //Call method: setMainVideos
      goodsDetailResult0.setMainVideos(linkedList0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setName_19()  throws Throwable  {
      //caseID:572b75e99bca289cb45ca727b6e578ce
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: onBufferEviction
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setName
      goodsDetailResult0.setName("onBufferEviction");
      
      //Test Result Assert
      assertEquals("onBufferEviction", goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_setOldPrice_20()  throws Throwable  {
      //caseID:1314a0edc515e7f451533e0f849a01c5
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: , mainVideos=
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setOldPrice
      goodsDetailResult0.setOldPrice(", mainVideos=");
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setPreSale_21()  throws Throwable  {
      //caseID:1b4ff4280110e6f55c53a1afcce95792
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_boolean: false
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setPreSale
      goodsDetailResult0.setPreSale(false);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCommentCount());
  }

  @Test(timeout = 9000)
  public void test_setPrice_22()  throws Throwable  {
      //caseID:2f3fb005c329e2103f58dfdd7c2e2647
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: , categories=
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setPrice
      goodsDetailResult0.setPrice(", categories=");
      
      //Test Result Assert
      assertEquals(", categories=", goodsDetailResult0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setRecommends_23()  throws Throwable  {
      //caseID:c23fa4c01b7ffc72b15bd9eeeef715a3
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: skus0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      Skus skus0 = new Skus();
      
      //Call method: setRecommends
      goodsDetailResult0.setRecommends(skus0);
      
      //Test Result Assert
      assertNull(skus0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setSalesCount_24()  throws Throwable  {
      //caseID:03e0b3ed79a4a3a0aafe45bdad71b9b2
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 978
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setSalesCount
      goodsDetailResult0.setSalesCount(978L);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setSimilarProducts_25()  throws Throwable  {
      //caseID:bb7cfe38ba752ddd1a58449f43059269
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<SimilarProduct>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<SimilarProduct> linkedList0 = new LinkedList<SimilarProduct>();
      
      //Call method: setSimilarProducts
      goodsDetailResult0.setSimilarProducts(linkedList0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getId());
  }

  @Test(timeout = 9000)
  public void test_setSkus_26()  throws Throwable  {
      //caseID:1a68dfdbb768afa123d64e78a5b91981
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<Skus>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<Skus> linkedList0 = new LinkedList<Skus>();
      
      //Call method: setSkus
      goodsDetailResult0.setSkus(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getDiscount());
  }

  @Test(timeout = 9000)
  public void test_setSpecs_27()  throws Throwable  {
      //caseID:16abeb927b2b7e8e27c6fd58a83ccff8
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<ResultSpec>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<ResultSpec> linkedList0 = new LinkedList<ResultSpec>();
      
      //Call method: setSpecs
      goodsDetailResult0.setSpecs(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCommentCount());
  }

  @Test(timeout = 9000)
  public void test_setSpuCode_28()  throws Throwable  {
      //caseID:d78b54fe180fe1d43ab5dd05cb1c3c33
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: }kS1oH\"S=r4
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setSpuCode
      goodsDetailResult0.setSpuCode("}kS1oH\"S=r4");
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getVideoScale());
  }

  @Test(timeout = 9000)
  public void test_setUserAddresses_29()  throws Throwable  {
      //caseID:678528b0d9b8d9c3d93b1acab235cc49
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: null or too small array, need between 2 and 8 values
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setUserAddresses
      goodsDetailResult0.setUserAddresses("null or too small array, need between 2 and 8 values");
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_setVideoScale_30()  throws Throwable  {
      //caseID:56074eb7c2558ea358864d4949e72f78
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 1
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setVideoScale
      goodsDetailResult0.setVideoScale(1L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_toString_31()  throws Throwable  {
      //caseID:a06877713717f812e127c547a097a4f2
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      //Assert: assertEquals("GoodsDetailResult(brand=null, categories=null, collectCount=0, commentCount=0, desc=null, details=null, discount=0, evaluationInfo=null, hotByDay=null, id=null, inventory=0, isCollect=null, isPreSale=false, mainPictures=null, mainVideos=null, name=null, oldPrice=null, price=null, recommends=null, salesCount=0, similarProducts=null, skus=null, specs=null, spuCode=null, userAddresses=null, videoScale=0)", method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: toString
      String string0 = goodsDetailResult0.toString();
      
      //Test Result Assert
      assertEquals("GoodsDetailResult(brand=null, categories=null, collectCount=0, commentCount=0, desc=null, details=null, discount=0, evaluationInfo=null, hotByDay=null, id=null, inventory=0, isCollect=null, isPreSale=false, mainPictures=null, mainVideos=null, name=null, oldPrice=null, price=null, recommends=null, salesCount=0, similarProducts=null, skus=null, specs=null, spuCode=null, userAddresses=null, videoScale=0)", string0);
  }
}
