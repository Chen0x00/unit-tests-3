/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.Brand;
import com.nbcb.entity.Category;
import com.nbcb.entity.Details;
import com.nbcb.entity.EvaluationInfo;
import com.nbcb.entity.GoodsDetailResult;
import com.nbcb.entity.HotByDay;
import com.nbcb.entity.ResultSpec;
import com.nbcb.entity.SimilarProduct;
import com.nbcb.entity.Skus;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class GoodsDetailResult_SSTest extends GoodsDetailResult_SSTest_scaffolding {
// allCoveredLines:[7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]

  @Test(timeout = 9000)
  public void test_canEqual_00()  throws Throwable  {
      //caseID:9383860ce151e83dc4e93930874c0731
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: category0
      //Assert: assertFalse(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      Category category0 = new Category();
      
      //Call method: canEqual
      boolean boolean0 = (boolean)PrivateAccess.callMethod((Class<GoodsDetailResult>) GoodsDetailResult.class, goodsDetailResult0, "canEqual", (Object) category0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:898e063d9e177e2d26eb0b1661bcec74
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: object0
      //Assert: assertFalse(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      Object object0 = new Object();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult0.equals(object0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:23ff824fd9b84e1bf09dc6897c526105
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: goodsDetailResult0
      //Assert: assertTrue(method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: equals
      boolean boolean0 = goodsDetailResult0.equals(goodsDetailResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_03()  throws Throwable  {
      //caseID:ff796e615fd46d1e015b7445072454e5
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: hashCode
      goodsDetailResult0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setBrand_04()  throws Throwable  {
      //caseID:2654b756e65d2cfe626053655d35b24f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Brand: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock brand0
      Brand brand0 = mock(Brand.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setBrand
      goodsDetailResult0.setBrand(brand0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setCategories_05()  throws Throwable  {
      //caseID:2f8a543ca94e229b477b5bb14efc698b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<Category>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<Category> linkedList0 = new LinkedList<Category>();
      
      //Call method: setCategories
      goodsDetailResult0.setCategories(linkedList0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getOldPrice());
  }

  @Test(timeout = 9000)
  public void test_setCollectCount_06()  throws Throwable  {
      //caseID:45b79c3233e920b1ff61b787e3fe2a31
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setCollectCount
      goodsDetailResult0.setCollectCount(0L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getOldPrice());
  }

  @Test(timeout = 9000)
  public void test_setCommentCount_07()  throws Throwable  {
      //caseID:a4317eb30859b38d9c1f536756327b39
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setCommentCount
      goodsDetailResult0.setCommentCount(0L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getOldPrice());
  }

  @Test(timeout = 9000)
  public void test_setDesc_08()  throws Throwable  {
      //caseID:16e1ff4d0a4d6f9ad70ac7ba1ff48741
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: , logo=
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setDesc
      goodsDetailResult0.setDesc(", logo=");
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getDiscount());
  }

  @Test(timeout = 9000)
  public void test_setDetails_09()  throws Throwable  {
      //caseID:4612d7649340f4d434e21ec5955aa892
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Details: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock details0
      Details details0 = mock(Details.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setDetails
      goodsDetailResult0.setDetails(details0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_setDiscount_10()  throws Throwable  {
      //caseID:458e6a32425091d02e2ac0f7d50a8f24
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 3898
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setDiscount
      goodsDetailResult0.setDiscount(3898L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getSpuCode());
  }

  @Test(timeout = 9000)
  public void test_setEvaluationInfo_11()  throws Throwable  {
      //caseID:0e8c7fc29af9a214435494738aa1d03a
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_EvaluationInfo: {}
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      //mock evaluationInfo0
      EvaluationInfo evaluationInfo0 = mock(EvaluationInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setEvaluationInfo
      goodsDetailResult0.setEvaluationInfo(evaluationInfo0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setHotByDay_12()  throws Throwable  {
      //caseID:890e2137c3e8b0d81b452be44b1bb88f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<HotByDay>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<HotByDay> linkedList0 = new LinkedList<HotByDay>();
      
      //Call method: setHotByDay
      goodsDetailResult0.setHotByDay(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getVideoScale());
  }

  @Test(timeout = 9000)
  public void test_setId_13()  throws Throwable  {
      //caseID:cd62d3e2175f9d06bc2f4cc23ee83899
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: onEachOperator
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setId
      goodsDetailResult0.setId("onEachOperator");
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getDiscount());
  }

  @Test(timeout = 9000)
  public void test_setInventory_14()  throws Throwable  {
      //caseID:0e37a21fe623f957465e8671034be18f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setInventory
      goodsDetailResult0.setInventory(0L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setIsCollect_15()  throws Throwable  {
      //caseID:0e97e2a9588374bfb8aed508c503f70c
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<HotByDay> linkedList0 = new LinkedList<HotByDay>();
      
      //Call method: setIsCollect
      goodsDetailResult0.setIsCollect(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCollectCount());
  }

  @Test(timeout = 9000)
  public void test_setMainPictures_16()  throws Throwable  {
      //caseID:222c0c59c8d0aa99df8d2e53ed3a7377
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<String>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      
      //Call method: setMainPictures
      goodsDetailResult0.setMainPictures(linkedList0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getId());
  }

  @Test(timeout = 9000)
  public void test_setMainVideos_17()  throws Throwable  {
      //caseID:653282b84f71b21265b236bc0ee788d3
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<String>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      
      //Call method: setMainVideos
      goodsDetailResult0.setMainVideos(linkedList0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setName_18()  throws Throwable  {
      //caseID:97822432894377bccfc2b8ec994356e3
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setName
      goodsDetailResult0.setName("");
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getSpuCode());
  }

  @Test(timeout = 9000)
  public void test_setOldPrice_19()  throws Throwable  {
      //caseID:4e899d44e0281f7eb5b1dda658043ee3
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: , price=
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setOldPrice
      goodsDetailResult0.setOldPrice(", price=");
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getVideoScale());
  }

  @Test(timeout = 9000)
  public void test_setPreSale_20()  throws Throwable  {
      //caseID:0eadf487122630e7408c5fc04b8e457b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_boolean: false
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setPreSale
      goodsDetailResult0.setPreSale(false);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setPrice_21()  throws Throwable  {
      //caseID:c0633cd69dec95468c11dc56ecedd8e8
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: com.nbcb.entity.GoodsDetailResult
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setPrice
      goodsDetailResult0.setPrice("com.nbcb.entity.GoodsDetailResult");
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getId());
  }

  @Test(timeout = 9000)
  public void test_setRecommends_22()  throws Throwable  {
      //caseID:bf4be8a35b04b708ef88935e5c890f03
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: category0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      Category category0 = new Category();
      
      //Call method: setRecommends
      goodsDetailResult0.setRecommends(category0);
      
      //Test Result Assert
      assertFalse(goodsDetailResult0.isPreSale());
  }

  @Test(timeout = 9000)
  public void test_setSalesCount_23()  throws Throwable  {
      //caseID:164e88a20e31132fdfa8593c59d6273e
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setSalesCount
      goodsDetailResult0.setSalesCount(0L);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getCommentCount());
  }

  @Test(timeout = 9000)
  public void test_setSimilarProducts_24()  throws Throwable  {
      //caseID:a2601275fd9a51b2b1c9f53da8bbc919
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<SimilarProduct>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<SimilarProduct> linkedList0 = new LinkedList<SimilarProduct>();
      
      //Call method: setSimilarProducts
      goodsDetailResult0.setSimilarProducts(linkedList0);
      
      //Test Result Assert
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 9000)
  public void test_setSkus_25()  throws Throwable  {
      //caseID:a8505dba86cad2bd5fc204e4d4382d8e
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<Skus>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<Skus> linkedList0 = new LinkedList<Skus>();
      
      //Call method: setSkus
      goodsDetailResult0.setSkus(linkedList0);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_setSpecs_26()  throws Throwable  {
      //caseID:3a731e9529dec1d231733cd8a81e9069
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<ResultSpec>: linkedList0
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      LinkedList<ResultSpec> linkedList0 = new LinkedList<ResultSpec>();
      
      //Call method: setSpecs
      goodsDetailResult0.setSpecs(linkedList0);
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setSpuCode_27()  throws Throwable  {
      //caseID:3f44ae1c6297192073fa6bf16aabb92e
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: null or too small array, need between 2 and 8 values
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setSpuCode
      goodsDetailResult0.setSpuCode("null or too small array, need between 2 and 8 values");
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getId());
  }

  @Test(timeout = 9000)
  public void test_setUserAddresses_28()  throws Throwable  {
      //caseID:3a6d2cf68957ac2d2bf95e3b87375932
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: key
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setUserAddresses
      goodsDetailResult0.setUserAddresses("key");
      
      //Test Result Assert
      assertEquals(0L, goodsDetailResult0.getSalesCount());
  }

  @Test(timeout = 9000)
  public void test_setVideoScale_29()  throws Throwable  {
      //caseID:311fad01b6719bb09e69bcbf29b2d76a
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 2129
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: setVideoScale
      goodsDetailResult0.setVideoScale(2129L);
      
      //Test Result Assert
      assertNull(goodsDetailResult0.getName());
  }

  @Test(timeout = 9000)
  public void test_toString_30()  throws Throwable  {
      //caseID:7c813a85bddd350ef98bdb9b4c5eb4fc
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]
      //Assert: assertEquals("GoodsDetailResult(brand=null, categories=null, collectCount=0, commentCount=0, desc=null, details=null, discount=0, evaluationInfo=null, hotByDay=null, id=null, inventory=0, isCollect=null, isPreSale=false, mainPictures=null, mainVideos=null, name=null, oldPrice=null, price=null, recommends=null, salesCount=0, similarProducts=null, skus=null, specs=null, spuCode=null, userAddresses=null, videoScale=0)", method_result);
      
      GoodsDetailResult goodsDetailResult0 = new GoodsDetailResult();
      
      //Call method: toString
      String string0 = goodsDetailResult0.toString();
      
      //Test Result Assert
      assertEquals("GoodsDetailResult(brand=null, categories=null, collectCount=0, commentCount=0, desc=null, details=null, discount=0, evaluationInfo=null, hotByDay=null, id=null, inventory=0, isCollect=null, isPreSale=false, mainPictures=null, mainVideos=null, name=null, oldPrice=null, price=null, recommends=null, salesCount=0, similarProducts=null, skus=null, specs=null, spuCode=null, userAddresses=null, videoScale=0)", string0);
  }
}
