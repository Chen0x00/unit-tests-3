/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.LoginResponse;
import com.nbcb.entity.LoginResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class LoginResponse_SSTest extends LoginResponse_SSTest_scaffolding {
// allCoveredLines:[6, 11, 15, 19]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:72e770cebe28d059385034a418b346d2
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: Czk$_hm]}f$fkI9geT
      //Assert: assertFalse(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals("Czk$_hm]}f$fkI9geT");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:7f9b17d52b2b2ad37a2fc66d59feb038
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:2750742f16be204f7335f5171552faa6
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse1.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:9a0f89f86551d5f2b541ec9eec435383
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse1
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:113b6d3d6d5597acded320a4a040d75a
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: hashCode
      loginResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:b9a14428d2275b51bc8f729a1b31c430
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: 1.0
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setCode
      loginResponse0.setCode("1.0");
      
      //Test Result Assert
      assertNull(loginResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:d3132ded02a73a0df1885647282b19b9
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: W4_\"nM8lYw&;s/#t
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setMsg
      loginResponse0.setMsg("W4_\"nM8lYw&;s/#t");
      
      //Test Result Assert
      assertNull(loginResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:6d70a5ae8bf9731537d4a475788ec2fc
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_LoginResult: {}
      
      LoginResponse loginResponse0 = new LoginResponse();
      //mock loginResult0
      LoginResult loginResult0 = mock(LoginResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      loginResponse0.setResult(loginResult0);
      
      //Test Result Assert
      assertNull(loginResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:cea58c052838c4e62e0f04163f31dccc
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Assert: assertEquals("LoginResponse(code=null, msg=null, result=null)", method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: toString
      String string0 = loginResponse0.toString();
      
      //Test Result Assert
      assertEquals("LoginResponse(code=null, msg=null, result=null)", string0);
  }
}
