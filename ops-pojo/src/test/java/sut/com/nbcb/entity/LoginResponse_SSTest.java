/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.LoginResponse;
import com.nbcb.entity.LoginResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class LoginResponse_SSTest extends LoginResponse_SSTest_scaffolding {
// allCoveredLines:[6, 11, 15, 19]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:8a680648c3d0999a98fc77ae7030b893
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:f8dc247671115456765ca744d2242d1d
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: , gender=
      //Assert: assertFalse(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(", gender=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:b3cc55f5a9148e93f654806773ab0159
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse1.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:dd08c420e659473b1344ef69fd710c17
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse1
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:e2e678a4ed40a47950bd3d27d09f84e9
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: hashCode
      loginResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:6cd7c80a1a1360dc4e4281be6eeb5611
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: , nickname=
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setCode
      loginResponse0.setCode(", nickname=");
      
      //Test Result Assert
      assertNull(loginResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:09cc87088e3c59c5b50834c85a8d37a9
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: 43
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setMsg
      loginResponse0.setMsg("43");
      
      //Test Result Assert
      assertEquals("43", loginResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:634d71eadcd05757fdef993e63b13e46
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_LoginResult: {}
      
      LoginResponse loginResponse0 = new LoginResponse();
      //mock loginResult0
      LoginResult loginResult0 = mock(LoginResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      loginResponse0.setResult(loginResult0);
      
      //Test Result Assert
      assertNull(loginResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:f5c063a3765961b50b9d22f43242fc51
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Assert: assertEquals("LoginResponse(code=null, msg=null, result=null)", method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: toString
      String string0 = loginResponse0.toString();
      
      //Test Result Assert
      assertEquals("LoginResponse(code=null, msg=null, result=null)", string0);
  }
}
