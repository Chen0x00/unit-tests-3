/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.LoginResponse;
import com.nbcb.entity.LoginResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class LoginResponse_SSTest extends LoginResponse_SSTest_scaffolding {
// allCoveredLines:[6, 11, 15, 19]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:a40417236b1c2f37ea449b9494cb972e
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:684f6936a425236f2d649c87a2cbdb52
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: , profession=
      //Assert: assertFalse(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(", profession=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:7aebc67b3bb4ddfd50fc63e4e9c08d21
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse0
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse1.equals(loginResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:665c13a57755f03e9bf6504a277ad7fd
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: loginResponse1
      //Assert: assertTrue(method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      
      //Call method: equals
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:df2bf1089739b6d0ebb2381ef298804d
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: hashCode
      loginResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:ecb81236b0330aa54688d704c1014aee
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: V,=<m\"14/h|$@\"R5@Z
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setCode
      loginResponse0.setCode("V,=<m\"14/h|$@\"R5@Z");
      
      //Test Result Assert
      assertEquals("V,=<m\"14/h|$@\"R5@Z", loginResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:2adc335d628e1e8e8b9b93f31e3f3031
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: G:Y;6
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: setMsg
      loginResponse0.setMsg("G:Y;6");
      
      //Test Result Assert
      assertNull(loginResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:d5307ebf02a951d61596ffd444965abb
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_LoginResult: {}
      
      LoginResponse loginResponse0 = new LoginResponse();
      //mock loginResult0
      LoginResult loginResult0 = mock(LoginResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      loginResponse0.setResult(loginResult0);
      
      //Test Result Assert
      assertNull(loginResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:85f5cf36489a3aced70b6b02d76b8668
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Assert: assertEquals("LoginResponse(code=null, msg=null, result=null)", method_result);
      
      LoginResponse loginResponse0 = new LoginResponse();
      
      //Call method: toString
      String string0 = loginResponse0.toString();
      
      //Test Result Assert
      assertEquals("LoginResponse(code=null, msg=null, result=null)", string0);
  }
}
