/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.OrderPreResponse;
import com.nbcb.entity.OrderPreResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderPreResponse_SSTest extends OrderPreResponse_SSTest_scaffolding {
// allCoveredLines:[5, 10, 14, 18]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:5c7e8251c11f354fd5eec86cb7e3aa5a
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: orderPreResponse0
      //Assert: assertTrue(method_result);
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: equals
      boolean boolean0 = orderPreResponse0.equals(orderPreResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:3ce54fd166f6c9c57e4bddb9541058a7
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: 1
      //Assert: assertFalse(method_result);
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: equals
      boolean boolean0 = orderPreResponse0.equals("1");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:7bd58a4346bb85570c2302a27b2173e8
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18]
      //Input_0_Object: orderPreResponse0
      //Assert: assertTrue(method_result);
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      OrderPreResponse orderPreResponse1 = new OrderPreResponse();
      
      //Call method: equals
      boolean boolean0 = orderPreResponse1.equals(orderPreResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:09d962b7d18ef2ec6845bbf4cbc830dc
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18]
      //Input_0_Object: orderPreResponse1
      //Assert: assertTrue(method_result);
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      OrderPreResponse orderPreResponse1 = new OrderPreResponse();
      
      //Call method: equals
      boolean boolean0 = orderPreResponse0.equals(orderPreResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:0e99025bb1cccb09defddbb4eb296a32
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18]
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: hashCode
      orderPreResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:ae9f813e77c192535bb4726816f8e750
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: reactor.core.publisher.ParallelFlux
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: setCode
      orderPreResponse0.setCode("reactor.core.publisher.ParallelFlux");
      
      //Test Result Assert
      assertNull(orderPreResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:5724db4b41d7572f12cf9130d02dbf2d
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: >kZ#*K^=
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: setMsg
      orderPreResponse0.setMsg(">kZ#*K^=");
      
      //Test Result Assert
      assertEquals(">kZ#*K^=", orderPreResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:759cc43e446f07cc8c91fb2335563b11
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_OrderPreResult: {}
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      //mock orderPreResult0
      OrderPreResult orderPreResult0 = mock(OrderPreResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      orderPreResponse0.setResult(orderPreResult0);
      
      //Test Result Assert
      assertNull(orderPreResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:3f6fb83f1f1bad89da4bf4a156f42bbf
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18]
      //Assert: assertEquals("OrderPreResponse(code=null, msg=null, result=null)", method_result);
      
      OrderPreResponse orderPreResponse0 = new OrderPreResponse();
      
      //Call method: toString
      String string0 = orderPreResponse0.toString();
      
      //Test Result Assert
      assertEquals("OrderPreResponse(code=null, msg=null, result=null)", string0);
  }
}
