/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.OrderPreResult;
import com.nbcb.entity.Summary;
import com.nbcb.entity.UserAddress;
import com.nbcb.pojo.ShopGoods;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderPreResult_SSTest extends OrderPreResult_SSTest_scaffolding {
// allCoveredLines:[10, 15, 19, 23]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:01993e79986e0308e1592f6a63a60b1f
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10]
      //Input_0_Object: orderPreResult0
      //Assert: assertTrue(method_result);
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      
      //Call method: equals
      boolean boolean0 = orderPreResult0.equals(orderPreResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:61479fb25b82f2420cc524c731502cc3
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10]
      //Input_0_Object: |-@
      //Assert: assertFalse(method_result);
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      
      //Call method: equals
      boolean boolean0 = orderPreResult0.equals("|-@");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:9c8a01b274331516ac59e042f74c37a7
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10, 15, 19, 23]
      //Input_0_Object: orderPreResult0
      //Assert: assertTrue(method_result);
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      OrderPreResult orderPreResult1 = new OrderPreResult();
      
      //Call method: equals
      boolean boolean0 = orderPreResult1.equals(orderPreResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:afbe747a509a19482fde1a7616d53c98
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10, 15, 19, 23]
      //Input_0_Object: orderPreResult1
      //Assert: assertTrue(method_result);
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      OrderPreResult orderPreResult1 = new OrderPreResult();
      
      //Call method: equals
      boolean boolean0 = orderPreResult0.equals(orderPreResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:cfded2f5f4af6f1a1c744587765853f3
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10, 15, 19, 23]
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      
      //Call method: hashCode
      orderPreResult0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setGoods_5()  throws Throwable  {
      //caseID:ad821366a716d2e0338c8b86f9795e2d
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10]
      //Input_0_ShopGoods: {}
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      //mock shopGoods0
      ShopGoods shopGoods0 = mock(ShopGoods.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setGoods
      orderPreResult0.setGoods(shopGoods0);
  }

  @Test(timeout = 9000)
  public void test_setSummary_6()  throws Throwable  {
      //caseID:a9d060e7c410bd9a183039d3154421cd
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10]
      //Input_0_Summary: {}
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      //mock summary0
      Summary summary0 = mock(Summary.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setSummary
      orderPreResult0.setSummary(summary0);
  }

  @Test(timeout = 9000)
  public void test_setUserAddress_7()  throws Throwable  {
      //caseID:4293bcfd5b01cb0187d538e4def155e8
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10]
      //Input_0_UserAddress: {}
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      //mock userAddress0
      UserAddress userAddress0 = mock(UserAddress.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setUserAddress
      orderPreResult0.setUserAddress(userAddress0);
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:d592d1b9278d44173d142aadc4c50305
      //CoveredLines: [10, 10, 10, 10, 10, 10, 10, 10, 15, 19, 23]
      //Assert: assertEquals("OrderPreResult(goods=null, summary=null, userAddress=null)", method_result);
      
      OrderPreResult orderPreResult0 = new OrderPreResult();
      
      //Call method: toString
      String string0 = orderPreResult0.toString();
      
      //Test Result Assert
      assertEquals("OrderPreResult(goods=null, summary=null, userAddress=null)", string0);
  }
}
