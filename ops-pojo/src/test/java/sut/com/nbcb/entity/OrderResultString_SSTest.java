/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.OrderResultString;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class OrderResultString_SSTest extends OrderResultString_SSTest_scaffolding {
// allCoveredLines:[7, 9, 10, 11, 12, 13]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:e0c7f4a37c890066f5245892eb765712
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: BigDecimal.ONE
      //Assert: assertFalse(method_result);
      
      OrderResultString orderResultString0 = new OrderResultString();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: equals
      boolean boolean0 = orderResultString0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:9db4a1eef1914dbc541cc4de50e6f8a6
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: orderResultString0
      //Assert: assertTrue(method_result);
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: equals
      boolean boolean0 = orderResultString0.equals(orderResultString0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:0c27e3435d90d2810f72f3af6537920b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12, 13]
      //Input_0_Object: orderResultString0
      //Assert: assertTrue(method_result);
      
      OrderResultString orderResultString0 = new OrderResultString();
      OrderResultString orderResultString1 = new OrderResultString();
      
      //Call method: equals
      boolean boolean0 = orderResultString1.equals(orderResultString0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:fe7267a76bd246f848b4e94e70d6924b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12, 13]
      //Input_0_Object: orderResultString1
      //Assert: assertTrue(method_result);
      
      OrderResultString orderResultString0 = new OrderResultString();
      OrderResultString orderResultString1 = new OrderResultString();
      
      //Call method: equals
      boolean boolean0 = orderResultString0.equals(orderResultString1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:e8102fedc206a505b440a32d7bf1d319
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12, 13]
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: hashCode
      orderResultString0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setMessage_05()  throws Throwable  {
      //caseID:92fe2e7307592ec4d1e69a63167f807b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: setMessage
      orderResultString0.setMessage("");
      
      //Test Result Assert
      assertNull(orderResultString0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_06()  throws Throwable  {
      //caseID:2cdf7b5e614d0baf38df38468f4e9121
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: \"2$)6jxP1#'W8=X@3f
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: setOrderId
      orderResultString0.setOrderId("\"2$)6jxP1#'W8=X@3f");
      
      //Test Result Assert
      assertNull(orderResultString0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_07()  throws Throwable  {
      //caseID:791a65482eb0c990e330e31b1a23e5fc
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      OrderResultString orderResultString0 = new OrderResultString();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setPayAmount
      orderResultString0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(orderResultString0.getStatus());
  }

  @Test(timeout = 9000)
  public void test_setSourceCode_08()  throws Throwable  {
      //caseID:2eda2e335abd718e70094d07e47b1fd2
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: setSourceCode
      orderResultString0.setSourceCode("");
      
      //Test Result Assert
      assertEquals("", orderResultString0.getSourceCode());
  }

  @Test(timeout = 9000)
  public void test_setStatus_09()  throws Throwable  {
      //caseID:7e6203e6716fb47653e8c06f41f74700
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Boolean: Boolean.FALSE
      
      OrderResultString orderResultString0 = new OrderResultString();
      Boolean boolean0 = Boolean.FALSE;
      
      //Call method: setStatus
      orderResultString0.setStatus(boolean0);
      
      //Test Result Assert
      assertNull(orderResultString0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_toString_10()  throws Throwable  {
      //caseID:831eeac247f94eea9ac9ae49b40eda6d
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12, 13]
      //Assert: assertEquals("OrderResultString(message=null, orderId=null, status=null, payAmount=null, sourceCode=null)", method_result);
      
      OrderResultString orderResultString0 = new OrderResultString();
      
      //Call method: toString
      String string0 = orderResultString0.toString();
      
      //Test Result Assert
      assertEquals("OrderResultString(message=null, orderId=null, status=null, payAmount=null, sourceCode=null)", string0);
  }
}
