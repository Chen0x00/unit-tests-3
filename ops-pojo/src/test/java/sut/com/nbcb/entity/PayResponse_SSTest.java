/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.PayResponse;
import com.nbcb.entity.PayStringResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayResponse_SSTest extends PayResponse_SSTest_scaffolding {
// allCoveredLines:[6, 11, 15, 19]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:d40789f7024d8662133b630fe227712c
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: {uFt
      //Assert: assertFalse(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals("{uFt");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:3bc7da12154310b0d50de55469368ace
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: payResponse0
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals(payResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:0773f5a12d0df95227ad30a46e331302
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: payResponse0
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      PayResponse payResponse1 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse1.equals(payResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:92d31fa3bc9b6e02b6c8a5c9e9a5a376
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: payResponse1
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      PayResponse payResponse1 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals(payResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:73065040e6d30278553293859644003b
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: hashCode
      payResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:ab5bbba29cfdc7fd7ae2f953adfbcaa6
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: )uRdh,F-7Ex
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: setCode
      payResponse0.setCode(")uRdh,F-7Ex");
      
      //Test Result Assert
      assertNull(payResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:ae01b00de900f6b01aa6b646d1a814d6
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: 9
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: setMsg
      payResponse0.setMsg("9");
      
      //Test Result Assert
      assertEquals("9", payResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:5ec2ded8306a6c98698ed03a94e970e4
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_PayStringResult: {}
      
      PayResponse payResponse0 = new PayResponse();
      //mock payStringResult0
      PayStringResult payStringResult0 = mock(PayStringResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      payResponse0.setResult(payStringResult0);
      
      //Test Result Assert
      assertNull(payResponse0.getCode());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:c15778cd33ea83f95400dbb135efbeb5
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Assert: assertEquals("PayResponse(code=null, msg=null, result=null)", method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: toString
      String string0 = payResponse0.toString();
      
      //Test Result Assert
      assertEquals("PayResponse(code=null, msg=null, result=null)", string0);
  }
}
