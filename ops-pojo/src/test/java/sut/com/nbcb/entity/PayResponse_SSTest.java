/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.entity.PayResponse;
import com.nbcb.entity.PayStringResult;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayResponse_SSTest extends PayResponse_SSTest_scaffolding {
// allCoveredLines:[6, 11, 15, 19]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:43848b48ee527fbdada946fd912ffcf5
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: R
      //Assert: assertFalse(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals("R");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:190d2825915e4f80f6c95f0029194c62
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_Object: payResponse0
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals(payResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:61c836274e54d6d2448ec3f994819b58
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: payResponse0
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      PayResponse payResponse1 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse1.equals(payResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:23cbe6e5e6f6a802c8ccf557b7e05334
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Input_0_Object: payResponse1
      //Assert: assertTrue(method_result);
      
      PayResponse payResponse0 = new PayResponse();
      PayResponse payResponse1 = new PayResponse();
      
      //Call method: equals
      boolean boolean0 = payResponse0.equals(payResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:7edfab42ea624da185e3c83d98135ccf
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: hashCode
      payResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:340f59ddac7e79a5e7b06ac1220c053b
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: com.nbcb.entity.PayResponse
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: setCode
      payResponse0.setCode("com.nbcb.entity.PayResponse");
      
      //Test Result Assert
      assertNull(payResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:ef7b3620494343f4ffc917c9877f5ab5
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_String: , msg=
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: setMsg
      payResponse0.setMsg(", msg=");
      
      //Test Result Assert
      assertEquals(", msg=", payResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_setResult_7()  throws Throwable  {
      //caseID:a0ca857999d2fe7719ae0e1f973fda08
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6]
      //Input_0_PayStringResult: {}
      
      PayResponse payResponse0 = new PayResponse();
      //mock payStringResult0
      PayStringResult payStringResult0 = mock(PayStringResult.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setResult
      payResponse0.setResult(payStringResult0);
      
      //Test Result Assert
      assertNull(payResponse0.getMsg());
  }

  @Test(timeout = 9000)
  public void test_toString_8()  throws Throwable  {
      //caseID:8ed1d0db15c1b45cd8e83d93f6989dd9
      //CoveredLines: [6, 6, 6, 6, 6, 6, 6, 6, 11, 15, 19]
      //Assert: assertEquals("PayResponse(code=null, msg=null, result=null)", method_result);
      
      PayResponse payResponse0 = new PayResponse();
      
      //Call method: toString
      String string0 = payResponse0.toString();
      
      //Test Result Assert
      assertEquals("PayResponse(code=null, msg=null, result=null)", string0);
  }
}
