/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.PayStringResult;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayStringResult_SSTest extends PayStringResult_SSTest_scaffolding {
// allCoveredLines:[8, 10, 12, 14, 16]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:966398fdc6f9d12bc94934e3a6005efa
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: payStringResult0
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals(payStringResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:fb346fcfaf177b7a00166062c1fba39c
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: |Bq\"#qSpn
      //Assert: assertFalse(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals("|Bq\"#qSpn");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:c54565afaeddbce1036234db007d913a
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: payStringResult0
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      PayStringResult payStringResult1 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult1.equals(payStringResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:ca7565fe80be2b3b96bb2b525a750621
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: payStringResult1
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      PayStringResult payStringResult1 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals(payStringResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:47663651a16d62ecfba290cbd01341e4
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: hashCode
      payStringResult0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setIsPaid_5()  throws Throwable  {
      //caseID:0867d7001cd57952566a6f30d4926325
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: 0
      
      PayStringResult payStringResult0 = new PayStringResult();
      Integer integer0 = new Integer(0);
      
      //Call method: setIsPaid
      payStringResult0.setIsPaid(integer0);
      
      //Test Result Assert
      assertEquals(0, (int)payStringResult0.getIsPaid());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_6()  throws Throwable  {
      //caseID:6d753246b0b0670d1e7f0d57fcbde48d
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: )
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: setOrderId
      payStringResult0.setOrderId(")");
      
      //Test Result Assert
      assertEquals(")", payStringResult0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_7()  throws Throwable  {
      //caseID:2e2053e3117eddbf8a945bb630c7daee
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      PayStringResult payStringResult0 = new PayStringResult();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setPayAmount
      payStringResult0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_setPayId_8()  throws Throwable  {
      //caseID:dc785e93a27900aba35afbed03821156
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 1
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: setPayId
      payStringResult0.setPayId("1");
      
      //Test Result Assert
      assertNull(payStringResult0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:648791ad2b8f4d3c0b0918281518e437
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Assert: assertEquals("PayStringResult(payId=null, orderId=null, payAmount=null, isPaid=null)", method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: toString
      String string0 = payStringResult0.toString();
      
      //Test Result Assert
      assertEquals("PayStringResult(payId=null, orderId=null, payAmount=null, isPaid=null)", string0);
  }
}
