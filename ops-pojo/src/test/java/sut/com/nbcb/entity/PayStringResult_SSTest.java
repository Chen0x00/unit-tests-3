/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.PayStringResult;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class PayStringResult_SSTest extends PayStringResult_SSTest_scaffolding {
// allCoveredLines:[8, 10, 12, 14, 16]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:da7f98a458ecab60a752fad05b6de9b5
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: payStringResult0
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals(payStringResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:2129c9ad97366dfec8fc04805035e6bf
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      Integer integer0 = new Integer(0);
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:681db972d25f697b3c51926914a3c97f
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: payStringResult0
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      PayStringResult payStringResult1 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult1.equals(payStringResult0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:0989e75e3227c9135cceade4b1ca52d7
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: payStringResult1
      //Assert: assertTrue(method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      PayStringResult payStringResult1 = new PayStringResult();
      
      //Call method: equals
      boolean boolean0 = payStringResult0.equals(payStringResult1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:d78701ead6a2121da4d8026e53e17fe6
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: hashCode
      payStringResult0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setIsPaid_5()  throws Throwable  {
      //caseID:59c40c86bab158e97118957557dd664d
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: 1157
      
      PayStringResult payStringResult0 = new PayStringResult();
      Integer integer0 = new Integer(1157);
      
      //Call method: setIsPaid
      payStringResult0.setIsPaid(integer0);
      
      //Test Result Assert
      assertEquals(1157, (int)payStringResult0.getIsPaid());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_6()  throws Throwable  {
      //caseID:597708115c415063b39608d58af1c37a
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: , isPaid=
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: setOrderId
      payStringResult0.setOrderId(", isPaid=");
      
      //Test Result Assert
      assertNull(payStringResult0.getPayId());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_7()  throws Throwable  {
      //caseID:ce94e0cc765fdda9effba4968dfd3cfc
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      PayStringResult payStringResult0 = new PayStringResult();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setPayAmount
      payStringResult0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(payStringResult0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setPayId_8()  throws Throwable  {
      //caseID:b1daec6f474eb9a51443e831f22a4644
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 1
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: setPayId
      payStringResult0.setPayId("1");
      
      //Test Result Assert
      assertEquals("1", payStringResult0.getPayId());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:02131ce55a9aba5b5a1a95bac4cc0977
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Assert: assertEquals("PayStringResult(payId=null, orderId=null, payAmount=null, isPaid=null)", method_result);
      
      PayStringResult payStringResult0 = new PayStringResult();
      
      //Call method: toString
      String string0 = payStringResult0.toString();
      
      //Test Result Assert
      assertEquals("PayStringResult(payId=null, orderId=null, payAmount=null, isPaid=null)", string0);
  }
}
