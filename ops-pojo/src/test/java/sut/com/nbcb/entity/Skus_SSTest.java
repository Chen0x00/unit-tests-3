/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.Skus;
import com.nbcb.entity.SkusSpec;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Skus_SSTest extends Skus_SSTest_scaffolding {
// allCoveredLines:[7, 12, 16, 20, 24, 28, 32]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:14a10c08e245b959d74015f726ebb032
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: skus0
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals(skus0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:ac0444030f8f70a4331628c01a71796c
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: Cannot determine a partition for slot 
      //Assert: assertFalse(method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals("Cannot determine a partition for slot ");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:31b529c648373b1e65344a67ec0da13f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Input_0_Object: skus1
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      Skus skus1 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals(skus1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:dce6455717a76a4c691d44fc06cd00f9
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Input_0_Object: skus0
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      Skus skus1 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus1.equals(skus0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:c98d3fc3cdde8f22b9783855e5d9a048
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      
      Skus skus0 = new Skus();
      
      //Call method: hashCode
      skus0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setId_05()  throws Throwable  {
      //caseID:84f24f79edb28afc1ceac64260ed1fb1
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      Skus skus0 = new Skus();
      
      //Call method: setId
      skus0.setId("");
      
      //Test Result Assert
      assertEquals("", skus0.getId());
  }

  @Test(timeout = 9000)
  public void test_setInventory_06()  throws Throwable  {
      //caseID:c209260220c51eeb8f5a58d0b82f2940
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      Skus skus0 = new Skus();
      
      //Call method: setInventory
      skus0.setInventory(0L);
      
      //Test Result Assert
      assertNull(skus0.getId());
  }

  @Test(timeout = 9000)
  public void test_setOldPrice_07()  throws Throwable  {
      //caseID:0a2a4cb1d1e4ea190bc05c52909cb878
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      Skus skus0 = new Skus();
      
      //Call method: setOldPrice
      skus0.setOldPrice("");
      
      //Test Result Assert
      assertEquals(0L, skus0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setPrice_08()  throws Throwable  {
      //caseID:8f0bfe361155b3529abcbac9ea827f91
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1SingleToObservableAdapter
      
      Skus skus0 = new Skus();
      
      //Call method: setPrice
      skus0.setPrice("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1SingleToObservableAdapter");
      
      //Test Result Assert
      assertNull(skus0.getOldPrice());
  }

  @Test(timeout = 9000)
  public void test_setSkuCode_09()  throws Throwable  {
      //caseID:f695bf3ad8fdc4d3e1d33829aa560ecf
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: *q.!d;h.;U.*
      
      Skus skus0 = new Skus();
      
      //Call method: setSkuCode
      skus0.setSkuCode("*q.!d;h.;U.*");
      
      //Test Result Assert
      assertNull(skus0.getId());
  }

  @Test(timeout = 9000)
  public void test_setSpecs_10()  throws Throwable  {
      //caseID:65f3aee88de3bae50f24d320c23b67de
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<SkusSpec>: linkedList0
      
      Skus skus0 = new Skus();
      LinkedList<SkusSpec> linkedList0 = new LinkedList<SkusSpec>();
      
      //Call method: setSpecs
      skus0.setSpecs(linkedList0);
      
      //Test Result Assert
      assertNull(skus0.getId());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:7f0270fe7828966e687ea2bb1338a4f3
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Assert: assertEquals("Skus(id=null, inventory=0, oldPrice=null, price=null, skuCode=null, specs=null)", method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: toString
      String string0 = skus0.toString();
      
      //Test Result Assert
      assertEquals("Skus(id=null, inventory=0, oldPrice=null, price=null, skuCode=null, specs=null)", string0);
  }
}
