/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.Skus;
import com.nbcb.entity.SkusSpec;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class Skus_SSTest extends Skus_SSTest_scaffolding {
// allCoveredLines:[7, 12, 16, 20, 24, 28, 32]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:51174780e82c6781c2182fc42f9fa97a
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: , specs=
      //Assert: assertFalse(method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals(", specs=");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:15418b60c594e5db61a90ddffd9ed2ee
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: skus0
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals(skus0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:9999ac6ca2a3351a61652351c973ce9b
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Input_0_Object: skus0
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      Skus skus1 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus1.equals(skus0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:0f4844ae63a7fdb757d9eb4476201768
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Input_0_Object: skus1
      //Assert: assertTrue(method_result);
      
      Skus skus0 = new Skus();
      Skus skus1 = new Skus();
      
      //Call method: equals
      boolean boolean0 = skus0.equals(skus1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:a62b8850ce8d64a9575028f34789cceb
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      
      Skus skus0 = new Skus();
      
      //Call method: hashCode
      skus0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setId_05()  throws Throwable  {
      //caseID:03ca1bd108fd93b50ced4f8ad8f9fc6a
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      Skus skus0 = new Skus();
      
      //Call method: setId
      skus0.setId("");
      
      //Test Result Assert
      assertNull(skus0.getSkuCode());
  }

  @Test(timeout = 9000)
  public void test_setInventory_06()  throws Throwable  {
      //caseID:c5eaf1524959bb4419710ce2c7f81cab
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_long: 0
      
      Skus skus0 = new Skus();
      
      //Call method: setInventory
      skus0.setInventory(0L);
      
      //Test Result Assert
      assertEquals(0L, skus0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setOldPrice_07()  throws Throwable  {
      //caseID:4fd756d9eb3e0850b0f6451f9f69295c
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: knY]@hzl6vFpy
      
      Skus skus0 = new Skus();
      
      //Call method: setOldPrice
      skus0.setOldPrice("knY]@hzl6vFpy");
      
      //Test Result Assert
      assertEquals("knY]@hzl6vFpy", skus0.getOldPrice());
  }

  @Test(timeout = 9000)
  public void test_setPrice_08()  throws Throwable  {
      //caseID:7d118b08ec398071c8b10f410d49c5a8
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 
      
      Skus skus0 = new Skus();
      
      //Call method: setPrice
      skus0.setPrice("");
      
      //Test Result Assert
      assertEquals(0L, skus0.getInventory());
  }

  @Test(timeout = 9000)
  public void test_setSkuCode_09()  throws Throwable  {
      //caseID:f7bb0fb72eb860cab63400bcce17870f
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: reactor.util.function.Tuples
      
      Skus skus0 = new Skus();
      
      //Call method: setSkuCode
      skus0.setSkuCode("reactor.util.function.Tuples");
      
      //Test Result Assert
      assertNull(skus0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_setSpecs_10()  throws Throwable  {
      //caseID:5e95559671ca7e22c503114faecd44e7
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<SkusSpec>: linkedList0
      
      Skus skus0 = new Skus();
      LinkedList<SkusSpec> linkedList0 = new LinkedList<SkusSpec>();
      
      //Call method: setSpecs
      skus0.setSpecs(linkedList0);
      
      //Test Result Assert
      assertNull(skus0.getPrice());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:5c8877dbb58dcf21a314ab7e2e430035
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 16, 20, 24, 28, 32]
      //Assert: assertEquals("Skus(id=null, inventory=0, oldPrice=null, price=null, skuCode=null, specs=null)", method_result);
      
      Skus skus0 = new Skus();
      
      //Call method: toString
      String string0 = skus0.toString();
      
      //Test Result Assert
      assertEquals("Skus(id=null, inventory=0, oldPrice=null, price=null, skuCode=null, specs=null)", string0);
  }
}
