/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.UserAddress;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserAddress_SSTest extends UserAddress_SSTest_scaffolding {
// allCoveredLines:[3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:953cbe0138aa25598e86490dd59577be
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: 1.0
      //Assert: assertFalse(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals("1.0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:b321065c8a1ee670959598ae75f2f494
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: userAddress0
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals(userAddress0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:6bf7c37cf4c95332537e02dcced2846a
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Input_0_Object: userAddress0
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      UserAddress userAddress1 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress1.equals(userAddress0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:04dfecaebc5c6744eb007deb1705efbc
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Input_0_Object: userAddress1
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      UserAddress userAddress1 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals(userAddress1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:9189b3fc74203ce07570dd48ecc96c45
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: hashCode
      userAddress0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddress_05()  throws Throwable  {
      //caseID:6069e31ae39d42d2929ecb1283b5bec7
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setAddress
      userAddress0.setAddress("");
      
      //Test Result Assert
      assertNull(userAddress0.getPostalCode());
  }

  @Test(timeout = 9000)
  public void test_setAddressTags_06()  throws Throwable  {
      //caseID:e31d1104efe6e6dfa74969ff771e0e15
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 3qM-`8E?d&sFP^MX
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setAddressTags
      userAddress0.setAddressTags("3qM-`8E?d&sFP^MX");
      
      //Test Result Assert
      assertNull(userAddress0.getProvinceCode());
  }

  @Test(timeout = 9000)
  public void test_setCityCode_07()  throws Throwable  {
      //caseID:0d9c6874f6d780a605e3970b00ae6877
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: W}D$
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setCityCode
      userAddress0.setCityCode("W}D$");
      
      //Test Result Assert
      assertNull(userAddress0.getReceiver());
  }

  @Test(timeout = 9000)
  public void test_setContact_08()  throws Throwable  {
      //caseID:12d43328d035ef842569afb43c1d25fd
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setContact
      userAddress0.setContact("");
      
      //Test Result Assert
      assertNull(userAddress0.getCityCode());
  }

  @Test(timeout = 9000)
  public void test_setCountyCode_09()  throws Throwable  {
      //caseID:f3d1d66c3a2086861ffd527d9543583b
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 59
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setCountyCode
      userAddress0.setCountyCode("59");
      
      //Test Result Assert
      assertNull(userAddress0.getCityCode());
  }

  @Test(timeout = 9000)
  public void test_setFullLocation_10()  throws Throwable  {
      //caseID:e0fa32ddef89b6bbda973211a601f1b8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , contact=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setFullLocation
      userAddress0.setFullLocation(", contact=");
      
      //Test Result Assert
      assertNull(userAddress0.getId());
  }

  @Test(timeout = 9000)
  public void test_setId_11()  throws Throwable  {
      //caseID:4572939417149af7c21233fdff87b895
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , addressTags=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setId
      userAddress0.setId(", addressTags=");
      
      //Test Result Assert
      assertNull(userAddress0.getCountyCode());
  }

  @Test(timeout = 9000)
  public void test_setIsDefault_12()  throws Throwable  {
      //caseID:cc15984e86d75ce5381f49b93dbbec7d
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_long: 0
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setIsDefault
      userAddress0.setIsDefault(0L);
      
      //Test Result Assert
      assertNull(userAddress0.getAddressTags());
  }

  @Test(timeout = 9000)
  public void test_setPostalCode_13()  throws Throwable  {
      //caseID:7572e43346f2080e2b4a92afa8d285e8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , addressTags=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setPostalCode
      userAddress0.setPostalCode(", addressTags=");
      
      //Test Result Assert
      assertEquals(", addressTags=", userAddress0.getPostalCode());
  }

  @Test(timeout = 9000)
  public void test_setProvinceCode_14()  throws Throwable  {
      //caseID:1a8ccbc179b0ef6715f2ec5ab9a7c36e
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , addressTags=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setProvinceCode
      userAddress0.setProvinceCode(", addressTags=");
      
      //Test Result Assert
      assertNull(userAddress0.getId());
  }

  @Test(timeout = 9000)
  public void test_setReceiver_15()  throws Throwable  {
      //caseID:b34e2b8a818c38ba8cf5e0b660b4aa93
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , contact=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setReceiver
      userAddress0.setReceiver(", contact=");
      
      //Test Result Assert
      assertNull(userAddress0.getAddressTags());
  }

  @Test(timeout = 9000)
  public void test_toString_16()  throws Throwable  {
      //caseID:e5a36f6f7a27a088c64f5cb73f648ba4
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Assert: assertEquals("UserAddress(address=null, addressTags=null, cityCode=null, contact=null, countyCode=null, fullLocation=null, id=null, isDefault=0, postalCode=null, provinceCode=null, receiver=null)", method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: toString
      String string0 = userAddress0.toString();
      
      //Test Result Assert
      assertEquals("UserAddress(address=null, addressTags=null, cityCode=null, contact=null, countyCode=null, fullLocation=null, id=null, isDefault=0, postalCode=null, provinceCode=null, receiver=null)", string0);
  }
}
