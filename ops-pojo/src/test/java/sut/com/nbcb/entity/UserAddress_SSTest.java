/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.entity.UserAddress;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserAddress_SSTest extends UserAddress_SSTest_scaffolding {
// allCoveredLines:[3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:f41c7b57c4d8cba18f761011767ae139
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals("0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:2f2fcc92132e0221b7328aa8913b30cf
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_Object: userAddress0
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals(userAddress0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:405e3e9a2c6efcee3fb4d6ebc2200ce2
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Input_0_Object: userAddress0
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      UserAddress userAddress1 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress1.equals(userAddress0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:2da108fa182680552da879704130b76b
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Input_0_Object: userAddress1
      //Assert: assertTrue(method_result);
      
      UserAddress userAddress0 = new UserAddress();
      UserAddress userAddress1 = new UserAddress();
      
      //Call method: equals
      boolean boolean0 = userAddress0.equals(userAddress1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:d7b5dab1b990d31449fc77663e39515d
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: hashCode
      userAddress0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddress_05()  throws Throwable  {
      //caseID:2576a426533738587a90b9c303113be8
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setAddress
      userAddress0.setAddress("");
      
      //Test Result Assert
      assertEquals(0L, userAddress0.getIsDefault());
  }

  @Test(timeout = 9000)
  public void test_setAddressTags_06()  throws Throwable  {
      //caseID:0fd768ae63c7a51df162116d4c66bfa3
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setAddressTags
      userAddress0.setAddressTags("1");
      
      //Test Result Assert
      assertEquals(0L, userAddress0.getIsDefault());
  }

  @Test(timeout = 9000)
  public void test_setCityCode_07()  throws Throwable  {
      //caseID:bd34a1c5882f455e14ba3275bc8734c2
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setCityCode
      userAddress0.setCityCode("1");
      
      //Test Result Assert
      assertEquals(0L, userAddress0.getIsDefault());
  }

  @Test(timeout = 9000)
  public void test_setContact_08()  throws Throwable  {
      //caseID:d8815aa1e028013ba43c7f704c6af020
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 1
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setContact
      userAddress0.setContact("1");
      
      //Test Result Assert
      assertEquals("1", userAddress0.getContact());
  }

  @Test(timeout = 9000)
  public void test_setCountyCode_09()  throws Throwable  {
      //caseID:ca0540437ab8f97c89a26a6258697ff2
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: CP#>
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setCountyCode
      userAddress0.setCountyCode("CP#>");
      
      //Test Result Assert
      assertNull(userAddress0.getId());
  }

  @Test(timeout = 9000)
  public void test_setFullLocation_10()  throws Throwable  {
      //caseID:0fa5024ad2637d18ff73e42f6447c915
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , receiver=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setFullLocation
      userAddress0.setFullLocation(", receiver=");
      
      //Test Result Assert
      assertNull(userAddress0.getId());
  }

  @Test(timeout = 9000)
  public void test_setId_11()  throws Throwable  {
      //caseID:d234d9ec4fa8e63dd34d99bf146fccd6
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: 
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setId
      userAddress0.setId("");
      
      //Test Result Assert
      assertNull(userAddress0.getCountyCode());
  }

  @Test(timeout = 9000)
  public void test_setIsDefault_12()  throws Throwable  {
      //caseID:f39deac5c3bb116a35ae6e8ac957260b
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_long: -4294
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setIsDefault
      userAddress0.setIsDefault((-4294L));
      
      //Test Result Assert
      assertNull(userAddress0.getProvinceCode());
  }

  @Test(timeout = 9000)
  public void test_setPostalCode_13()  throws Throwable  {
      //caseID:62fdaecd331b4040d87ce388617ae3a1
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: , postalCode=
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setPostalCode
      userAddress0.setPostalCode(", postalCode=");
      
      //Test Result Assert
      assertNull(userAddress0.getCountyCode());
  }

  @Test(timeout = 9000)
  public void test_setProvinceCode_14()  throws Throwable  {
      //caseID:17c565dbe7bfe2eff8bfcc00bbf269d0
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: pd_XKv&4pVt0L+HY=pg
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setProvinceCode
      userAddress0.setProvinceCode("pd_XKv&4pVt0L+HY=pg");
      
      //Test Result Assert
      assertNull(userAddress0.getCityCode());
  }

  @Test(timeout = 9000)
  public void test_setReceiver_15()  throws Throwable  {
      //caseID:8bcf848673e30e4ac61d6cc06be47e12
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
      //Input_0_String: `
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: setReceiver
      userAddress0.setReceiver("`");
      
      //Test Result Assert
      assertNull(userAddress0.getCityCode());
  }

  @Test(timeout = 9000)
  public void test_toString_16()  throws Throwable  {
      //caseID:b273f1c0aaf3e69b22a7d73f31a0488d
      //CoveredLines: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]
      //Assert: assertEquals("UserAddress(address=null, addressTags=null, cityCode=null, contact=null, countyCode=null, fullLocation=null, id=null, isDefault=0, postalCode=null, provinceCode=null, receiver=null)", method_result);
      
      UserAddress userAddress0 = new UserAddress();
      
      //Call method: toString
      String string0 = userAddress0.toString();
      
      //Test Result Assert
      assertEquals("UserAddress(address=null, addressTags=null, cityCode=null, contact=null, countyCode=null, fullLocation=null, id=null, isDefault=0, postalCode=null, provinceCode=null, receiver=null)", string0);
  }
}
