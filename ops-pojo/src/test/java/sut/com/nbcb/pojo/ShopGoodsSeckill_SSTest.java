/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopGoodsSeckill;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopGoodsSeckill_SSTest extends ShopGoodsSeckill_SSTest_scaffolding {
// allCoveredLines:[9, 14, 19, 24, 29]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:78dc787d19b1c675c1a9c51ce368c6b6
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: shopGoodsSeckill0
      //Assert: assertTrue(method_result);
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      
      //Call method: equals
      boolean boolean0 = shopGoodsSeckill0.equals(shopGoodsSeckill0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:5022ec3190df3e6f135fa158502ab7f2
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      
      //Call method: equals
      boolean boolean0 = shopGoodsSeckill0.equals("0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:29f4aa9a001494ad9943618b8202199b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 19, 24, 29]
      //Input_0_Object: shopGoodsSeckill0
      //Assert: assertTrue(method_result);
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      ShopGoodsSeckill shopGoodsSeckill1 = new ShopGoodsSeckill();
      
      //Call method: equals
      boolean boolean0 = shopGoodsSeckill1.equals(shopGoodsSeckill0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:61577b1b60449acccb6ed918b6603b8c
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 19, 24, 29]
      //Input_0_Object: shopGoodsSeckill1
      //Assert: assertTrue(method_result);
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      ShopGoodsSeckill shopGoodsSeckill1 = new ShopGoodsSeckill();
      
      //Call method: equals
      boolean boolean0 = shopGoodsSeckill0.equals(shopGoodsSeckill1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:5dbec5d1d868256b112a92fa1f626127
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 19, 24, 29]
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      
      //Call method: hashCode
      shopGoodsSeckill0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setEndDate_5()  throws Throwable  {
      //caseID:ceda9092e3befcb2192b38d76e8878c5
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setEndDate
      shopGoodsSeckill0.setEndDate(date0);
      
      //Test Result Assert
      assertNull(shopGoodsSeckill0.getGoodsName());
  }

  @Test(timeout = 9000)
  public void test_setSeckillPrice_6()  throws Throwable  {
      //caseID:18b6e337379ac1da03d30da09d5d9270
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 0
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      
      //Call method: setSeckillPrice
      shopGoodsSeckill0.setSeckillPrice(bigDecimal0);
      
      //Test Result Assert
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 9000)
  public void test_setStartDate_7()  throws Throwable  {
      //caseID:112855e3163d5f2068c6c3540f45d8ce
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setStartDate
      shopGoodsSeckill0.setStartDate(date0);
      
      //Test Result Assert
      assertNull(shopGoodsSeckill0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setStockCount_8()  throws Throwable  {
      //caseID:55787ea5da6419f4dbed9e6d841b4850
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: (-1)
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      Integer integer0 = new Integer((-1));
      
      //Call method: setStockCount
      shopGoodsSeckill0.setStockCount(integer0);
      
      //Test Result Assert
      assertEquals((-1), (int)shopGoodsSeckill0.getStockCount());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:9dd2c9e9f8436664ab448c44cb92eb31
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 14, 19, 24, 29]
      //Assert: assertEquals("ShopGoodsSeckill(seckillPrice=null, stockCount=null, startDate=null, endDate=null)", method_result);
      
      ShopGoodsSeckill shopGoodsSeckill0 = new ShopGoodsSeckill();
      
      //Call method: toString
      String string0 = shopGoodsSeckill0.toString();
      
      //Test Result Assert
      assertEquals("ShopGoodsSeckill(seckillPrice=null, stockCount=null, startDate=null, endDate=null)", string0);
  }
}
