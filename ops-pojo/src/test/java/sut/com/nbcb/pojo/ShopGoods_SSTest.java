/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopGoods;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopGoods_SSTest extends ShopGoods_SSTest_scaffolding {
// allCoveredLines:[8, 11, 13, 15, 17, 19, 21]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:a7ff9249db2f7a995511afcb3142b480
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: 346L
      //Assert: assertFalse(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      Long long0 = new Long(346L);
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(long0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:2acd87261c988a533715e5ae29390c26
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: shopGoods0
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(shopGoods0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:0eed474ba0b9778c33836409a90ccdcb
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Input_0_Object: shopGoods0
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      ShopGoods shopGoods1 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods1.equals(shopGoods0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:aff789f4691ca1c2cecee7039b44a2df
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Input_0_Object: shopGoods1
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      ShopGoods shopGoods1 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(shopGoods1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:a643b7c226568ae408f1ebda413d80d1
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: hashCode
      shopGoods0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddTime_05()  throws Throwable  {
      //caseID:519282bc1f6ee96825f4c563b3c58f0a
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Date: {}
      
      ShopGoods shopGoods0 = new ShopGoods();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAddTime
      shopGoods0.setAddTime(date0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setGoodsDesc_06()  throws Throwable  {
      //caseID:9625dcd73a9c6d070e6f644966ef6370
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 1
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: setGoodsDesc
      shopGoods0.setGoodsDesc("1");
      
      //Test Result Assert
      assertEquals("1", shopGoods0.getGoodsDesc());
  }

  @Test(timeout = 9000)
  public void test_setGoodsId_07()  throws Throwable  {
      //caseID:055ae81df156bf059314e88e7c3ae39f
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Long: 468L
      
      ShopGoods shopGoods0 = new ShopGoods();
      Long long0 = new Long(468L);
      
      //Call method: setGoodsId
      shopGoods0.setGoodsId(long0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsDesc());
  }

  @Test(timeout = 9000)
  public void test_setGoodsName_08()  throws Throwable  {
      //caseID:1ad2cb1366cac496e0f558dca36ea76a
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: setGoodsName
      shopGoods0.setGoodsName("");
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_09()  throws Throwable  {
      //caseID:77f490371b609757ed2482fcd0254835
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: (-1)
      
      ShopGoods shopGoods0 = new ShopGoods();
      Integer integer0 = new Integer((-1));
      
      //Call method: setGoodsNumber
      shopGoods0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsDesc());
  }

  @Test(timeout = 9000)
  public void test_setGoodsPrice_10()  throws Throwable  {
      //caseID:fc5421ac8df7fc0f9d5c00631b224f5e
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_BigDecimal: 0L
      
      ShopGoods shopGoods0 = new ShopGoods();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      
      //Call method: setGoodsPrice
      shopGoods0.setGoodsPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsDesc());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:beb49b1c32e2c2ce5192a1b8d5db8148
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Assert: assertEquals("ShopGoods(goodsId=null, goodsName=null, goodsNumber=null, goodsPrice=null, goodsDesc=null, addTime=null)", method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: toString
      String string0 = shopGoods0.toString();
      
      //Test Result Assert
      assertEquals("ShopGoods(goodsId=null, goodsName=null, goodsNumber=null, goodsPrice=null, goodsDesc=null, addTime=null)", string0);
  }
}
