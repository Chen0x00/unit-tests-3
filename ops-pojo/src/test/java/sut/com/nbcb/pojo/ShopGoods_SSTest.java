/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopGoods;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopGoods_SSTest extends ShopGoods_SSTest_scaffolding {
// allCoveredLines:[8, 11, 13, 15, 17, 19, 21]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:9cb5af6f1820f4390ac81c9c57978196
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: BigDecimal.TEN
      //Assert: assertFalse(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:5793a80cb3e65d2135a21e4cc97385ca
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: shopGoods0
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(shopGoods0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:defa5dc23a3b20ad2c83520b29019587
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Input_0_Object: shopGoods1
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      ShopGoods shopGoods1 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods0.equals(shopGoods1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:2f663243dcebe4ca6b1db547eb305eb6
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Input_0_Object: shopGoods0
      //Assert: assertTrue(method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      ShopGoods shopGoods1 = new ShopGoods();
      
      //Call method: equals
      boolean boolean0 = shopGoods1.equals(shopGoods0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:262f044badac9dfee6f28fe96b5404fc
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: hashCode
      shopGoods0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddTime_05()  throws Throwable  {
      //caseID:2f80f8cd153329c8e425ea4a1cc4beae
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Date: {}
      
      ShopGoods shopGoods0 = new ShopGoods();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAddTime
      shopGoods0.setAddTime(date0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsId());
  }

  @Test(timeout = 9000)
  public void test_setGoodsDesc_06()  throws Throwable  {
      //caseID:33e345b9ce426275a55e370524c26674
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 59
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: setGoodsDesc
      shopGoods0.setGoodsDesc("59");
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setGoodsId_07()  throws Throwable  {
      //caseID:4f4792c7bf1ee5cc9ad9e56c3451f266
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Long: 1478L
      
      ShopGoods shopGoods0 = new ShopGoods();
      Long long0 = new Long(1478L);
      
      //Call method: setGoodsId
      shopGoods0.setGoodsId(long0);
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setGoodsName_08()  throws Throwable  {
      //caseID:74d1e25b94116f1ac2c017a70a00ab8e
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_String: 84d/(^j@dujob(}
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: setGoodsName
      shopGoods0.setGoodsName("84d/(^j@dujob(}");
      
      //Test Result Assert
      assertNull(shopGoods0.getGoodsDesc());
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_09()  throws Throwable  {
      //caseID:4a66bf1c57177169e6b460aa193b0a37
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: (-1)
      
      ShopGoods shopGoods0 = new ShopGoods();
      Integer integer0 = new Integer((-1));
      
      //Call method: setGoodsNumber
      shopGoods0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertEquals((-1), (int)shopGoods0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setGoodsPrice_10()  throws Throwable  {
      //caseID:0bd274ba4e17480ccf60c18187232d63
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      ShopGoods shopGoods0 = new ShopGoods();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setGoodsPrice
      shopGoods0.setGoodsPrice(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_toString_11()  throws Throwable  {
      //caseID:75c7d0fb2b81df9c72f958ea8c24c19c
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 13, 15, 17, 19, 21]
      //Assert: assertEquals("ShopGoods(goodsId=null, goodsName=null, goodsNumber=null, goodsPrice=null, goodsDesc=null, addTime=null)", method_result);
      
      ShopGoods shopGoods0 = new ShopGoods();
      
      //Call method: toString
      String string0 = shopGoods0.toString();
      
      //Test Result Assert
      assertEquals("ShopGoods(goodsId=null, goodsName=null, goodsNumber=null, goodsPrice=null, goodsDesc=null, addTime=null)", string0);
  }
}
