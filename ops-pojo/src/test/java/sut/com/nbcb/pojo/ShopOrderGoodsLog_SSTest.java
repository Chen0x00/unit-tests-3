/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopOrderGoodsLog;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopOrderGoodsLog_SSTest extends ShopOrderGoodsLog_SSTest_scaffolding {
// allCoveredLines:[8, 10, 12]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:c7c19eb7e159b1fa45b5e67dea6e8d6d
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: 4006
      //Assert: assertFalse(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      Integer integer0 = new Integer(4006);
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:775ca80809b470c9f375bd7c9bcadce1
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: shopOrderGoodsLog0
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:8cc0cd2767caa356d9fe65ff2ecb3b01
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Input_0_Object: shopOrderGoodsLog0
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      ShopOrderGoodsLog shopOrderGoodsLog1 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog1.equals(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:c0b343d9e7a7005aeeb1f1acf505a8aa
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Input_0_Object: shopOrderGoodsLog1
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      ShopOrderGoodsLog shopOrderGoodsLog1 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(shopOrderGoodsLog1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:03b781531b85672ca8c23b503c5dc2cf
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: hashCode
      shopOrderGoodsLog0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_5()  throws Throwable  {
      //caseID:c2076e3e4dd255fb49019e98c639e282
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: 782
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      Integer integer0 = new Integer(782);
      
      //Call method: setGoodsNumber
      shopOrderGoodsLog0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertNull(shopOrderGoodsLog0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setLogTime_6()  throws Throwable  {
      //caseID:7837c94f71a574381f0cb18434daeb32
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Date: {}
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setLogTime
      shopOrderGoodsLog0.setLogTime(date0);
      
      //Test Result Assert
      assertNull(shopOrderGoodsLog0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_toString_7()  throws Throwable  {
      //caseID:a37a708fdb07cd52c85be75bb0a8c3c9
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Assert: assertEquals("ShopOrderGoodsLog(goodsNumber=null, logTime=null)", method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: toString
      String string0 = shopOrderGoodsLog0.toString();
      
      //Test Result Assert
      assertEquals("ShopOrderGoodsLog(goodsNumber=null, logTime=null)", string0);
  }
}
