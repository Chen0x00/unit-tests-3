/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopOrderGoodsLog;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopOrderGoodsLog_SSTest extends ShopOrderGoodsLog_SSTest_scaffolding {
// allCoveredLines:[8, 10, 12]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:db26b072e965741ac940177a40c7427c
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: shopOrderGoodsLog0
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:660b94c5fcc077310022898654015230
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: 0
      //Assert: assertFalse(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      Integer integer0 = new Integer(0);
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:2161ed813594c478d56783be9adfec14
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Input_0_Object: shopOrderGoodsLog0
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      ShopOrderGoodsLog shopOrderGoodsLog1 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog1.equals(shopOrderGoodsLog0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:9aa4b3de6790f1e0b2bc68e092819f1a
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Input_0_Object: shopOrderGoodsLog1
      //Assert: assertTrue(method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      ShopOrderGoodsLog shopOrderGoodsLog1 = new ShopOrderGoodsLog();
      
      //Call method: equals
      boolean boolean0 = shopOrderGoodsLog0.equals(shopOrderGoodsLog1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:fa2ef1d196d10eed3ea267ebd69d1419
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: hashCode
      shopOrderGoodsLog0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_5()  throws Throwable  {
      //caseID:7a23bf5014de23a3754e577b0f2e6c18
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: 0
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      Integer integer0 = new Integer(0);
      
      //Call method: setGoodsNumber
      shopOrderGoodsLog0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertNull(shopOrderGoodsLog0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setLogTime_6()  throws Throwable  {
      //caseID:fbb1f116730e688ed6832bf8223beb7f
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8]
      //Input_0_Date: {}
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setLogTime
      shopOrderGoodsLog0.setLogTime(date0);
      
      //Test Result Assert
      assertNull(shopOrderGoodsLog0.getGoodsId());
  }

  @Test(timeout = 9000)
  public void test_toString_7()  throws Throwable  {
      //caseID:c994412179aae29bf0f79af0bcc5a472
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 10, 12]
      //Assert: assertEquals("ShopOrderGoodsLog(goodsNumber=null, logTime=null)", method_result);
      
      ShopOrderGoodsLog shopOrderGoodsLog0 = new ShopOrderGoodsLog();
      
      //Call method: toString
      String string0 = shopOrderGoodsLog0.toString();
      
      //Test Result Assert
      assertEquals("ShopOrderGoodsLog(goodsNumber=null, logTime=null)", string0);
  }
}
