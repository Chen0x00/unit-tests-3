/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopOrder;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopOrder_SSTest extends ShopOrder_SSTest_scaffolding {
// allCoveredLines:[9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:d69733e7d57218ef0c382659f1e29b3b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: object0
      //Assert: assertFalse(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      Object object0 = new Object();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals(object0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:b7231d4fa8de8769f60b5c48c16343a5
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: shopOrder0
      //Assert: assertTrue(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals(shopOrder0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:c45f3f8fbd55113f9ac4da38260a4e22
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      //Input_0_Object: shopOrder1
      //Assert: assertTrue(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      ShopOrder shopOrder1 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals(shopOrder1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_03()  throws Throwable  {
      //caseID:4c72e3e310cedd1af3935aa32fefe893
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: hashCode
      shopOrder0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddTime_04()  throws Throwable  {
      //caseID:4cc18546c386164edf4a45165d3a1011
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAddTime
      shopOrder0.setAddTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getConsignee());
  }

  @Test(timeout = 9000)
  public void test_setAddress_05()  throws Throwable  {
      //caseID:5bc4925565ad36dc7ba48791af750b4b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_String: ;#U<hG
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: setAddress
      shopOrder0.setAddress(";#U<hG");
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsId());
  }

  @Test(timeout = 9000)
  public void test_setConfirmTime_06()  throws Throwable  {
      //caseID:c6a535c09501a368846531af828119c7
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setConfirmTime
      shopOrder0.setConfirmTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setConsignee_07()  throws Throwable  {
      //caseID:5fb970a33a62aa0a2fe87c4f4e44226d
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_String: 1
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: setConsignee
      shopOrder0.setConsignee("1");
      
      //Test Result Assert
      assertNull(shopOrder0.getPayStatus());
  }

  @Test(timeout = 9000)
  public void test_setCouponId_08()  throws Throwable  {
      //caseID:b02a294bfb7ecf5997ee729d2290f35a
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 2227L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(2227L);
      
      //Call method: setCouponId
      shopOrder0.setCouponId(long0);
      
      //Test Result Assert
      assertEquals(2227L, (long)shopOrder0.getCouponId());
  }

  @Test(timeout = 9000)
  public void test_setCouponPaid_09()  throws Throwable  {
      //caseID:5d5016bbc557f80a2984de3f635c695b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 3426L
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(3426L);
      
      //Call method: setCouponPaid
      shopOrder0.setCouponPaid(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsId());
  }

  @Test(timeout = 9000)
  public void test_setGoodsAmount_10()  throws Throwable  {
      //caseID:d7bc8d4f28cf3932f36239efbbd00e4c
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 0
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      
      //Call method: setGoodsAmount
      shopOrder0.setGoodsAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getShippingStatus());
  }

  @Test(timeout = 9000)
  public void test_setGoodsId_11()  throws Throwable  {
      //caseID:ef019ad24e554ce3d07a96a09224493b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 1L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(1L);
      
      //Call method: setGoodsId
      shopOrder0.setGoodsId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_12()  throws Throwable  {
      //caseID:681a64e94c2d80ca4062def09e17571e
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 0
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(0);
      
      //Call method: setGoodsNumber
      shopOrder0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setGoodsPrice_13()  throws Throwable  {
      //caseID:2d522a4f3ffd06e043e5cd2198d0d5bb
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setGoodsPrice
      shopOrder0.setGoodsPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setMoneyPaid_14()  throws Throwable  {
      //caseID:37f50a37b65c35ea513b19701c7f3829
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setMoneyPaid
      shopOrder0.setMoneyPaid(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setOrderAmount_15()  throws Throwable  {
      //caseID:10ff3f23025187daecc4734903fa2eb4
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 614.41
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(614.41);
      
      //Call method: setOrderAmount
      shopOrder0.setOrderAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getConsignee());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_16()  throws Throwable  {
      //caseID:a566f84f00629571d2f595cc93d3a26c
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 0L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(0L);
      
      //Call method: setOrderId
      shopOrder0.setOrderId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getConsignee());
  }

  @Test(timeout = 9000)
  public void test_setOrderStatus_17()  throws Throwable  {
      //caseID:530ea30c39fa54bfb4cd50d9c49c7429
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 43
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(43);
      
      //Call method: setOrderStatus
      shopOrder0.setOrderStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_18()  throws Throwable  {
      //caseID:36522864113185c4bbb746d81c751e80
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: (-837.421615372659)
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal((-837.421615372659));
      
      //Call method: setPayAmount
      shopOrder0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setPayStatus_19()  throws Throwable  {
      //caseID:06bdc55ce72e4d92b74c53708cf5ca46
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 0
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(0);
      
      //Call method: setPayStatus
      shopOrder0.setPayStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setPayTime_20()  throws Throwable  {
      //caseID:af94a36a0aaa1b56811eedc0d9a72eda
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setPayTime
      shopOrder0.setPayTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setShippingFee_21()  throws Throwable  {
      //caseID:1f362f2c4bbe4b529a2a08684ee1845f
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: (-936.3909594)
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal((-936.3909594));
      
      //Call method: setShippingFee
      shopOrder0.setShippingFee(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_setShippingStatus_22()  throws Throwable  {
      //caseID:4ae99c65c449ee78779135c31c965230
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 310
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(310);
      
      //Call method: setShippingStatus
      shopOrder0.setShippingStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsId());
  }

  @Test(timeout = 9000)
  public void test_setUserId_23()  throws Throwable  {
      //caseID:371824e200cbf04e9a48b845ade28d1b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 1481L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(1481L);
      
      //Call method: setUserId
      shopOrder0.setUserId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getGoodsNumber());
  }

  @Test(timeout = 9000)
  public void test_toString_24()  throws Throwable  {
      //caseID:44136963845ad677239d75bd5928c62a
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      //Assert: assertEquals("ShopOrder(orderId=null, userId=null, orderStatus=null, payStatus=null, shippingStatus=null, address=null, consignee=null, goodsId=null, goodsNumber=null, goodsPrice=null, goodsAmount=null, shippingFee=null, orderAmount=null, couponId=null, couponPaid=null, moneyPaid=null, payAmount=null, addTime=null, confirmTime=null, payTime=null)", method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: toString
      String string0 = shopOrder0.toString();
      
      //Test Result Assert
      assertEquals("ShopOrder(orderId=null, userId=null, orderStatus=null, payStatus=null, shippingStatus=null, address=null, consignee=null, goodsId=null, goodsNumber=null, goodsPrice=null, goodsAmount=null, shippingFee=null, orderAmount=null, couponId=null, couponPaid=null, moneyPaid=null, payAmount=null, addTime=null, confirmTime=null, payTime=null)", string0);
  }
}
