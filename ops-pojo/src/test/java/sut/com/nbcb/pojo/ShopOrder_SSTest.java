/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.nbcb.pojo.ShopOrder;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopOrder_SSTest extends ShopOrder_SSTest_scaffolding {
// allCoveredLines:[9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:569f42ca768a0c31c36f6d54592a7d1a
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: reactor.core.publisher.FluxSource
      //Assert: assertFalse(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals("reactor.core.publisher.FluxSource");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:b1a674fa18ca1597b922e8904de6ae0b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Object: shopOrder0
      //Assert: assertTrue(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals(shopOrder0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:7eed0ae46ffd3b3f30794d8e6c906842
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      //Input_0_Object: shopOrder1
      //Assert: assertTrue(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      ShopOrder shopOrder1 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder0.equals(shopOrder1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:08d82852b5250387a9c5c39c92b2a346
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      //Input_0_Object: shopOrder0
      //Assert: assertTrue(method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      ShopOrder shopOrder1 = new ShopOrder();
      
      //Call method: equals
      boolean boolean0 = shopOrder1.equals(shopOrder0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:1c90d4952ceeb654c92f1cc3f7ad9fb6
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: hashCode
      shopOrder0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setAddTime_05()  throws Throwable  {
      //caseID:4f134f208242b97f44de9da20cc8289a
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setAddTime
      shopOrder0.setAddTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setAddress_06()  throws Throwable  {
      //caseID:1179ba086938b3c088ffa4ba198d0ec6
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_String: , payAmount=
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: setAddress
      shopOrder0.setAddress(", payAmount=");
      
      //Test Result Assert
      assertNull(shopOrder0.getShippingStatus());
  }

  @Test(timeout = 9000)
  public void test_setConfirmTime_07()  throws Throwable  {
      //caseID:18845cf1f5840bf0b6bdecc8f65242d9
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setConfirmTime
      shopOrder0.setConfirmTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setConsignee_08()  throws Throwable  {
      //caseID:def5f4269935d63ecd6a71e101e5703f
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_String: 1
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: setConsignee
      shopOrder0.setConsignee("1");
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setCouponId_09()  throws Throwable  {
      //caseID:f43c91096470a2a2496180b2237bd134
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 1341L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(1341L);
      
      //Call method: setCouponId
      shopOrder0.setCouponId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setCouponPaid_10()  throws Throwable  {
      //caseID:712bf161d3508ec48cf97430b8d5810b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: bigInteger0
      
      ShopOrder shopOrder0 = new ShopOrder();
      byte[] byteArray0 = new byte[2];
      //mock bigInteger0
      BigInteger bigInteger0 = mock(BigInteger.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteArray0).when(bigInteger0).toByteArray();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      
      //Call method: setCouponPaid
      shopOrder0.setCouponPaid(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setGoodsAmount_11()  throws Throwable  {
      //caseID:023eb2c9f262714988852abee9adca46
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 1.0
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      
      //Call method: setGoodsAmount
      shopOrder0.setGoodsAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setGoodsId_12()  throws Throwable  {
      //caseID:4629a8fce0bbc42526a886a7e4d44e6b
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 2597L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(2597L);
      
      //Call method: setGoodsId
      shopOrder0.setGoodsId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setGoodsNumber_13()  throws Throwable  {
      //caseID:2969c9d1ed29e06cc422d805e616c67e
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 59
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(59);
      
      //Call method: setGoodsNumber
      shopOrder0.setGoodsNumber(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setGoodsPrice_14()  throws Throwable  {
      //caseID:af2a563b9711a435ca4fa78a8183f6dc
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setGoodsPrice
      shopOrder0.setGoodsPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setMoneyPaid_15()  throws Throwable  {
      //caseID:44617d5048c6d6b45dc4213e002b8e11
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 0L
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      
      //Call method: setMoneyPaid
      shopOrder0.setMoneyPaid(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setOrderAmount_16()  throws Throwable  {
      //caseID:8bb908d8636dbfee35a558554f2db25d
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setOrderAmount
      shopOrder0.setOrderAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_17()  throws Throwable  {
      //caseID:ea834f59f870f22037e06f5b255fb5b4
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 0L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(0L);
      
      //Call method: setOrderId
      shopOrder0.setOrderId(long0);
      
      //Test Result Assert
      assertEquals(0L, (long)shopOrder0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setOrderStatus_18()  throws Throwable  {
      //caseID:1f0e4f6dc9792429f866af6e45b95601
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 12
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(12);
      
      //Call method: setOrderStatus
      shopOrder0.setOrderStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_19()  throws Throwable  {
      //caseID:c86ba9662e2ff0724a955d431e137c7f
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: 0
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      
      //Call method: setPayAmount
      shopOrder0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setPayStatus_20()  throws Throwable  {
      //caseID:3fe8ca25687ea3e3f0f3103d8a2fb0f0
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 59
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(59);
      
      //Call method: setPayStatus
      shopOrder0.setPayStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getAddress());
  }

  @Test(timeout = 9000)
  public void test_setPayTime_21()  throws Throwable  {
      //caseID:81f10f337bcc1a7fabc5e8958f4d32d2
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Date: {}
      
      ShopOrder shopOrder0 = new ShopOrder();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setPayTime
      shopOrder0.setPayTime(date0);
      
      //Test Result Assert
      assertNull(shopOrder0.getShippingStatus());
  }

  @Test(timeout = 9000)
  public void test_setShippingFee_22()  throws Throwable  {
      //caseID:e135710d340471e98a14573476238329
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      ShopOrder shopOrder0 = new ShopOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setShippingFee
      shopOrder0.setShippingFee(bigDecimal0);
      
      //Test Result Assert
      assertNull(shopOrder0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setShippingStatus_23()  throws Throwable  {
      //caseID:e3a805f917e93cb6ad35a43a6a2aafa8
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Integer: 118
      
      ShopOrder shopOrder0 = new ShopOrder();
      Integer integer0 = new Integer(118);
      
      //Call method: setShippingStatus
      shopOrder0.setShippingStatus(integer0);
      
      //Test Result Assert
      assertNull(shopOrder0.getOrderStatus());
  }

  @Test(timeout = 9000)
  public void test_setUserId_24()  throws Throwable  {
      //caseID:c3bca92433f788ab0d9c7ce3191bd44c
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
      //Input_0_Long: 3623L
      
      ShopOrder shopOrder0 = new ShopOrder();
      Long long0 = new Long(3623L);
      
      //Call method: setUserId
      shopOrder0.setUserId(long0);
      
      //Test Result Assert
      assertNull(shopOrder0.getPayStatus());
  }

  @Test(timeout = 9000)
  public void test_toString_25()  throws Throwable  {
      //caseID:3e977ee37481b263fb1d7bc3b4b4a8c5
      //CoveredLines: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
      //Assert: assertEquals("ShopOrder(orderId=null, userId=null, orderStatus=null, payStatus=null, shippingStatus=null, address=null, consignee=null, goodsId=null, goodsNumber=null, goodsPrice=null, goodsAmount=null, shippingFee=null, orderAmount=null, couponId=null, couponPaid=null, moneyPaid=null, payAmount=null, addTime=null, confirmTime=null, payTime=null)", method_result);
      
      ShopOrder shopOrder0 = new ShopOrder();
      
      //Call method: toString
      String string0 = shopOrder0.toString();
      
      //Test Result Assert
      assertEquals("ShopOrder(orderId=null, userId=null, orderStatus=null, payStatus=null, shippingStatus=null, address=null, consignee=null, goodsId=null, goodsNumber=null, goodsPrice=null, goodsAmount=null, shippingFee=null, orderAmount=null, couponId=null, couponPaid=null, moneyPaid=null, payAmount=null, addTime=null, confirmTime=null, payTime=null)", string0);
  }
}
