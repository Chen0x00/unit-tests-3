/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.nbcb.pojo.ShopPay;
import java.math.BigDecimal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class ShopPay_SSTest extends ShopPay_SSTest_scaffolding {
// allCoveredLines:[8, 10, 12, 14, 16]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:d9b0dbcf9a90af5e568b49dde4cf820c
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: BigDecimal.TEN
      //Assert: assertFalse(method_result);
      
      ShopPay shopPay0 = new ShopPay();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: equals
      boolean boolean0 = shopPay0.equals(bigDecimal0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:a9ab4cb4d69053f79fb562fe2ed06ea3
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Object: shopPay0
      //Assert: assertTrue(method_result);
      
      ShopPay shopPay0 = new ShopPay();
      
      //Call method: equals
      boolean boolean0 = shopPay0.equals(shopPay0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:dcd4c1a15883600bcd107763b10b0d89
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: shopPay1
      //Assert: assertTrue(method_result);
      
      ShopPay shopPay0 = new ShopPay();
      ShopPay shopPay1 = new ShopPay();
      
      //Call method: equals
      boolean boolean0 = shopPay0.equals(shopPay1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:da8b60cc0e64eb38e64ddb0793aec969
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Input_0_Object: shopPay0
      //Assert: assertTrue(method_result);
      
      ShopPay shopPay0 = new ShopPay();
      ShopPay shopPay1 = new ShopPay();
      
      //Call method: equals
      boolean boolean0 = shopPay1.equals(shopPay0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:defde9a5adaa71c26e9be52928451da1
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      
      ShopPay shopPay0 = new ShopPay();
      
      //Call method: hashCode
      shopPay0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setIsPaid_5()  throws Throwable  {
      //caseID:18f83c5fb6996369ba423d2925f2921e
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Integer: 358
      
      ShopPay shopPay0 = new ShopPay();
      Integer integer0 = new Integer(358);
      
      //Call method: setIsPaid
      shopPay0.setIsPaid(integer0);
      
      //Test Result Assert
      assertNull(shopPay0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setOrderId_6()  throws Throwable  {
      //caseID:01f9d584c3f8973d9d308b2a31be4f7d
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Long: 1L
      
      ShopPay shopPay0 = new ShopPay();
      Long long0 = new Long(1L);
      
      //Call method: setOrderId
      shopPay0.setOrderId(long0);
      
      //Test Result Assert
      assertEquals(1L, (long)shopPay0.getOrderId());
  }

  @Test(timeout = 9000)
  public void test_setPayAmount_7()  throws Throwable  {
      //caseID:a6e431671bdf749cf21fcbd803a306ea
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      ShopPay shopPay0 = new ShopPay();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setPayAmount
      shopPay0.setPayAmount(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 9000)
  public void test_setPayId_8()  throws Throwable  {
      //caseID:d3b270dd6e50ddb75b7bc7573957ea51
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8]
      //Input_0_Long: 0L
      
      ShopPay shopPay0 = new ShopPay();
      Long long0 = new Long(0L);
      
      //Call method: setPayId
      shopPay0.setPayId(long0);
      
      //Test Result Assert
      assertEquals(0L, (long)shopPay0.getPayId());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:2c3ddc8617e459544298651d5f6543ec
      //CoveredLines: [8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 12, 14, 16]
      //Assert: assertEquals("ShopPay(payId=null, orderId=null, payAmount=null, isPaid=null)", method_result);
      
      ShopPay shopPay0 = new ShopPay();
      
      //Call method: toString
      String string0 = shopPay0.toString();
      
      //Test Result Assert
      assertEquals("ShopPay(payId=null, orderId=null, payAmount=null, isPaid=null)", string0);
  }
}
