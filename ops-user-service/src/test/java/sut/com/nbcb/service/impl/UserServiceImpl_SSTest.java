/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopUserMapper;
import com.nbcb.mapper.ShopUserMoneyLogMapper;
import com.nbcb.pojo.ShopUser;
import com.nbcb.pojo.ShopUserMoneyLog;
import com.nbcb.pojo.UserLogin;
import com.nbcb.service.impl.UserServiceImpl;
import java.math.BigDecimal;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserServiceImpl_SSTest extends UserServiceImpl_SSTest_scaffolding {
// allCoveredLines:[37, 53, 54, 56, 61, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 82, 85, 86, 87, 90, 92, 93, 97, 118, 121, 122, 123, 127, 128, 133, 134, 136, 146, 149, 150, 151, 160, 162]

  @Test(timeout = 9000)
  public void test_doLongin_00()  throws Throwable  {
      //caseID:ff02084aa4c7432e4db3f7fe5658efec
      //CoveredLines: [37, 146, 149, 150, 151, 160, 162]
      //Input_0_UserLogin: {getPassword=\"Invalid username or password\", getAccount=\"Invalid username or password\"}
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("S1001").when(shopUser0).getUserPassword();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByName(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      //mock userLogin0
      UserLogin userLogin0 = mock(UserLogin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Invalid username or password").when(userLogin0).getAccount();
      doReturn("Invalid username or password").when(userLogin0).getPassword();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doLongin
      // Undeclared exception!
      try { 
        userServiceImpl0.doLongin(userLogin0, httpServletRequest0, httpServletResponse0);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.UserServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_01()  throws Throwable  {
      //caseID:1d935decaf38a9673c8c7c399900bdf6
      //CoveredLines: [37, 53, 54]
      //Input_0_Long: null
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      
      //Call method: findOne
      // Undeclared exception!
      try { 
        userServiceImpl0.findOne((Long) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_02()  throws Throwable  {
      //caseID:435258bf1f5de4f0aa9bb8672df847a3
      //CoveredLines: [37, 53, 56]
      //Input_0_Long: 889L
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(889L);
      
      //Call method: findOne
      ShopUser shopUser0 = userServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_findOneByName_03()  throws Throwable  {
      //caseID:bab83759d22d7e60bb40d0a79907de62
      //CoveredLines: [37, 61]
      //Input_0_String: 1.0
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      
      //Call method: findOneByName
      ShopUser shopUser0 = userServiceImpl0.findOneByName("1.0");
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_getUserByCookie_04()  throws Throwable  {
      //caseID:31d00eaef96807b30d5b8bf0b54fce69
      //CoveredLines: [37, 133, 136]
      //Input_0_String: aabbcc
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RedisTemplate<Integer, String> redisTemplate0 = new RedisTemplate<Integer, String>();
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getUserByCookie
      // Undeclared exception!
      try { 
        userServiceImpl0.getUserByCookie("aabbcc", httpServletRequest0, httpServletResponse0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_getUserByCookie_05()  throws Throwable  {
      //caseID:953703a6c2faec3ec4d1022d2da884cc
      //CoveredLines: [37, 133, 134]
      //Input_0_String: 
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getUserByCookie
      ShopUser shopUser0 = userServiceImpl0.getUserByCookie("", httpServletRequest0, httpServletResponse0);
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_06()  throws Throwable  {
      //caseID:1caa48075a5acfecc24fb9eab610b0c4
      //CoveredLines: [37, 67, 72]
      //Input_0_ShopUserMoneyLog: null
      //Assert: assertFalse(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid((ShopUserMoneyLog) null);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_07()  throws Throwable  {
      //caseID:e1e7e6cc229b7076990d976ceecc73aa
      //CoveredLines: [37, 67, 68, 72]
      //Input_0_ShopUserMoneyLog: {}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_08()  throws Throwable  {
      //caseID:7eef57fb3d4460a9a5150927947b087d
      //CoveredLines: [37, 67, 68, 69, 72]
      //Input_0_ShopUserMoneyLog: {getUserId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(0L);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_09()  throws Throwable  {
      //caseID:3f3f525f199fe26a2acca31a602e3759
      //CoveredLines: [37, 67, 68, 69, 70, 72]
      //Input_0_ShopUserMoneyLog: {getUseMoney=(BigDecimal) null, getOrderId=1L, getUserId=1L}
      //Assert: assertFalse(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(1L);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((BigDecimal) null).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_10()  throws Throwable  {
      //caseID:440f1c7be721d0b60dfd14f4beff6139
      //CoveredLines: [37, 67, 68, 69, 70, 71, 72]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.ZERO BigDecimal.ZERO, getOrderId=0L, getUserId=0L}
      //Assert: assertFalse(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_11()  throws Throwable  {
      //caseID:46bcbda276e7f80014ea9d15352bc3a8
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 86, 87]
      //Input_0_ShopUserMoneyLog: {getUseMoney=(long) 1 (long) 1, getMoneyLogType=1, getOrderId=1 1, getUserId=1 1 1}
      //Assert: assertFalse(method_result.getSuccess());
      //Assert: assertEquals(2, (int)method_result.getCode());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(1);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1);
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
      
      //Test Result Assert
      assertEquals(2, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_12()  throws Throwable  {
      //caseID:4bf80e49624bb9c107effc96ba9e69be
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 97, 118, 121, 122, 123, 127, 128]
      //Input_0_ShopUserMoneyLog: {getUseMoney=(long) 42 (long) 42, getMoneyLogType=42, getOrderId=42 42, getUserId=42 42 42}
      //Assert: assertTrue(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)42).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(42);
      BigDecimal bigDecimal0 = new BigDecimal((long) 42);
      Integer integer0 = new Integer(42);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_13()  throws Throwable  {
      //caseID:81c035b84c8ff3b498a41c56e5a6daa7
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 86, 90, 92, 93, 97, 118, 121, 122, 123, 127, 128]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=1 1, getOrderId=0L 0L, getUserId=0L 0L 0L}
      //Assert: assertTrue(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn(1).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn(1).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }
}
