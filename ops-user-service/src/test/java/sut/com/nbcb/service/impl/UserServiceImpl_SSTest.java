/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.nbcb.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.nbcb.entity.Result;
import com.nbcb.mapper.ShopUserMapper;
import com.nbcb.mapper.ShopUserMoneyLogMapper;
import com.nbcb.pojo.ShopUser;
import com.nbcb.pojo.ShopUserMoneyLog;
import com.nbcb.pojo.UserLogin;
import com.nbcb.service.impl.UserServiceImpl;
import java.math.BigDecimal;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.redis.core.RedisTemplate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserServiceImpl_SSTest extends UserServiceImpl_SSTest_scaffolding {
// allCoveredLines:[37, 53, 54, 56, 61, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 82, 85, 86, 87, 90, 92, 93, 97, 118, 121, 122, 123, 127, 128, 133, 134, 136, 146, 149, 150, 151, 160, 162]

  @Test(timeout = 9000)
  public void test_doLongin_00()  throws Throwable  {
      //caseID:efec265e29276d215acea18766a5bb36
      //CoveredLines: [37, 146, 149, 150, 151, 160, 162]
      //Input_0_UserLogin: {getPassword=\"\\u64CD\\u4F5C\\u6210\\u529F\", getAccount=\"\\u64CD\\u4F5C\\u6210\\u529F\"}
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(shopUser0).getUserPassword();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByName(nullable(java.lang.String.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      //mock userLogin0
      UserLogin userLogin0 = mock(UserLogin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u64CD\u4F5C\u6210\u529F").when(userLogin0).getAccount();
      doReturn("\u64CD\u4F5C\u6210\u529F").when(userLogin0).getPassword();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doLongin
      // Undeclared exception!
      try { 
        userServiceImpl0.doLongin(userLogin0, httpServletRequest0, httpServletResponse0);
      } catch(Throwable e) {
         verifyException("com.nbcb.service.impl.UserServiceImpl", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_01()  throws Throwable  {
      //caseID:37761ad6c49332e2462360d7a8115594
      //CoveredLines: [37, 53, 54]
      //Input_0_Long: null
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      
      //Call method: findOne
      // Undeclared exception!
      try { 
        userServiceImpl0.findOne((Long) null);
      } catch(Throwable e) {
         verifyException("com.nbcb.exception.CastException", e);
         assertEquals("com.nbcb.exception.CustomerException", e.getClass().getName());
      }
  }

  @Test(timeout = 9000)
  public void test_findOne_02()  throws Throwable  {
      //caseID:11c17da97f40280a797691e478c15cde
      //CoveredLines: [37, 53, 56]
      //Input_0_Long: 1250L
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(1250L);
      
      //Call method: findOne
      ShopUser shopUser0 = userServiceImpl0.findOne(long0);
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_findOneByName_03()  throws Throwable  {
      //caseID:370fd6eb64853ab231e02db94db8b120
      //CoveredLines: [37, 61]
      //Input_0_String: ;Q$\"N(49
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      
      //Call method: findOneByName
      ShopUser shopUser0 = userServiceImpl0.findOneByName(";Q$\"N(49");
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_getUserByCookie_04()  throws Throwable  {
      //caseID:fb473d7199e156029f628b1e8f3d0a8a
      //CoveredLines: [37, 133, 136]
      //Input_0_String: : [ 
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RedisTemplate<Integer, Object> redisTemplate0 = new RedisTemplate<Integer, Object>();
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "redisTemplate", (Object) redisTemplate0);
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getUserByCookie
      // Undeclared exception!
      try { 
        userServiceImpl0.getUserByCookie(": [ ", httpServletRequest0, httpServletResponse0);
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 9000)
  public void test_getUserByCookie_05()  throws Throwable  {
      //caseID:0873082eb5ceb8550435b838dcee9b37
      //CoveredLines: [37, 133, 134]
      //Input_0_String: 
      //Input_1_HttpServletRequest: {}
      //Input_2_HttpServletResponse: {}
      //Assert: assertNull(method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getUserByCookie
      ShopUser shopUser0 = userServiceImpl0.getUserByCookie("", httpServletRequest0, httpServletResponse0);
      
      //Test Result Assert
      assertNull(shopUser0);
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_06()  throws Throwable  {
      //caseID:05fd45f7297783be2321e5b68fb8fd8f
      //CoveredLines: [37, 67, 72]
      //Input_0_ShopUserMoneyLog: null
      //Assert: assertEquals(30003, (int)method_result.getCode());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid((ShopUserMoneyLog) null);
      
      //Test Result Assert
      assertEquals(30003, (int)result0.getCode());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_07()  throws Throwable  {
      //caseID:e8d1a314643011aa7b8a83495a85a10b
      //CoveredLines: [37, 67, 68, 72]
      //Input_0_ShopUserMoneyLog: {}
      //Assert: assertFalse(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertFalse(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_08()  throws Throwable  {
      //caseID:25662dde93e10a35cf522d64c069e649
      //CoveredLines: [37, 67, 68, 69, 72]
      //Input_0_ShopUserMoneyLog: {getUserId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(0L);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_09()  throws Throwable  {
      //caseID:8d35143ebad07593b93dba532cc3bfa5
      //CoveredLines: [37, 67, 68, 69, 70, 72]
      //Input_0_ShopUserMoneyLog: {getOrderId=0L, getUserId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(0L);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_10()  throws Throwable  {
      //caseID:8be6c32c20511401d8e434edb569f5f1
      //CoveredLines: [37, 67, 68, 69, 70, 71, 72]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.ZERO BigDecimal.ZERO, getOrderId=0L, getUserId=0L}
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      Long long0 = new Long(0L);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_11()  throws Throwable  {
      //caseID:8a52ce231a05ce206c607697b8ff4506
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 86, 87]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=1 1, getOrderId=1 1, getUserId=1 1 1}
      //Assert: assertEquals(2, (int)method_result.getCode());
      //Assert: assertEquals("\u9519\u8BEF", method_result.getMessage());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)1).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn(1).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long(1);
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertEquals(2, (int)result0.getCode());
      
      //Test Result Assert
      assertEquals("\u9519\u8BEF", result0.getMessage());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_12()  throws Throwable  {
      //caseID:3786c09d1c9407c8af34a22660048261
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 97, 118, 121, 122, 123, 127, 128]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=(-1) (-1), getOrderId=(-1) (-1), getUserId=(-1) (-1) (-1)}
      //Assert: assertTrue(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn((-1)).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)(-1)).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn((-1)).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }

  @Test(timeout = 9000)
  public void test_updateMoneyPaid_13()  throws Throwable  {
      //caseID:2edea333b5f88e5f7286948a20d80fc9
      //CoveredLines: [37, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 82, 85, 86, 90, 92, 93, 97, 118, 121, 122, 123, 127, 128]
      //Input_0_ShopUserMoneyLog: {getUseMoney=BigDecimal.TEN BigDecimal.TEN BigDecimal.TEN, getMoneyLogType=1 1, getOrderId=(-1) (-1), getUserId=(-1) (-1) (-1)}
      //Assert: assertTrue(method_result.getSuccess());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      //mock shopUser0
      ShopUser shopUser0 = mock(ShopUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(shopUser0).getUserMoney();
      //mock shopUserMapper0
      ShopUserMapper shopUserMapper0 = mock(ShopUserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(shopUser0).when(shopUserMapper0).selectByPrimaryKey(anyLong());
      doReturn((-1)).when(shopUserMapper0).updateByPrimaryKey(any(com.nbcb.pojo.ShopUser.class));
      //mock shopUserMoneyLogMapper0
      ShopUserMoneyLogMapper shopUserMoneyLogMapper0 = mock(ShopUserMoneyLogMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((long)(-1)).when(shopUserMoneyLogMapper0).countByExample(any(com.nbcb.pojo.ShopUserMoneyLogExample.class));
      doReturn((-1)).when(shopUserMoneyLogMapper0).insert(any(com.nbcb.pojo.ShopUserMoneyLog.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMoneyLogMapper", (Object) shopUserMoneyLogMapper0);
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) shopUserMapper0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer(1);
      //mock shopUserMoneyLog0
      ShopUserMoneyLog shopUserMoneyLog0 = mock(ShopUserMoneyLog.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(shopUserMoneyLog0).getMoneyLogType();
      doReturn(bigDecimal0, bigDecimal0, bigDecimal0).when(shopUserMoneyLog0).getUseMoney();
      doReturn(long0, long0).when(shopUserMoneyLog0).getOrderId();
      doReturn(long0, long0, long0).when(shopUserMoneyLog0).getUserId();
      
      //Call method: updateMoneyPaid
      Result result0 = userServiceImpl0.updateMoneyPaid(shopUserMoneyLog0);
      
      //Test Result Assert
      assertTrue(result0.getSuccess());
  }
}
